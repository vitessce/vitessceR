at a1=smoothstep(e1,e2,x_35);float a2=smoothstep(e2,e3,x_35);float a3=smoothstep(e3,e4,x_35);float a4=smoothstep(e4,e5,x_35);float a5=smoothstep(e5,e6,x_35);float a6=smoothstep(e6,e7,x_35);float a7=smoothstep(e7,e8,x_35);return max(mix(v0,v1,a0)*step(e0,x_35)*step(x_35,e1),max(mix(v1,v2,a1)*step(e1,x_35)*step(x_35,e2),max(mix(v2,v3,a2)*step(e2,x_35)*step(x_35,e3),max(mix(v3,v4,a3)*step(e3,x_35)*step(x_35,e4),max(mix(v4,v5,a4)*step(e4,x_35)*step(x_35,e5),max(mix(v5,v6,a5)*step(e5,x_35)*step(x_35,e6),max(mix(v6,v7,a6)*step(e6,x_35)*step(x_35,e7),mix(v7,v8,a7)*step(e7,x_35)*step(x_35,e8))))))));}vec4 freesurface_red_1679163293(float x_20){const float e0=0.0;const vec4 v0=vec4(0.23529411764705882,0.03529411764705882,0.07058823529411765,1);const float e1=0.13;const vec4 v1=vec4(0.39215686274509803,0.06666666666666667,0.10588235294117647,1);const float e2=0.25;const vec4 v2=vec4(0.5568627450980392,0.0784313725490196,0.11372549019607843,1);const float e3=0.38;const vec4 v3=vec4(0.6941176470588235,0.16862745098039217,0.10588235294117647,1);const float e4=0.5;const vec4 v4=vec4(0.7529411764705882,0.3411764705882353,0.24705882352941178,1);const float e5=0.63;const vec4 v5=vec4(0.803921568627451,0.49019607843137253,0.4117647058823529,1);const float e6=0.75;const vec4 v6=vec4(0.8470588235294118,0.6352941176470588,0.5803921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.8901960784313725,0.7803921568627451,0.7568627450980392,1);const float e8=1.0;const vec4 v8=vec4(0.9450980392156862,0.9294117647058824,0.9254901960784314,1);float a0=smoothstep(e0,e1,x_20);float a1=smoothstep(e1,e2,x_20);float a2=smoothstep(e2,e3,x_20);float a3=smoothstep(e3,e4,x_20);float a4=smoothstep(e4,e5,x_20);float a5=smoothstep(e5,e6,x_20);float a6=smoothstep(e6,e7,x_20);float a7=smoothstep(e7,e8,x_20);return max(mix(v0,v1,a0)*step(e0,x_20)*step(x_20,e1),max(mix(v1,v2,a1)*step(e1,x_20)*step(x_20,e2),max(mix(v2,v3,a2)*step(e2,x_20)*step(x_20,e3),max(mix(v3,v4,a3)*step(e3,x_20)*step(x_20,e4),max(mix(v4,v5,a4)*step(e4,x_20)*step(x_20,e5),max(mix(v5,v6,a5)*step(e5,x_20)*step(x_20,e6),max(mix(v6,v7,a6)*step(e6,x_20)*step(x_20,e7),mix(v7,v8,a7)*step(e7,x_20)*step(x_20,e8))))))));}vec4 oxygen(float x_11){const float e0=0.0;const vec4 v0=vec4(0.25098039215686274,0.0196078431372549,0.0196078431372549,1);const float e1=0.13;const vec4 v1=vec4(0.41568627450980394,0.023529411764705882,0.058823529411764705,1);const float e2=0.25;const vec4 v2=vec4(0.5647058823529412,0.10196078431372549,0.027450980392156862,1);const float e3=0.38;const vec4 v3=vec4(0.6588235294117647,0.25098039215686274,0.011764705882352941,1);const float e4=0.5;const vec4 v4=vec4(0.7372549019607844,0.39215686274509803,0.01568627450980392,1);const float e5=0.63;const vec4 v5=vec4(0.807843137254902,0.5333333333333333,0.043137254901960784,1);const float e6=0.75;const vec4 v6=vec4(0.8627450980392157,0.6823529411764706,0.09803921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.9058823529411765,0.8431372549019608,0.17254901960784313,1);const float e8=1.0;const vec4 v8=vec4(0.9725490196078431,0.996078431372549,0.4117647058823529,1);float a0=smoothstep(e0,e1,x_11);float a1=smoothstep(e1,e2,x_11);float a2=smoothstep(e2,e3,x_11);float a3=smoothstep(e3,e4,x_11);float a4=smoothstep(e4,e5,x_11);float a5=smoothstep(e5,e6,x_11);float a6=smoothstep(e6,e7,x_11);float a7=smoothstep(e7,e8,x_11);return max(mix(v0,v1,a0)*step(e0,x_11)*step(x_11,e1),max(mix(v1,v2,a1)*step(e1,x_11)*step(x_11,e2),max(mix(v2,v3,a2)*step(e2,x_11)*step(x_11,e3),max(mix(v3,v4,a3)*step(e3,x_11)*step(x_11,e4),max(mix(v4,v5,a4)*step(e4,x_11)*step(x_11,e5),max(mix(v5,v6,a5)*step(e5,x_11)*step(x_11,e6),max(mix(v6,v7,a6)*step(e6,x_11)*step(x_11,e7),mix(v7,v8,a7)*step(e7,x_11)*step(x_11,e8))))))));}vec4 par(float x_28){const float e0=0.0;const vec4 v0=vec4(0.2,0.0784313725490196,0.09411764705882353,1);const float e1=0.13;const vec4 v1=vec4(0.35294117647058826,0.12549019607843137,0.13725490196078433,1);const float e2=0.25;const vec4 v2=vec4(0.5058823529411764,0.17254901960784313,0.13333333333333333,1);const float e3=0.38;const vec4 v3=vec4(0.6235294117647059,0.26666666666666666,0.09803921568627451,1);const float e4=0.5;const vec4 v4=vec4(0.7137254901960784,0.38823529411764707,0.07450980392156863,1);const float e5=0.63;const vec4 v5=vec4(0.7803921568627451,0.5254901960784314,0.08627450980392157,1);const float e6=0.75;const vec4 v6=vec4(0.8313725490196079,0.6705882352941176,0.13725490196078433,1);const float e7=0.88;const vec4 v7=vec4(0.8666666666666667,0.8235294117647058,0.21176470588235294,1);const float e8=1.0;const vec4 v8=vec4(0.8823529411764706,0.9921568627450981,0.29411764705882354,1);float a0=smoothstep(e0,e1,x_28);float a1=smoothstep(e1,e2,x_28);float a2=smoothstep(e2,e3,x_28);float a3=smoothstep(e3,e4,x_28);float a4=smoothstep(e4,e5,x_28);float a5=smoothstep(e5,e6,x_28);float a6=smoothstep(e6,e7,x_28);float a7=smoothstep(e7,e8,x_28);return max(mix(v0,v1,a0)*step(e0,x_28)*step(x_28,e1),max(mix(v1,v2,a1)*step(e1,x_28)*step(x_28,e2),max(mix(v2,v3,a2)*step(e2,x_28)*step(x_28,e3),max(mix(v3,v4,a3)*step(e3,x_28)*step(x_28,e4),max(mix(v4,v5,a4)*step(e4,x_28)*step(x_28,e5),max(mix(v5,v6,a5)*step(e5,x_28)*step(x_28,e6),max(mix(v6,v7,a6)*step(e6,x_28)*step(x_28,e7),mix(v7,v8,a7)*step(e7,x_28)*step(x_28,e8))))))));}vec4 phase(float x_39){const float e0=0.0;const vec4 v0=vec4(0.5686274509803921,0.4117647058823529,0.07058823529411765,1);const float e1=0.13;const vec4 v1=vec4(0.7215686274509804,0.2784313725490196,0.14901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.7294117647058823,0.22745098039215686,0.45098039215686275,1);const float e3=0.38;const vec4 v3=vec4(0.6274509803921569,0.2784313725490196,0.7254901960784313,1);const float e4=0.5;const vec4 v4=vec4(0.43137254901960786,0.3803921568627451,0.8549019607843137,1);const float e5=0.63;const vec4 v5=vec4(0.19607843137254902,0.4823529411764706,0.6431372549019608,1);const float e6=0.75;const vec4 v6=vec4(0.12156862745098039,0.5137254901960784,0.43137254901960786,1);const float e7=0.88;const vec4 v7=vec4(0.30196078431372547,0.5058823529411764,0.13333333333333333,1);const float e8=1.0;const vec4 v8=vec4(0.5686274509803921,0.4117647058823529,0.07058823529411765,1);float a0=smoothstep(e0,e1,x_39);float a1=smoothstep(e1,e2,x_39);float a2=smoothstep(e2,e3,x_39);float a3=smoothstep(e3,e4,x_39);float a4=smoothstep(e4,e5,x_39);float a5=smoothstep(e5,e6,x_39);float a6=smoothstep(e6,e7,x_39);float a7=smoothstep(e7,e8,x_39);return max(mix(v0,v1,a0)*step(e0,x_39)*step(x_39,e1),max(mix(v1,v2,a1)*step(e1,x_39)*step(x_39,e2),max(mix(v2,v3,a2)*step(e2,x_39)*step(x_39,e3),max(mix(v3,v4,a3)*step(e3,x_39)*step(x_39,e4),max(mix(v4,v5,a4)*step(e4,x_39)*step(x_39,e5),max(mix(v5,v6,a5)*step(e5,x_39)*step(x_39,e6),max(mix(v6,v7,a6)*step(e6,x_39)*step(x_39,e7),mix(v7,v8,a7)*step(e7,x_39)*step(x_39,e8))))))));}vec4 salinity(float x_26){const float e0=0.0;const vec4 v0=vec4(0.16470588235294117,0.09411764705882353,0.4235294117647059,1);const float e1=0.13;const vec4 v1=vec4(0.12941176470588237,0.19607843137254902,0.6352941176470588,1);const float e2=0.25;const vec4 v2=vec4(0.058823529411764705,0.35294117647058826,0.5686274509803921,1);const float e3=0.38;const vec4 v3=vec4(0.1568627450980392,0.4627450980392157,0.5372549019607843,1);const float e4=0.5;const vec4 v4=vec4(0.23137254901960785,0.5725490196078431,0.5294117647058824,1);const float e5=0.63;const vec4 v5=vec4(0.30980392156862746,0.6862745098039216,0.49411764705882355,1);const float e6=0.75;const vec4 v6=vec4(0.47058823529411764,0.796078431372549,0.40784313725490196,1);const float e7=0.88;const vec4 v7=vec4(0.7568627450980392,0.8666666666666667,0.39215686274509803,1);const float e8=1.0;const vec4 v8=vec4(0.9921568627450981,0.9372549019607843,0.6039215686274509,1);float a0=smoothstep(e0,e1,x_26);float a1=smoothstep(e1,e2,x_26);float a2=smoothstep(e2,e3,x_26);float a3=smoothstep(e3,e4,x_26);float a4=smoothstep(e4,e5,x_26);float a5=smoothstep(e5,e6,x_26);float a6=smoothstep(e6,e7,x_26);float a7=smoothstep(e7,e8,x_26);return max(mix(v0,v1,a0)*step(e0,x_26)*step(x_26,e1),max(mix(v1,v2,a1)*step(e1,x_26)*step(x_26,e2),max(mix(v2,v3,a2)*step(e2,x_26)*step(x_26,e3),max(mix(v3,v4,a3)*step(e3,x_26)*step(x_26,e4),max(mix(v4,v5,a4)*step(e4,x_26)*step(x_26,e5),max(mix(v5,v6,a5)*step(e5,x_26)*step(x_26,e6),max(mix(v6,v7,a6)*step(e6,x_26)*step(x_26,e7),mix(v7,v8,a7)*step(e7,x_26)*step(x_26,e8))))))));}vec4 temperature(float x_8){const float e0=0.0;const vec4 v0=vec4(0.01568627450980392,0.13725490196078433,0.2,1);const float e1=0.13;const vec4 v1=vec4(0.09019607843137255,0.2,0.47843137254901963,1);const float e2=0.25;const vec4 v2=vec4(0.3333333333333333,0.23137254901960785,0.615686274509804,1);const float e3=0.38;const vec4 v3=vec4(0.5058823529411764,0.30980392156862746,0.5607843137254902,1);const float e4=0.5;const vec4 v4=vec4(0.6862745098039216,0.37254901960784315,0.5098039215686274,1);const float e5=0.63;const vec4 v5=vec4(0.8705882352941177,0.4392156862745098,0.396078431372549,1);const float e6=0.75;const vec4 v6=vec4(0.9764705882352941,0.5725490196078431,0.25882352941176473,1);const float e7=0.88;const vec4 v7=vec4(0.9764705882352941,0.7686274509803922,0.2549019607843137,1);const float e8=1.0;const vec4 v8=vec4(0.9098039215686274,0.9803921568627451,0.3568627450980392,1);float a0=smoothstep(e0,e1,x_8);float a1=smoothstep(e1,e2,x_8);float a2=smoothstep(e2,e3,x_8);float a3=smoothstep(e3,e4,x_8);float a4=smoothstep(e4,e5,x_8);float a5=smoothstep(e5,e6,x_8);float a6=smoothstep(e6,e7,x_8);float a7=smoothstep(e7,e8,x_8);return max(mix(v0,v1,a0)*step(e0,x_8)*step(x_8,e1),max(mix(v1,v2,a1)*step(e1,x_8)*step(x_8,e2),max(mix(v2,v3,a2)*step(e2,x_8)*step(x_8,e3),max(mix(v3,v4,a3)*step(e3,x_8)*step(x_8,e4),max(mix(v4,v5,a4)*step(e4,x_8)*step(x_8,e5),max(mix(v5,v6,a5)*step(e5,x_8)*step(x_8,e6),max(mix(v6,v7,a6)*step(e6,x_8)*step(x_8,e7),mix(v7,v8,a7)*step(e7,x_8)*step(x_8,e8))))))));}vec4 turbidity(float x_40){const float e0=0.0;const vec4 v0=vec4(0.13333333333333333,0.12156862745098039,0.10588235294117647,1);const float e1=0.13;const vec4 v1=vec4(0.2549019607843137,0.19607843137254902,0.1607843137254902,1);const float e2=0.25;const vec4 v2=vec4(0.3843137254901961,0.27058823529411763,0.20392156862745098,1);const float e3=0.38;const vec4 v3=vec4(0.5137254901960784,0.34901960784313724,0.2235294117647059,1);const float e4=0.5;const vec4 v4=vec4(0.6313725490196078,0.4392156862745098,0.23137254901960785,1);const float e5=0.63;const vec4 v5=vec4(0.7254901960784313,0.5490196078431373,0.25882352941176473,1);const float e6=0.75;const vec4 v6=vec4(0.792156862745098,0.6823529411764706,0.34509803921568627,1);const float e7=0.88;const vec4 v7=vec4(0.8470588235294118,0.8196078431372549,0.49411764705882355,1);const float e8=1.0;const vec4 v8=vec4(0.9137254901960784,0.9647058823529412,0.6705882352941176,1);float a0=smoothstep(e0,e1,x_40);float a1=smoothstep(e1,e2,x_40);float a2=smoothstep(e2,e3,x_40);float a3=smoothstep(e3,e4,x_40);float a4=smoothstep(e4,e5,x_40);float a5=smoothstep(e5,e6,x_40);float a6=smoothstep(e6,e7,x_40);float a7=smoothstep(e7,e8,x_40);return max(mix(v0,v1,a0)*step(e0,x_40)*step(x_40,e1),max(mix(v1,v2,a1)*step(e1,x_40)*step(x_40,e2),max(mix(v2,v3,a2)*step(e2,x_40)*step(x_40,e3),max(mix(v3,v4,a3)*step(e3,x_40)*step(x_40,e4),max(mix(v4,v5,a4)*step(e4,x_40)*step(x_40,e5),max(mix(v5,v6,a5)*step(e5,x_40)*step(x_40,e6),max(mix(v6,v7,a6)*step(e6,x_40)*step(x_40,e7),mix(v7,v8,a7)*step(e7,x_40)*step(x_40,e8))))))));}vec4 velocity_blue_297387650(float x_2){const float e0=0.0;const vec4 v0=vec4(0.06666666666666667,0.12549019607843137,0.25098039215686274,1);const float e1=0.13;const vec4 v1=vec4(0.13725490196078433,0.20392156862745098,0.4549019607843137,1);const float e2=0.25;const vec4 v2=vec4(0.11372549019607843,0.3176470588235294,0.611764705882353,1);const float e3=0.38;const vec4 v3=vec4(0.12156862745098039,0.44313725490196076,0.6352941176470588,1);const float e4=0.5;const vec4 v4=vec4(0.19607843137254902,0.5647058823529412,0.6627450980392157,1);const float e5=0.63;const vec4 v5=vec4(0.3411764705882353,0.6784313725490196,0.6901960784313725,1);const float e6=0.75;const vec4 v6=vec4(0.5843137254901961,0.7686274509803922,0.7411764705882353,1);const float e7=0.88;const vec4 v7=vec4(0.796078431372549,0.8666666666666667,0.8274509803921568,1);const float e8=1.0;const vec4 v8=vec4(0.996078431372549,0.984313725490196,0.9019607843137255,1);float a0=smoothstep(e0,e1,x_2);float a1=smoothstep(e1,e2,x_2);float a2=smoothstep(e2,e3,x_2);float a3=smoothstep(e3,e4,x_2);float a4=smoothstep(e4,e5,x_2);float a5=smoothstep(e5,e6,x_2);float a6=smoothstep(e6,e7,x_2);float a7=smoothstep(e7,e8,x_2);return max(mix(v0,v1,a0)*step(e0,x_2)*step(x_2,e1),max(mix(v1,v2,a1)*step(e1,x_2)*step(x_2,e2),max(mix(v2,v3,a2)*step(e2,x_2)*step(x_2,e3),max(mix(v3,v4,a3)*step(e3,x_2)*step(x_2,e4),max(mix(v4,v5,a4)*step(e4,x_2)*step(x_2,e5),max(mix(v5,v6,a5)*step(e5,x_2)*step(x_2,e6),max(mix(v6,v7,a6)*step(e6,x_2)*step(x_2,e7),mix(v7,v8,a7)*step(e7,x_2)*step(x_2,e8))))))));}vec4 velocity_green_2558432129(float x_27){const float e0=0.0;const vec4 v0=vec4(0.09019607843137255,0.13725490196078433,0.07450980392156863,1);const float e1=0.13;const vec4 v1=vec4(0.09411764705882353,0.25098039215686274,0.14901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.043137254901960784,0.37254901960784315,0.17647058823529413,1);const float e3=0.38;const vec4 v3=vec4(0.15294117647058825,0.4823529411764706,0.13725490196078433,1);const float e4=0.5;const vec4 v4=vec4(0.37254901960784315,0.5725490196078431,0.047058823529411764,1);const float e5=0.63;const vec4 v5=vec4(0.596078431372549,0.6470588235294118,0.07058823529411765,1);const float e6=0.75;const vec4 v6=vec4(0.788235294117647,0.7294117647058823,0.27058823529411763,1);const float e7=0.88;const vec4 v7=vec4(0.9137254901960784,0.8470588235294118,0.5372549019607843,1);const float e8=1.0;const vec4 v8=vec4(1,0.9921568627450981,0.803921568627451,1);float a0=smoothstep(e0,e1,x_27);float a1=smoothstep(e1,e2,x_27);float a2=smoothstep(e2,e3,x_27);float a3=smoothstep(e3,e4,x_27);float a4=smoothstep(e4,e5,x_27);float a5=smoothstep(e5,e6,x_27);float a6=smoothstep(e6,e7,x_27);float a7=smoothstep(e7,e8,x_27);return max(mix(v0,v1,a0)*step(e0,x_27)*step(x_27,e1),max(mix(v1,v2,a1)*step(e1,x_27)*step(x_27,e2),max(mix(v2,v3,a2)*step(e2,x_27)*step(x_27,e3),max(mix(v3,v4,a3)*step(e3,x_27)*step(x_27,e4),max(mix(v4,v5,a4)*step(e4,x_27)*step(x_27,e5),max(mix(v5,v6,a5)*step(e5,x_27)*step(x_27,e6),max(mix(v6,v7,a6)*step(e6,x_27)*step(x_27,e7),mix(v7,v8,a7)*step(e7,x_27)*step(x_27,e8))))))));}vec4 cubehelix(float x_37){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.07;const vec4 v1=vec4(0.08627450980392157,0.0196078431372549,0.23137254901960785,1);const float e2=0.13;const vec4 v2=vec4(0.23529411764705882,0.01568627450980392,0.4117647058823529,1);const float e3=0.2;const vec4 v3=vec4(0.42745098039215684,0.00392156862745098,0.5294117647058824,1);const float e4=0.27;const vec4 v4=vec4(0.6313725490196078,0,0.5764705882352941,1);const float e5=0.33;const vec4 v5=vec4(0.8235294117647058,0.00784313725490196,0.5568627450980392,1);const float e6=0.4;const vec4 v6=vec4(0.984313725490196,0.043137254901960784,0.4823529411764706,1);const float e7=0.47;const vec4 v7=vec4(1,0.11372549019607843,0.3803921568627451,1);const float e8=0.53;const vec4 v8=vec4(1,0.21176470588235294,0.27058823529411763,1);const float e9=0.6;const vec4 v9=vec4(1,0.3333333333333333,0.1803921568627451,1);const float e10=0.67;const vec4 v10=vec4(1,0.47058823529411764,0.13333333333333333,1);const float e11=0.73;const vec4 v11=vec4(1,0.615686274509804,0.1450980392156863,1);const float e12=0.8;const vec4 v12=vec4(0.9450980392156862,0.7490196078431373,0.2235294117647059,1);const float e13=0.87;const vec4 v13=vec4(0.8784313725490196,0.8627450980392157,0.36470588235294116,1);const float e14=0.93;const vec4 v14=vec4(0.8549019607843137,0.9450980392156862,0.5568627450980392,1);const float e15=1.0;const vec4 v15=vec4(0.8901960784313725,0.9921568627450981,0.7764705882352941,1);float a0=smoothstep(e0,e1,x_37);float a1=smoothstep(e1,e2,x_37);float a2=smoothstep(e2,e3,x_37);float a3=smoothstep(e3,e4,x_37);float a4=smoothstep(e4,e5,x_37);float a5=smoothstep(e5,e6,x_37);float a6=smoothstep(e6,e7,x_37);float a7=smoothstep(e7,e8,x_37);float a8=smoothstep(e8,e9,x_37);float a9=smoothstep(e9,e10,x_37);float a10=smoothstep(e10,e11,x_37);float a11=smoothstep(e11,e12,x_37);float a12=smoothstep(e12,e13,x_37);float a13=smoothstep(e13,e14,x_37);float a14=smoothstep(e14,e15,x_37);return max(mix(v0,v1,a0)*step(e0,x_37)*step(x_37,e1),max(mix(v1,v2,a1)*step(e1,x_37)*step(x_37,e2),max(mix(v2,v3,a2)*step(e2,x_37)*step(x_37,e3),max(mix(v3,v4,a3)*step(e3,x_37)*step(x_37,e4),max(mix(v4,v5,a4)*step(e4,x_37)*step(x_37,e5),max(mix(v5,v6,a5)*step(e5,x_37)*step(x_37,e6),max(mix(v6,v7,a6)*step(e6,x_37)*step(x_37,e7),max(mix(v7,v8,a7)*step(e7,x_37)*step(x_37,e8),max(mix(v8,v9,a8)*step(e8,x_37)*step(x_37,e9),max(mix(v9,v10,a9)*step(e9,x_37)*step(x_37,e10),max(mix(v10,v11,a10)*step(e10,x_37)*step(x_37,e11),max(mix(v11,v12,a11)*step(e11,x_37)*step(x_37,e12),max(mix(v12,v13,a12)*step(e12,x_37)*step(x_37,e13),max(mix(v13,v14,a13)*step(e13,x_37)*step(x_37,e14),mix(v14,v15,a14)*step(e14,x_37)*step(x_37,e15)))))))))))))));}vec4 apply_transparent_color_452471729(vec3 color,vec3 transparentColor,bool useTransparentColor,float opacity){return vec4(color,(color==transparentColor&&useTransparentColor)? 0. : opacity);}uniform float opacity;uniform bool useTransparentColor;vec4 colormap(float intensity){return vec4(apply_transparent_color_452471729(COLORMAP_FUNCTION(min(1.,intensity)).xyz,COLORMAP_FUNCTION(0.).xyz,useTransparentColor,opacity));}";
var additiveColormap = {
  name: "additive-colormap",
  fs: fs$2,
  inject: {
    "fs:DECKGL_MUTATE_COLOR": `
  float intensityCombo = 0.;
  intensityCombo += max(0.,intensity0);
  intensityCombo += max(0.,intensity1);
  intensityCombo += max(0.,intensity2);
  intensityCombo += max(0.,intensity3);
  intensityCombo += max(0.,intensity4);
  intensityCombo += max(0.,intensity5);
  rgba = colormap(intensityCombo);
`
  }
};
var defaultProps$6 = {
  colormap: {
    type: "string",
    value: "viridis",
    compare: true
  },
  opacity: {
    type: "number",
    value: 1,
    compare: true
  },
  useTransparentColor: {
    type: "boolean",
    value: false,
    compare: true
  }
};
var AdditiveColormapExtension = class extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["LayerExtension"] {
  getShaders() {
    var _a2;
    return {
      defines: {
        COLORMAP_FUNCTION: ((_a2 = this == null ? void 0 : this.props) == null ? void 0 : _a2.colormap) || defaultProps$6.colormap.value
      },
      modules: [additiveColormap]
    };
  }
  updateState(_a2) {
    var _b2 = _a2, {
      props,
      oldProps,
      changeFlags
    } = _b2, rest = __objRest(_b2, [
      "props",
      "oldProps",
      "changeFlags"
    ]);
    super.updateState(__spreadValues({
      props,
      oldProps,
      changeFlags
    }, rest));
    if (props.colormap !== oldProps.colormap) {
      const {
        gl
      } = this.context;
      if (this.state.model) {
        this.state.model.delete();
        this.setState({
          model: this._getModel(gl)
        });
      }
    }
  }
  draw() {
    var _a2;
    const {
      useTransparentColor = defaultProps$6.useTransparentColor.value,
      opacity = defaultProps$6.opacity.value
    } = this.props;
    const uniforms = {
      opacity,
      useTransparentColor
    };
    (_a2 = this.state.model) == null ? void 0 : _a2.setUniforms(uniforms);
  }
};
AdditiveColormapExtension.extensionName = "AdditiveColormapExtension";
AdditiveColormapExtension.defaultProps = defaultProps$6;
var defaultProps$5 = {
  pickable: {
    type: "boolean",
    value: true,
    compare: true
  },
  coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["COORDINATE_SYSTEM"].CARTESIAN,
  contrastLimits: {
    type: "array",
    value: [],
    compare: true
  },
  channelsVisible: {
    type: "array",
    value: [],
    compare: true
  },
  selections: {
    type: "array",
    value: [],
    compare: true
  },
  domain: {
    type: "array",
    value: [],
    compare: true
  },
  viewportId: {
    type: "string",
    value: "",
    compare: true
  },
  loader: {
    type: "object",
    value: {
      getRaster: () => __async(void 0, null, function* () {
        return {
          data: [],
          height: 0,
          width: 0
        };
      }),
      dtype: "Uint16"
    },
    compare: true
  },
  onClick: {
    type: "function",
    value: null,
    compare: true
  },
  onViewportLoad: {
    type: "function",
    value: null,
    compare: true
  },
  interpolation: {
    type: "number",
    value: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].NEAREST,
    compare: true
  },
  extensions: {
    type: "array",
    value: [new ColorPaletteExtension()],
    compare: true
  }
};
var ImageLayer = class extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["CompositeLayer"] {
  finalizeState() {
    this.state.abortController.abort();
  }
  updateState({
    props,
    oldProps
  }) {
    const loaderChanged = props.loader !== oldProps.loader;
    const selectionsChanged = props.selections !== oldProps.selections;
    if (loaderChanged || selectionsChanged) {
      const {
        loader,
        selections = [],
        onViewportLoad
      } = this.props;
      const abortController = new AbortController();
      this.setState({
        abortController
      });
      const {
        signal
      } = abortController;
      const getRaster = (selection) => loader.getRaster({
        selection,
        signal
      });
      const dataPromises = selections.map(getRaster);
      Promise.all(dataPromises).then((rasters) => {
        const raster = {
          data: rasters.map((d) => d.data),
          width: rasters[0].width,
          height: rasters[0].height
        };
        if (isInterleaved(loader.shape)) {
          raster.data = raster.data[0];
          if (raster.data.length === raster.width * raster.height * 3) {
            raster.format = _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].RGB;
            raster.dataFormat = _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].RGB;
          }
        }
        if (onViewportLoad) {
          onViewportLoad(raster);
        }
        this.setState(__spreadValues({}, raster));
      }).catch((e) => {
        if (e !== SIGNAL_ABORTED) {
          throw e;
        }
      });
    }
  }
  getPickingInfo({
    info,
    sourceLayer
  }) {
    info.sourceLayer = sourceLayer;
    info.tile = sourceLayer.props.tile;
    return info;
  }
  renderLayers() {
    const {
      loader,
      id
    } = this.props;
    const {
      dtype
    } = loader;
    const {
      width,
      height,
      data
    } = this.state;
    if (!(width && height))
      return null;
    const bounds = [0, height, width, 0];
    if (isInterleaved(loader.shape)) {
      const {
        photometricInterpretation = 2
      } = loader.meta;
      return new BitmapLayer(this.props, {
        image: this.state,
        photometricInterpretation,
        bounds,
        id: `image-sub-layer-${bounds}-${id}`
      });
    }
    return new XRLayer(this.props, {
      channelData: {
        data,
        height,
        width
      },
      bounds,
      id: `image-sub-layer-${bounds}-${id}`,
      dtype
    });
  }
};
ImageLayer.layerName = "ImageLayer";
ImageLayer.defaultProps = defaultProps$5;
var defaultProps$4 = {
  pickable: {
    type: "boolean",
    value: true,
    compare: true
  },
  onHover: {
    type: "function",
    value: null,
    compare: false
  },
  contrastLimits: {
    type: "array",
    value: [],
    compare: true
  },
  channelsVisible: {
    type: "array",
    value: [],
    compare: true
  },
  domain: {
    type: "array",
    value: [],
    compare: true
  },
  viewportId: {
    type: "string",
    value: "",
    compare: true
  },
  maxRequests: {
    type: "number",
    value: 10,
    compare: true
  },
  onClick: {
    type: "function",
    value: null,
    compare: true
  },
  refinementStrategy: {
    type: "string",
    value: null,
    compare: true
  },
  excludeBackground: {
    type: "boolean",
    value: false,
    compare: true
  },
  extensions: {
    type: "array",
    value: [new ColorPaletteExtension()],
    compare: true
  }
};
var MultiscaleImageLayer = class extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["CompositeLayer"] {
  renderLayers() {
    const {
      loader,
      selections,
      opacity,
      viewportId,
      onTileError,
      onHover,
      id,
      onClick,
      modelMatrix,
      excludeBackground,
      refinementStrategy
    } = this.props;
    const {
      tileSize,
      dtype
    } = loader[0];
    const getTileData = (_0) => __async(this, [_0], function* ({
      x,
      y,
      z,
      signal
    }) {
      if (!selections || selections.length === 0) {
        return null;
      }
      const resolution = Math.round(-z);
      const getTile = (selection) => {
        const config = {
          x,
          y,
          selection,
          signal
        };
        return loader[resolution].getTile(config);
      };
      try {
        const tiles = yield Promise.all(selections.map(getTile));
        const tile = {
          data: tiles.map((d) => d.data),
          width: tiles[0].width,
          height: tiles[0].height
        };
        if (isInterleaved(loader[resolution].shape)) {
          tile.data = tile.data[0];
          if (tile.data.length === tile.width * tile.height * 3) {
            tile.format = _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].RGB;
            tile.dataFormat = _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].RGB;
          }
          return tile;
        }
        return tile;
      } catch (err) {
        if (err === SIGNAL_ABORTED) {
          return null;
        }
        throw err;
      }
    });
    const {
      height,
      width
    } = getImageSize(loader[0]);
    const tiledLayer = new MultiscaleImageLayerBase(this.props, {
      id: `Tiled-Image-${id}`,
      getTileData,
      dtype,
      tileSize,
      zoomOffset: Math.round(Math.log2(modelMatrix ? modelMatrix.getScale()[0] : 1)),
      extent: [0, 0, width, height],
      minZoom: Math.round(-(loader.length - 1)),
      maxZoom: 0,
      refinementStrategy: refinementStrategy || (opacity === 1 ? "best-available" : "no-overlap"),
      updateTriggers: {
        getTileData: [loader, selections]
      },
      onTileError: onTileError || loader[0].onTileError
    });
    const lowestResolution = loader[loader.length - 1];
    const implementsGetRaster = typeof lowestResolution.getRaster === "function";
    const layerModelMatrix = modelMatrix ? modelMatrix.clone() : new math_gl__WEBPACK_IMPORTED_MODULE_23__["Matrix4"]();
    const baseLayer = implementsGetRaster && !excludeBackground && new ImageLayer(this.props, {
      id: `Background-Image-${id}`,
      loader: lowestResolution,
      modelMatrix: layerModelMatrix.scale(__pow(2, loader.length - 1)),
      visible: !viewportId || this.context.viewport.id === viewportId,
      onHover,
      onClick,
      interpolation: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].LINEAR,
      onViewportLoad: null
    });
    const layers = [baseLayer, tiledLayer];
    return layers;
  }
};
MultiscaleImageLayer.layerName = "MultiscaleImageLayer";
MultiscaleImageLayer.defaultProps = defaultProps$4;
var defaultProps$3 = {
  pickable: {
    type: "boolean",
    value: true,
    compare: true
  },
  loader: {
    type: "object",
    value: {
      getRaster: () => __async(void 0, null, function* () {
        return {
          data: [],
          height: 0,
          width: 0
        };
      }),
      getRasterSize: () => ({
        height: 0,
        width: 0
      }),
      dtype: "<u2"
    },
    compare: true
  },
  id: {
    type: "string",
    value: "",
    compare: true
  },
  boundingBox: {
    type: "array",
    value: [[0, 0], [0, 1], [1, 1], [1, 0]],
    compare: true
  },
  boundingBoxColor: {
    type: "array",
    value: [255, 0, 0],
    compare: true
  },
  boundingBoxOutlineWidth: {
    type: "number",
    value: 1,
    compare: true
  },
  viewportOutlineColor: {
    type: "array",
    value: [255, 190, 0],
    compare: true
  },
  viewportOutlineWidth: {
    type: "number",
    value: 2,
    compare: true
  },
  overviewScale: {
    type: "number",
    value: 1,
    compare: true
  },
  zoom: {
    type: "number",
    value: 1,
    compare: true
  }
};
var OverviewLayer = class extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["CompositeLayer"] {
  renderLayers() {
    const {
      loader,
      id,
      zoom,
      boundingBox,
      boundingBoxColor,
      boundingBoxOutlineWidth,
      viewportOutlineColor,
      viewportOutlineWidth,
      overviewScale
    } = this.props;
    const {
      width,
      height
    } = getImageSize(loader[0]);
    const z = loader.length - 1;
    const lowestResolution = loader[z];
    const overview = new ImageLayer(this.props, {
      id: `viewport-${id}`,
      modelMatrix: new math_gl__WEBPACK_IMPORTED_MODULE_23__["Matrix4"]().scale(__pow(2, z) * overviewScale),
      loader: lowestResolution
    });
    const boundingBoxOutline = new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["PolygonLayer"]({
      id: `bounding-box-overview-${id}`,
      coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["COORDINATE_SYSTEM"].CARTESIAN,
      data: [boundingBox],
      getPolygon: (f) => f,
      filled: false,
      stroked: true,
      getLineColor: boundingBoxColor,
      getLineWidth: boundingBoxOutlineWidth * __pow(2, zoom)
    });
    const viewportOutline = new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["PolygonLayer"]({
      id: `viewport-outline-${id}`,
      coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["COORDINATE_SYSTEM"].CARTESIAN,
      data: [[[0, 0], [width * overviewScale, 0], [width * overviewScale, height * overviewScale], [0, height * overviewScale]]],
      getPolygon: (f) => f,
      filled: false,
      stroked: true,
      getLineColor: viewportOutlineColor,
      getLineWidth: viewportOutlineWidth * __pow(2, zoom)
    });
    const layers = [overview, boundingBoxOutline, viewportOutline];
    return layers;
  }
};
OverviewLayer.layerName = "OverviewLayer";
OverviewLayer.defaultProps = defaultProps$3;
function makeBoundingBox(viewState) {
  const viewport = new _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["OrthographicView"]().makeViewport({
    viewState,
    height: viewState.height,
    width: viewState.width
  });
  return [viewport.unproject([0, 0]), viewport.unproject([viewport.width, 0]), viewport.unproject([viewport.width, viewport.height]), viewport.unproject([0, viewport.height])];
}
function getDefaultInitialViewState(loader, viewSize, zoomBackOff = 0, use3d = false, modelMatrix) {
  const source = Array.isArray(loader) ? loader[0] : loader;
  const {
    width,
    height
  } = getImageSize(source);
  const depth = source.shape[source.labels.indexOf("z")];
  const zoom = Math.log2(Math.min(viewSize.width / width, viewSize.height / height)) - zoomBackOff;
  const physicalSizeScalingMatrix = getPhysicalSizeScalingMatrix(source);
  const loaderInitialViewState = {
    target: (modelMatrix || new math_gl__WEBPACK_IMPORTED_MODULE_23__["Matrix4"]()).transformPoint((use3d ? physicalSizeScalingMatrix : new math_gl__WEBPACK_IMPORTED_MODULE_23__["Matrix4"]()).transformPoint([width / 2, height / 2, use3d ? depth / 2 : 0])),
    zoom
  };
  return loaderInitialViewState;
}
function getPosition(boundingBox, position, length) {
  const viewLength = boundingBox[2][0] - boundingBox[0][0];
  switch (position) {
    case "bottom-right": {
      const yCoord = boundingBox[2][1] - (boundingBox[2][1] - boundingBox[0][1]) * length;
      const xLeftCoord = boundingBox[2][0] - viewLength * length;
      return [yCoord, xLeftCoord];
    }
    case "top-right": {
      const yCoord = (boundingBox[2][1] - boundingBox[0][1]) * length;
      const xLeftCoord = boundingBox[2][0] - viewLength * length;
      return [yCoord, xLeftCoord];
    }
    case "top-left": {
      const yCoord = (boundingBox[2][1] - boundingBox[0][1]) * length;
      const xLeftCoord = viewLength * length;
      return [yCoord, xLeftCoord];
    }
    case "bottom-left": {
      const yCoord = boundingBox[2][1] - (boundingBox[2][1] - boundingBox[0][1]) * length;
      const xLeftCoord = viewLength * length;
      return [yCoord, xLeftCoord];
    }
    default: {
      throw new Error(`Position ${position} not found`);
    }
  }
}
var defaultProps$2 = {
  pickable: {
    type: "boolean",
    value: true,
    compare: true
  },
  viewState: {
    type: "object",
    value: {
      zoom: 0,
      target: [0, 0, 0]
    },
    compare: true
  },
  unit: {
    type: "string",
    value: "",
    compare: true
  },
  size: {
    type: "number",
    value: 1,
    compare: true
  },
  position: {
    type: "string",
    value: "bottom-right",
    compare: true
  },
  length: {
    type: "number",
    value: 0.085,
    compare: true
  }
};
var ScaleBarLayer = class extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["CompositeLayer"] {
  renderLayers() {
    const {
      id,
      unit: unit2,
      size,
      position,
      viewState,
      length
    } = this.props;
    const boundingBox = makeBoundingBox(viewState);
    const {
      zoom
    } = viewState;
    const viewLength = boundingBox[2][0] - boundingBox[0][0];
    const barLength = viewLength * 0.05;
    const barHeight = Math.max(__pow(2, -zoom + 1.5), (boundingBox[2][1] - boundingBox[0][1]) * 7e-3);
    const numUnits = barLength * size;
    const [yCoord, xLeftCoord] = getPosition(boundingBox, position, length);
    const lengthBar = new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["LineLayer"]({
      id: `scale-bar-length-${id}`,
      coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["COORDINATE_SYSTEM"].CARTESIAN,
      data: [[[xLeftCoord, yCoord], [xLeftCoord + barLength, yCoord]]],
      getSourcePosition: (d) => d[0],
      getTargetPosition: (d) => d[1],
      getWidth: 2,
      getColor: [220, 220, 220]
    });
    const tickBoundsLeft = new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["LineLayer"]({
      id: `scale-bar-height-left-${id}`,
      coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["COORDINATE_SYSTEM"].CARTESIAN,
      data: [[[xLeftCoord, yCoord - barHeight], [xLeftCoord, yCoord + barHeight]]],
      getSourcePosition: (d) => d[0],
      getTargetPosition: (d) => d[1],
      getWidth: 2,
      getColor: [220, 220, 220]
    });
    const tickBoundsRight = new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["LineLayer"]({
      id: `scale-bar-height-right-${id}`,
      coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["COORDINATE_SYSTEM"].CARTESIAN,
      data: [[[xLeftCoord + barLength, yCoord - barHeight], [xLeftCoord + barLength, yCoord + barHeight]]],
      getSourcePosition: (d) => d[0],
      getTargetPosition: (d) => d[1],
      getWidth: 2,
      getColor: [220, 220, 220]
    });
    const textLayer = new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["TextLayer"]({
      id: `units-label-layer-${id}`,
      coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["COORDINATE_SYSTEM"].CARTESIAN,
      data: [{
        text: String(numUnits).slice(0, 5).replace(/\.$/, "") + unit2,
        position: [xLeftCoord + barLength * 0.5, yCoord + barHeight * 4]
      }],
      getColor: [220, 220, 220, 255],
      getSize: 12,
      fontFamily: DEFAULT_FONT_FAMILY,
      sizeUnits: "meters",
      sizeScale: __pow(2, -zoom),
      characterSet: [...unit2.split(""), ...range(10).map((i) => String(i)), "."]
    });
    return [lengthBar, tickBoundsLeft, tickBoundsRight, textLayer];
  }
};
ScaleBarLayer.layerName = "ScaleBarLayer";
ScaleBarLayer.defaultProps = defaultProps$2;
var vs = '#version 300 es\n#define GLSLIFY 1\n#define SHADER_NAME xr-layer-vertex-shader\nin vec3 positions;uniform vec3 eye_pos;uniform mat4 proj;uniform mat4 model;uniform mat4 view;uniform mat4 scale;uniform mat4 resolution;out vec3 vray_dir;flat out vec3 transformed_eye;void main(){gl_Position=proj*view*model*scale*resolution*vec4(positions,1.);/*This first diagram is a skewed volume(i.e a "shear" model matrix applied)top down with the eye marked as #,all in world space^___|__\\|\\\\|\\|____|||\n#\nThis next diagram shows the volume after the inverse model matrix has placed it back in model coordinates,but the eye still in world space.^___|___|||||||__|__||||\n#\nFinally,we apply the inverse model matrix transformation to the eye as well to bring it too into world space.Notice that the ray here matches the "voxels" through which the first ray also passes,as desired.^____/__|/||/||/____|///\n#\n*/transformed_eye=(inverse(resolution)*inverse(scale)*inverse(model)*(vec4(eye_pos,1.))).xyz;vray_dir=positions-transformed_eye;}';
var fs$1 = "#version 300 es\nprecision highp int;precision highp float;precision highp SAMPLER_TYPE;\n#define GLSLIFY 1\nuniform highp SAMPLER_TYPE volume0;uniform highp SAMPLER_TYPE volume1;uniform highp SAMPLER_TYPE volume2;uniform highp SAMPLER_TYPE volume3;uniform highp SAMPLER_TYPE volume4;uniform highp SAMPLER_TYPE volume5;uniform vec3 scaledDimensions;uniform mat4 scale;uniform vec3 normals[NUM_PLANES];uniform float distances[NUM_PLANES];uniform vec3 colors[6];uniform vec2 xSlice;uniform vec2 ySlice;uniform vec2 zSlice;uniform vec2 contrastLimits[6];in vec3 vray_dir;flat in vec3 transformed_eye;out vec4 color;vec2 intersect_box(vec3 orig,vec3 dir){vec3 box_min=vec3(xSlice[0],ySlice[0],zSlice[0]);vec3 box_max=vec3(xSlice[1],ySlice[1],zSlice[1]);vec3 inv_dir=1./dir;vec3 tmin_tmp=(box_min-orig)*inv_dir;vec3 tmax_tmp=(box_max-orig)*inv_dir;vec3 tmin=min(tmin_tmp,tmax_tmp);vec3 tmax=max(tmin_tmp,tmax_tmp);float t0=max(tmin.x,max(tmin.y,tmin.z));float t1=min(tmax.x,min(tmax.y,tmax.z));vec2 val=vec2(t0,t1);return val;}float linear_to_srgb(float x){if(x<=0.0031308f){return 12.92f*x;}return 1.055f*pow(x,1.f/2.4f)-0.055f;}float wang_hash(int seed){seed=(seed ^ 61)^(seed>>16);seed*=9;seed=seed ^(seed>>4);seed*=0x27d4eb2d;seed=seed ^(seed>>15);return float(seed % 2147483647)/float(2147483647);}void main(void){vec3 ray_dir=normalize(vray_dir);vec2 t_hit=intersect_box(transformed_eye,ray_dir);if(t_hit.x>t_hit.y){discard;}t_hit.x=max(t_hit.x,0.);vec3 dt_vec=1./(scale*vec4(abs(ray_dir),1.)).xyz;float dt=1.*min(dt_vec.x,min(dt_vec.y,dt_vec.z));float offset=wang_hash(int(gl_FragCoord.x+640.*gl_FragCoord.y));vec3 p=transformed_eye+(t_hit.x+offset*dt)*ray_dir;_BEFORE_RENDERfor(float t=t_hit.x;t<t_hit.y;t+=dt){float canShow=1.;for(int i=0;i<NUM_PLANES;i+=1){canShow*=max(0.,sign(dot(normals[i],p)+distances[i]));}float canShowXCoordinate=max(p.x-0.,0.)*max(1.-p.x,0.);float canShowYCoordinate=max(p.y-0.,0.)*max(1.-p.y,0.);float canShowZCoordinate=max(p.z-0.,0.)*max(1.-p.z,0.);float canShowCoordinate=float(ceil(canShowXCoordinate*canShowYCoordinate*canShowZCoordinate));canShow=canShowCoordinate*canShow;float intensityValue0=float(texture(volume0,p).r);DECKGL_PROCESS_INTENSITY(intensityValue0,contrastLimits[0],0);intensityValue0=canShow*intensityValue0;float intensityValue1=float(texture(volume1,p).r);DECKGL_PROCESS_INTENSITY(intensityValue1,contrastLimits[1],1);intensityValue1=canShow*intensityValue1;float intensityValue2=float(texture(volume2,p).r);DECKGL_PROCESS_INTENSITY(intensityValue2,contrastLimits[2],2);intensityValue2=canShow*intensityValue2;float intensityValue3=float(texture(volume3,p).r);DECKGL_PROCESS_INTENSITY(intensityValue3,contrastLimits[3],3);intensityValue3=canShow*intensityValue3;float intensityValue4=float(texture(volume4,p).r);DECKGL_PROCESS_INTENSITY(intensityValue4,contrastLimits[4],4);intensityValue4=canShow*intensityValue4;float intensityValue5=float(texture(volume5,p).r);DECKGL_PROCESS_INTENSITY(intensityValue5,contrastLimits[5],5);intensityValue5=canShow*intensityValue5;_RENDERp+=ray_dir*dt;}_AFTER_RENDERcolor.r=linear_to_srgb(color.r);color.g=linear_to_srgb(color.g);color.b=linear_to_srgb(color.b);}";
var fs = "#define GLSLIFY 1\nvec4 jet(float x_17){const float e0=0.0;const vec4 v0=vec4(0,0,0.5137254901960784,1);const float e1=0.125;const vec4 v1=vec4(0,0.23529411764705882,0.6666666666666666,1);const float e2=0.375;const vec4 v2=vec4(0.0196078431372549,1,1,1);const float e3=0.625;const vec4 v3=vec4(1,1,0,1);const float e4=0.875;const vec4 v4=vec4(0.9803921568627451,0,0,1);const float e5=1.0;const vec4 v5=vec4(0.5019607843137255,0,0,1);float a0=smoothstep(e0,e1,x_17);float a1=smoothstep(e1,e2,x_17);float a2=smoothstep(e2,e3,x_17);float a3=smoothstep(e3,e4,x_17);float a4=smoothstep(e4,e5,x_17);return max(mix(v0,v1,a0)*step(e0,x_17)*step(x_17,e1),max(mix(v1,v2,a1)*step(e1,x_17)*step(x_17,e2),max(mix(v2,v3,a2)*step(e2,x_17)*step(x_17,e3),max(mix(v3,v4,a3)*step(e3,x_17)*step(x_17,e4),mix(v4,v5,a4)*step(e4,x_17)*step(x_17,e5)))));}vec4 hsv(float x_18){const float e0=0.0;const vec4 v0=vec4(1,0,0,1);const float e1=0.169;const vec4 v1=vec4(0.9921568627450981,1,0.00784313725490196,1);const float e2=0.173;const vec4 v2=vec4(0.9686274509803922,1,0.00784313725490196,1);const float e3=0.337;const vec4 v3=vec4(0,0.9882352941176471,0.01568627450980392,1);const float e4=0.341;const vec4 v4=vec4(0,0.9882352941176471,0.0392156862745098,1);const float e5=0.506;const vec4 v5=vec4(0.00392156862745098,0.9764705882352941,1,1);const float e6=0.671;const vec4 v6=vec4(0.00784313725490196,0,0.9921568627450981,1);const float e7=0.675;const vec4 v7=vec4(0.03137254901960784,0,0.9921568627450981,1);const float e8=0.839;const vec4 v8=vec4(1,0,0.984313725490196,1);const float e9=0.843;const vec4 v9=vec4(1,0,0.9607843137254902,1);const float e10=1.0;const vec4 v10=vec4(1,0,0.023529411764705882,1);float a0=smoothstep(e0,e1,x_18);float a1=smoothstep(e1,e2,x_18);float a2=smoothstep(e2,e3,x_18);float a3=smoothstep(e3,e4,x_18);float a4=smoothstep(e4,e5,x_18);float a5=smoothstep(e5,e6,x_18);float a6=smoothstep(e6,e7,x_18);float a7=smoothstep(e7,e8,x_18);float a8=smoothstep(e8,e9,x_18);float a9=smoothstep(e9,e10,x_18);return max(mix(v0,v1,a0)*step(e0,x_18)*step(x_18,e1),max(mix(v1,v2,a1)*step(e1,x_18)*step(x_18,e2),max(mix(v2,v3,a2)*step(e2,x_18)*step(x_18,e3),max(mix(v3,v4,a3)*step(e3,x_18)*step(x_18,e4),max(mix(v4,v5,a4)*step(e4,x_18)*step(x_18,e5),max(mix(v5,v6,a5)*step(e5,x_18)*step(x_18,e6),max(mix(v6,v7,a6)*step(e6,x_18)*step(x_18,e7),max(mix(v7,v8,a7)*step(e7,x_18)*step(x_18,e8),max(mix(v8,v9,a8)*step(e8,x_18)*step(x_18,e9),mix(v9,v10,a9)*step(e9,x_18)*step(x_18,e10))))))))));}vec4 hot(float x_13){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.3;const vec4 v1=vec4(0.9019607843137255,0,0,1);const float e2=0.6;const vec4 v2=vec4(1,0.8235294117647058,0,1);const float e3=1.0;const vec4 v3=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_13);float a1=smoothstep(e1,e2,x_13);float a2=smoothstep(e2,e3,x_13);return max(mix(v0,v1,a0)*step(e0,x_13)*step(x_13,e1),max(mix(v1,v2,a1)*step(e1,x_13)*step(x_13,e2),mix(v2,v3,a2)*step(e2,x_13)*step(x_13,e3)));}vec4 cool(float x_24){const float e0=0.0;const vec4 v0=vec4(0.49019607843137253,0,0.7019607843137254,1);const float e1=0.13;const vec4 v1=vec4(0.4549019607843137,0,0.8549019607843137,1);const float e2=0.25;const vec4 v2=vec4(0.3843137254901961,0.2901960784313726,0.9294117647058824,1);const float e3=0.38;const vec4 v3=vec4(0.26666666666666666,0.5725490196078431,0.9058823529411765,1);const float e4=0.5;const vec4 v4=vec4(0,0.8,0.7725490196078432,1);const float e5=0.63;const vec4 v5=vec4(0,0.9686274509803922,0.5725490196078431,1);const float e6=0.75;const vec4 v6=vec4(0,1,0.34509803921568627,1);const float e7=0.88;const vec4 v7=vec4(0.1568627450980392,1,0.03137254901960784,1);const float e8=1.0;const vec4 v8=vec4(0.5764705882352941,1,0,1);float a0=smoothstep(e0,e1,x_24);float a1=smoothstep(e1,e2,x_24);float a2=smoothstep(e2,e3,x_24);float a3=smoothstep(e3,e4,x_24);float a4=smoothstep(e4,e5,x_24);float a5=smoothstep(e5,e6,x_24);float a6=smoothstep(e6,e7,x_24);float a7=smoothstep(e7,e8,x_24);return max(mix(v0,v1,a0)*step(e0,x_24)*step(x_24,e1),max(mix(v1,v2,a1)*step(e1,x_24)*step(x_24,e2),max(mix(v2,v3,a2)*step(e2,x_24)*step(x_24,e3),max(mix(v3,v4,a3)*step(e3,x_24)*step(x_24,e4),max(mix(v4,v5,a4)*step(e4,x_24)*step(x_24,e5),max(mix(v5,v6,a5)*step(e5,x_24)*step(x_24,e6),max(mix(v6,v7,a6)*step(e6,x_24)*step(x_24,e7),mix(v7,v8,a7)*step(e7,x_24)*step(x_24,e8))))))));}vec4 spring(float x_5){const float e0=0.0;const vec4 v0=vec4(1,0,1,1);const float e1=1.0;const vec4 v1=vec4(1,1,0,1);float a0=smoothstep(e0,e1,x_5);return mix(v0,v1,a0)*step(e0,x_5)*step(x_5,e1);}vec4 summer(float x_12){const float e0=0.0;const vec4 v0=vec4(0,0.5019607843137255,0.4,1);const float e1=1.0;const vec4 v1=vec4(1,1,0.4,1);float a0=smoothstep(e0,e1,x_12);return mix(v0,v1,a0)*step(e0,x_12)*step(x_12,e1);}vec4 autumn(float x_25){const float e0=0.0;const vec4 v0=vec4(1,0,0,1);const float e1=1.0;const vec4 v1=vec4(1,1,0,1);float a0=smoothstep(e0,e1,x_25);return mix(v0,v1,a0)*step(e0,x_25)*step(x_25,e1);}vec4 winter(float x_16){const float e0=0.0;const vec4 v0=vec4(0,0,1,1);const float e1=1.0;const vec4 v1=vec4(0,1,0.5019607843137255,1);float a0=smoothstep(e0,e1,x_16);return mix(v0,v1,a0)*step(e0,x_16)*step(x_16,e1);}vec4 bone(float x_15){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.376;const vec4 v1=vec4(0.32941176470588235,0.32941176470588235,0.4549019607843137,1);const float e2=0.753;const vec4 v2=vec4(0.6627450980392157,0.7843137254901961,0.7843137254901961,1);const float e3=1.0;const vec4 v3=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_15);float a1=smoothstep(e1,e2,x_15);float a2=smoothstep(e2,e3,x_15);return max(mix(v0,v1,a0)*step(e0,x_15)*step(x_15,e1),max(mix(v1,v2,a1)*step(e1,x_15)*step(x_15,e2),mix(v2,v3,a2)*step(e2,x_15)*step(x_15,e3)));}vec4 copper(float x_10){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.804;const vec4 v1=vec4(1,0.6274509803921569,0.4,1);const float e2=1.0;const vec4 v2=vec4(1,0.7803921568627451,0.4980392156862745,1);float a0=smoothstep(e0,e1,x_10);float a1=smoothstep(e1,e2,x_10);return max(mix(v0,v1,a0)*step(e0,x_10)*step(x_10,e1),mix(v1,v2,a1)*step(e1,x_10)*step(x_10,e2));}vec4 greys(float x_4){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=1.0;const vec4 v1=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_4);return mix(v0,v1,a0)*step(e0,x_4)*step(x_4,e1);}vec4 yignbu(float x_32){const float e0=0.0;const vec4 v0=vec4(0.03137254901960784,0.11372549019607843,0.34509803921568627,1);const float e1=0.125;const vec4 v1=vec4(0.1450980392156863,0.20392156862745098,0.5803921568627451,1);const float e2=0.25;const vec4 v2=vec4(0.13333333333333333,0.3686274509803922,0.6588235294117647,1);const float e3=0.375;const vec4 v3=vec4(0.11372549019607843,0.5686274509803921,0.7529411764705882,1);const float e4=0.5;const vec4 v4=vec4(0.2549019607843137,0.7137254901960784,0.7686274509803922,1);const float e5=0.625;const vec4 v5=vec4(0.4980392156862745,0.803921568627451,0.7333333333333333,1);const float e6=0.75;const vec4 v6=vec4(0.7803921568627451,0.9137254901960784,0.7058823529411765,1);const float e7=0.875;const vec4 v7=vec4(0.9294117647058824,0.9725490196078431,0.8509803921568627,1);const float e8=1.0;const vec4 v8=vec4(1,1,0.8509803921568627,1);float a0=smoothstep(e0,e1,x_32);float a1=smoothstep(e1,e2,x_32);float a2=smoothstep(e2,e3,x_32);float a3=smoothstep(e3,e4,x_32);float a4=smoothstep(e4,e5,x_32);float a5=smoothstep(e5,e6,x_32);float a6=smoothstep(e6,e7,x_32);float a7=smoothstep(e7,e8,x_32);return max(mix(v0,v1,a0)*step(e0,x_32)*step(x_32,e1),max(mix(v1,v2,a1)*step(e1,x_32)*step(x_32,e2),max(mix(v2,v3,a2)*step(e2,x_32)*step(x_32,e3),max(mix(v3,v4,a3)*step(e3,x_32)*step(x_32,e4),max(mix(v4,v5,a4)*step(e4,x_32)*step(x_32,e5),max(mix(v5,v6,a5)*step(e5,x_32)*step(x_32,e6),max(mix(v6,v7,a6)*step(e6,x_32)*step(x_32,e7),mix(v7,v8,a7)*step(e7,x_32)*step(x_32,e8))))))));}vec4 greens(float x_34){const float e0=0.0;const vec4 v0=vec4(0,0.26666666666666666,0.10588235294117647,1);const float e1=0.125;const vec4 v1=vec4(0,0.42745098039215684,0.17254901960784313,1);const float e2=0.25;const vec4 v2=vec4(0.13725490196078433,0.5450980392156862,0.27058823529411763,1);const float e3=0.375;const vec4 v3=vec4(0.2549019607843137,0.6705882352941176,0.36470588235294116,1);const float e4=0.5;const vec4 v4=vec4(0.4549019607843137,0.7686274509803922,0.4627450980392157,1);const float e5=0.625;const vec4 v5=vec4(0.6313725490196078,0.8509803921568627,0.6078431372549019,1);const float e6=0.75;const vec4 v6=vec4(0.7803921568627451,0.9137254901960784,0.7529411764705882,1);const float e7=0.875;const vec4 v7=vec4(0.8980392156862745,0.9607843137254902,0.8784313725490196,1);const float e8=1.0;const vec4 v8=vec4(0.9686274509803922,0.9882352941176471,0.9607843137254902,1);float a0=smoothstep(e0,e1,x_34);float a1=smoothstep(e1,e2,x_34);float a2=smoothstep(e2,e3,x_34);float a3=smoothstep(e3,e4,x_34);float a4=smoothstep(e4,e5,x_34);float a5=smoothstep(e5,e6,x_34);float a6=smoothstep(e6,e7,x_34);float a7=smoothstep(e7,e8,x_34);return max(mix(v0,v1,a0)*step(e0,x_34)*step(x_34,e1),max(mix(v1,v2,a1)*step(e1,x_34)*step(x_34,e2),max(mix(v2,v3,a2)*step(e2,x_34)*step(x_34,e3),max(mix(v3,v4,a3)*step(e3,x_34)*step(x_34,e4),max(mix(v4,v5,a4)*step(e4,x_34)*step(x_34,e5),max(mix(v5,v6,a5)*step(e5,x_34)*step(x_34,e6),max(mix(v6,v7,a6)*step(e6,x_34)*step(x_34,e7),mix(v7,v8,a7)*step(e7,x_34)*step(x_34,e8))))))));}vec4 yiorrd(float x_41){const float e0=0.0;const vec4 v0=vec4(0.5019607843137255,0,0.14901960784313725,1);const float e1=0.125;const vec4 v1=vec4(0.7411764705882353,0,0.14901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.8901960784313725,0.10196078431372549,0.10980392156862745,1);const float e3=0.375;const vec4 v3=vec4(0.9882352941176471,0.3058823529411765,0.16470588235294117,1);const float e4=0.5;const vec4 v4=vec4(0.9921568627450981,0.5529411764705883,0.23529411764705882,1);const float e5=0.625;const vec4 v5=vec4(0.996078431372549,0.6980392156862745,0.2980392156862745,1);const float e6=0.75;const vec4 v6=vec4(0.996078431372549,0.8509803921568627,0.4627450980392157,1);const float e7=0.875;const vec4 v7=vec4(1,0.9294117647058824,0.6274509803921569,1);const float e8=1.0;const vec4 v8=vec4(1,1,0.8,1);float a0=smoothstep(e0,e1,x_41);float a1=smoothstep(e1,e2,x_41);float a2=smoothstep(e2,e3,x_41);float a3=smoothstep(e3,e4,x_41);float a4=smoothstep(e4,e5,x_41);float a5=smoothstep(e5,e6,x_41);float a6=smoothstep(e6,e7,x_41);float a7=smoothstep(e7,e8,x_41);return max(mix(v0,v1,a0)*step(e0,x_41)*step(x_41,e1),max(mix(v1,v2,a1)*step(e1,x_41)*step(x_41,e2),max(mix(v2,v3,a2)*step(e2,x_41)*step(x_41,e3),max(mix(v3,v4,a3)*step(e3,x_41)*step(x_41,e4),max(mix(v4,v5,a4)*step(e4,x_41)*step(x_41,e5),max(mix(v5,v6,a5)*step(e5,x_41)*step(x_41,e6),max(mix(v6,v7,a6)*step(e6,x_41)*step(x_41,e7),mix(v7,v8,a7)*step(e7,x_41)*step(x_41,e8))))))));}vec4 bluered(float x_23){const float e0=0.0;const vec4 v0=vec4(0,0,1,1);const float e1=1.0;const vec4 v1=vec4(1,0,0,1);float a0=smoothstep(e0,e1,x_23);return mix(v0,v1,a0)*step(e0,x_23)*step(x_23,e1);}vec4 rdbu(float x_1){const float e0=0.0;const vec4 v0=vec4(0.0196078431372549,0.0392156862745098,0.6745098039215687,1);const float e1=0.35;const vec4 v1=vec4(0.41568627450980394,0.5372549019607843,0.9686274509803922,1);const float e2=0.5;const vec4 v2=vec4(0.7450980392156863,0.7450980392156863,0.7450980392156863,1);const float e3=0.6;const vec4 v3=vec4(0.8627450980392157,0.6666666666666666,0.5176470588235295,1);const float e4=0.7;const vec4 v4=vec4(0.9019607843137255,0.5686274509803921,0.35294117647058826,1);const float e5=1.0;const vec4 v5=vec4(0.6980392156862745,0.0392156862745098,0.10980392156862745,1);float a0=smoothstep(e0,e1,x_1);float a1=smoothstep(e1,e2,x_1);float a2=smoothstep(e2,e3,x_1);float a3=smoothstep(e3,e4,x_1);float a4=smoothstep(e4,e5,x_1);return max(mix(v0,v1,a0)*step(e0,x_1)*step(x_1,e1),max(mix(v1,v2,a1)*step(e1,x_1)*step(x_1,e2),max(mix(v2,v3,a2)*step(e2,x_1)*step(x_1,e3),max(mix(v3,v4,a3)*step(e3,x_1)*step(x_1,e4),mix(v4,v5,a4)*step(e4,x_1)*step(x_1,e5)))));}vec4 picnic(float x_42){const float e0=0.0;const vec4 v0=vec4(0,0,1,1);const float e1=0.1;const vec4 v1=vec4(0.2,0.6,1,1);const float e2=0.2;const vec4 v2=vec4(0.4,0.8,1,1);const float e3=0.3;const vec4 v3=vec4(0.6,0.8,1,1);const float e4=0.4;const vec4 v4=vec4(0.8,0.8,1,1);const float e5=0.5;const vec4 v5=vec4(1,1,1,1);const float e6=0.6;const vec4 v6=vec4(1,0.8,1,1);const float e7=0.7;const vec4 v7=vec4(1,0.6,1,1);const float e8=0.8;const vec4 v8=vec4(1,0.4,0.8,1);const float e9=0.9;const vec4 v9=vec4(1,0.4,0.4,1);const float e10=1.0;const vec4 v10=vec4(1,0,0,1);float a0=smoothstep(e0,e1,x_42);float a1=smoothstep(e1,e2,x_42);float a2=smoothstep(e2,e3,x_42);float a3=smoothstep(e3,e4,x_42);float a4=smoothstep(e4,e5,x_42);float a5=smoothstep(e5,e6,x_42);float a6=smoothstep(e6,e7,x_42);float a7=smoothstep(e7,e8,x_42);float a8=smoothstep(e8,e9,x_42);float a9=smoothstep(e9,e10,x_42);return max(mix(v0,v1,a0)*step(e0,x_42)*step(x_42,e1),max(mix(v1,v2,a1)*step(e1,x_42)*step(x_42,e2),max(mix(v2,v3,a2)*step(e2,x_42)*step(x_42,e3),max(mix(v3,v4,a3)*step(e3,x_42)*step(x_42,e4),max(mix(v4,v5,a4)*step(e4,x_42)*step(x_42,e5),max(mix(v5,v6,a5)*step(e5,x_42)*step(x_42,e6),max(mix(v6,v7,a6)*step(e6,x_42)*step(x_42,e7),max(mix(v7,v8,a7)*step(e7,x_42)*step(x_42,e8),max(mix(v8,v9,a8)*step(e8,x_42)*step(x_42,e9),mix(v9,v10,a9)*step(e9,x_42)*step(x_42,e10))))))))));}vec4 rainbow(float x_31){const float e0=0.0;const vec4 v0=vec4(0.5882352941176471,0,0.35294117647058826,1);const float e1=0.125;const vec4 v1=vec4(0,0,0.7843137254901961,1);const float e2=0.25;const vec4 v2=vec4(0,0.09803921568627451,1,1);const float e3=0.375;const vec4 v3=vec4(0,0.596078431372549,1,1);const float e4=0.5;const vec4 v4=vec4(0.17254901960784313,1,0.5882352941176471,1);const float e5=0.625;const vec4 v5=vec4(0.592156862745098,1,0,1);const float e6=0.75;const vec4 v6=vec4(1,0.9176470588235294,0,1);const float e7=0.875;const vec4 v7=vec4(1,0.43529411764705883,0,1);const float e8=1.0;const vec4 v8=vec4(1,0,0,1);float a0=smoothstep(e0,e1,x_31);float a1=smoothstep(e1,e2,x_31);float a2=smoothstep(e2,e3,x_31);float a3=smoothstep(e3,e4,x_31);float a4=smoothstep(e4,e5,x_31);float a5=smoothstep(e5,e6,x_31);float a6=smoothstep(e6,e7,x_31);float a7=smoothstep(e7,e8,x_31);return max(mix(v0,v1,a0)*step(e0,x_31)*step(x_31,e1),max(mix(v1,v2,a1)*step(e1,x_31)*step(x_31,e2),max(mix(v2,v3,a2)*step(e2,x_31)*step(x_31,e3),max(mix(v3,v4,a3)*step(e3,x_31)*step(x_31,e4),max(mix(v4,v5,a4)*step(e4,x_31)*step(x_31,e5),max(mix(v5,v6,a5)*step(e5,x_31)*step(x_31,e6),max(mix(v6,v7,a6)*step(e6,x_31)*step(x_31,e7),mix(v7,v8,a7)*step(e7,x_31)*step(x_31,e8))))))));}vec4 portland(float x_21){const float e0=0.0;const vec4 v0=vec4(0.047058823529411764,0.2,0.5137254901960784,1);const float e1=0.25;const vec4 v1=vec4(0.0392156862745098,0.5333333333333333,0.7294117647058823,1);const float e2=0.5;const vec4 v2=vec4(0.9490196078431372,0.8274509803921568,0.2196078431372549,1);const float e3=0.75;const vec4 v3=vec4(0.9490196078431372,0.5607843137254902,0.2196078431372549,1);const float e4=1.0;const vec4 v4=vec4(0.8509803921568627,0.11764705882352941,0.11764705882352941,1);float a0=smoothstep(e0,e1,x_21);float a1=smoothstep(e1,e2,x_21);float a2=smoothstep(e2,e3,x_21);float a3=smoothstep(e3,e4,x_21);return max(mix(v0,v1,a0)*step(e0,x_21)*step(x_21,e1),max(mix(v1,v2,a1)*step(e1,x_21)*step(x_21,e2),max(mix(v2,v3,a2)*step(e2,x_21)*step(x_21,e3),mix(v3,v4,a3)*step(e3,x_21)*step(x_21,e4))));}vec4 blackbody(float x_38){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.2;const vec4 v1=vec4(0.9019607843137255,0,0,1);const float e2=0.4;const vec4 v2=vec4(0.9019607843137255,0.8235294117647058,0,1);const float e3=0.7;const vec4 v3=vec4(1,1,1,1);const float e4=1.0;const vec4 v4=vec4(0.6274509803921569,0.7843137254901961,1,1);float a0=smoothstep(e0,e1,x_38);float a1=smoothstep(e1,e2,x_38);float a2=smoothstep(e2,e3,x_38);float a3=smoothstep(e3,e4,x_38);return max(mix(v0,v1,a0)*step(e0,x_38)*step(x_38,e1),max(mix(v1,v2,a1)*step(e1,x_38)*step(x_38,e2),max(mix(v2,v3,a2)*step(e2,x_38)*step(x_38,e3),mix(v3,v4,a3)*step(e3,x_38)*step(x_38,e4))));}vec4 earth(float x_29){const float e0=0.0;const vec4 v0=vec4(0,0,0.5098039215686274,1);const float e1=0.1;const vec4 v1=vec4(0,0.7058823529411765,0.7058823529411765,1);const float e2=0.2;const vec4 v2=vec4(0.1568627450980392,0.8235294117647058,0.1568627450980392,1);const float e3=0.4;const vec4 v3=vec4(0.9019607843137255,0.9019607843137255,0.19607843137254902,1);const float e4=0.6;const vec4 v4=vec4(0.47058823529411764,0.27450980392156865,0.0784313725490196,1);const float e5=1.0;const vec4 v5=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_29);float a1=smoothstep(e1,e2,x_29);float a2=smoothstep(e2,e3,x_29);float a3=smoothstep(e3,e4,x_29);float a4=smoothstep(e4,e5,x_29);return max(mix(v0,v1,a0)*step(e0,x_29)*step(x_29,e1),max(mix(v1,v2,a1)*step(e1,x_29)*step(x_29,e2),max(mix(v2,v3,a2)*step(e2,x_29)*step(x_29,e3),max(mix(v3,v4,a3)*step(e3,x_29)*step(x_29,e4),mix(v4,v5,a4)*step(e4,x_29)*step(x_29,e5)))));}vec4 electric(float x_9){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.15;const vec4 v1=vec4(0.11764705882352941,0,0.39215686274509803,1);const float e2=0.4;const vec4 v2=vec4(0.47058823529411764,0,0.39215686274509803,1);const float e3=0.6;const vec4 v3=vec4(0.6274509803921569,0.35294117647058826,0,1);const float e4=0.8;const vec4 v4=vec4(0.9019607843137255,0.7843137254901961,0,1);const float e5=1.0;const vec4 v5=vec4(1,0.9803921568627451,0.8627450980392157,1);float a0=smoothstep(e0,e1,x_9);float a1=smoothstep(e1,e2,x_9);float a2=smoothstep(e2,e3,x_9);float a3=smoothstep(e3,e4,x_9);float a4=smoothstep(e4,e5,x_9);return max(mix(v0,v1,a0)*step(e0,x_9)*step(x_9,e1),max(mix(v1,v2,a1)*step(e1,x_9)*step(x_9,e2),max(mix(v2,v3,a2)*step(e2,x_9)*step(x_9,e3),max(mix(v3,v4,a3)*step(e3,x_9)*step(x_9,e4),mix(v4,v5,a4)*step(e4,x_9)*step(x_9,e5)))));}vec4 alpha(float x_0){const float e0=0.0;const vec4 v0=vec4(1,1,1,0);const float e1=1.0;const vec4 v1=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_0);return mix(v0,v1,a0)*step(e0,x_0)*step(x_0,e1);}vec4 viridis(float x_22){const float e0=0.0;const vec4 v0=vec4(0.26666666666666666,0.00392156862745098,0.32941176470588235,1);const float e1=0.13;const vec4 v1=vec4(0.2784313725490196,0.17254901960784313,0.47843137254901963,1);const float e2=0.25;const vec4 v2=vec4(0.23137254901960785,0.3176470588235294,0.5450980392156862,1);const float e3=0.38;const vec4 v3=vec4(0.17254901960784313,0.44313725490196076,0.5568627450980392,1);const float e4=0.5;const vec4 v4=vec4(0.12941176470588237,0.5647058823529412,0.5529411764705883,1);const float e5=0.63;const vec4 v5=vec4(0.15294117647058825,0.6784313725490196,0.5058823529411764,1);const float e6=0.75;const vec4 v6=vec4(0.3607843137254902,0.7843137254901961,0.38823529411764707,1);const float e7=0.88;const vec4 v7=vec4(0.6666666666666666,0.8627450980392157,0.19607843137254902,1);const float e8=1.0;const vec4 v8=vec4(0.9921568627450981,0.9058823529411765,0.1450980392156863,1);float a0=smoothstep(e0,e1,x_22);float a1=smoothstep(e1,e2,x_22);float a2=smoothstep(e2,e3,x_22);float a3=smoothstep(e3,e4,x_22);float a4=smoothstep(e4,e5,x_22);float a5=smoothstep(e5,e6,x_22);float a6=smoothstep(e6,e7,x_22);float a7=smoothstep(e7,e8,x_22);return max(mix(v0,v1,a0)*step(e0,x_22)*step(x_22,e1),max(mix(v1,v2,a1)*step(e1,x_22)*step(x_22,e2),max(mix(v2,v3,a2)*step(e2,x_22)*step(x_22,e3),max(mix(v3,v4,a3)*step(e3,x_22)*step(x_22,e4),max(mix(v4,v5,a4)*step(e4,x_22)*step(x_22,e5),max(mix(v5,v6,a5)*step(e5,x_22)*step(x_22,e6),max(mix(v6,v7,a6)*step(e6,x_22)*step(x_22,e7),mix(v7,v8,a7)*step(e7,x_22)*step(x_22,e8))))))));}vec4 inferno(float x_30){const float e0=0.0;const vec4 v0=vec4(0,0,0.01568627450980392,1);const float e1=0.13;const vec4 v1=vec4(0.12156862745098039,0.047058823529411764,0.2823529411764706,1);const float e2=0.25;const vec4 v2=vec4(0.3333333333333333,0.058823529411764705,0.42745098039215684,1);const float e3=0.38;const vec4 v3=vec4(0.5333333333333333,0.13333333333333333,0.41568627450980394,1);const float e4=0.5;const vec4 v4=vec4(0.7294117647058823,0.21176470588235294,0.3333333333333333,1);const float e5=0.63;const vec4 v5=vec4(0.8901960784313725,0.34901960784313724,0.2,1);const float e6=0.75;const vec4 v6=vec4(0.9764705882352941,0.5490196078431373,0.0392156862745098,1);const float e7=0.88;const vec4 v7=vec4(0.9764705882352941,0.788235294117647,0.19607843137254902,1);const float e8=1.0;const vec4 v8=vec4(0.9882352941176471,1,0.6431372549019608,1);float a0=smoothstep(e0,e1,x_30);float a1=smoothstep(e1,e2,x_30);float a2=smoothstep(e2,e3,x_30);float a3=smoothstep(e3,e4,x_30);float a4=smoothstep(e4,e5,x_30);float a5=smoothstep(e5,e6,x_30);float a6=smoothstep(e6,e7,x_30);float a7=smoothstep(e7,e8,x_30);return max(mix(v0,v1,a0)*step(e0,x_30)*step(x_30,e1),max(mix(v1,v2,a1)*step(e1,x_30)*step(x_30,e2),max(mix(v2,v3,a2)*step(e2,x_30)*step(x_30,e3),max(mix(v3,v4,a3)*step(e3,x_30)*step(x_30,e4),max(mix(v4,v5,a4)*step(e4,x_30)*step(x_30,e5),max(mix(v5,v6,a5)*step(e5,x_30)*step(x_30,e6),max(mix(v6,v7,a6)*step(e6,x_30)*step(x_30,e7),mix(v7,v8,a7)*step(e7,x_30)*step(x_30,e8))))))));}vec4 magma(float x_33){const float e0=0.0;const vec4 v0=vec4(0,0,0.01568627450980392,1);const float e1=0.13;const vec4 v1=vec4(0.10980392156862745,0.06274509803921569,0.26666666666666666,1);const float e2=0.25;const vec4 v2=vec4(0.30980392156862746,0.07058823529411765,0.4823529411764706,1);const float e3=0.38;const vec4 v3=vec4(0.5058823529411764,0.1450980392156863,0.5058823529411764,1);const float e4=0.5;const vec4 v4=vec4(0.7098039215686275,0.21176470588235294,0.47843137254901963,1);const float e5=0.63;const vec4 v5=vec4(0.8980392156862745,0.3137254901960784,0.39215686274509803,1);const float e6=0.75;const vec4 v6=vec4(0.984313725490196,0.5294117647058824,0.3803921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.996078431372549,0.7607843137254902,0.5294117647058824,1);const float e8=1.0;const vec4 v8=vec4(0.9882352941176471,0.9921568627450981,0.7490196078431373,1);float a0=smoothstep(e0,e1,x_33);float a1=smoothstep(e1,e2,x_33);float a2=smoothstep(e2,e3,x_33);float a3=smoothstep(e3,e4,x_33);float a4=smoothstep(e4,e5,x_33);float a5=smoothstep(e5,e6,x_33);float a6=smoothstep(e6,e7,x_33);float a7=smoothstep(e7,e8,x_33);return max(mix(v0,v1,a0)*step(e0,x_33)*step(x_33,e1),max(mix(v1,v2,a1)*step(e1,x_33)*step(x_33,e2),max(mix(v2,v3,a2)*step(e2,x_33)*step(x_33,e3),max(mix(v3,v4,a3)*step(e3,x_33)*step(x_33,e4),max(mix(v4,v5,a4)*step(e4,x_33)*step(x_33,e5),max(mix(v5,v6,a5)*step(e5,x_33)*step(x_33,e6),max(mix(v6,v7,a6)*step(e6,x_33)*step(x_33,e7),mix(v7,v8,a7)*step(e7,x_33)*step(x_33,e8))))))));}vec4 plasma(float x_3){const float e0=0.0;const vec4 v0=vec4(0.050980392156862744,0.03137254901960784,0.5294117647058824,1);const float e1=0.13;const vec4 v1=vec4(0.29411764705882354,0.011764705882352941,0.6313725490196078,1);const float e2=0.25;const vec4 v2=vec4(0.49019607843137253,0.011764705882352941,0.6588235294117647,1);const float e3=0.38;const vec4 v3=vec4(0.6588235294117647,0.13333333333333333,0.5882352941176471,1);const float e4=0.5;const vec4 v4=vec4(0.796078431372549,0.27450980392156865,0.4745098039215686,1);const float e5=0.63;const vec4 v5=vec4(0.8980392156862745,0.4196078431372549,0.36470588235294116,1);const float e6=0.75;const vec4 v6=vec4(0.9725490196078431,0.5803921568627451,0.2549019607843137,1);const float e7=0.88;const vec4 v7=vec4(0.9921568627450981,0.7647058823529411,0.1568627450980392,1);const float e8=1.0;const vec4 v8=vec4(0.9411764705882353,0.9764705882352941,0.12941176470588237,1);float a0=smoothstep(e0,e1,x_3);float a1=smoothstep(e1,e2,x_3);float a2=smoothstep(e2,e3,x_3);float a3=smoothstep(e3,e4,x_3);float a4=smoothstep(e4,e5,x_3);float a5=smoothstep(e5,e6,x_3);float a6=smoothstep(e6,e7,x_3);float a7=smoothstep(e7,e8,x_3);return max(mix(v0,v1,a0)*step(e0,x_3)*step(x_3,e1),max(mix(v1,v2,a1)*step(e1,x_3)*step(x_3,e2),max(mix(v2,v3,a2)*step(e2,x_3)*step(x_3,e3),max(mix(v3,v4,a3)*step(e3,x_3)*step(x_3,e4),max(mix(v4,v5,a4)*step(e4,x_3)*step(x_3,e5),max(mix(v5,v6,a5)*step(e5,x_3)*step(x_3,e6),max(mix(v6,v7,a6)*step(e6,x_3)*step(x_3,e7),mix(v7,v8,a7)*step(e7,x_3)*step(x_3,e8))))))));}vec4 warm(float x_43){const float e0=0.0;const vec4 v0=vec4(0.49019607843137253,0,0.7019607843137254,1);const float e1=0.13;const vec4 v1=vec4(0.6745098039215687,0,0.7333333333333333,1);const float e2=0.25;const vec4 v2=vec4(0.8588235294117647,0,0.6666666666666666,1);const float e3=0.38;const vec4 v3=vec4(1,0,0.5098039215686274,1);const float e4=0.5;const vec4 v4=vec4(1,0.24705882352941178,0.2901960784313726,1);const float e5=0.63;const vec4 v5=vec4(1,0.4823529411764706,0,1);const float e6=0.75;const vec4 v6=vec4(0.9176470588235294,0.6901960784313725,0,1);const float e7=0.88;const vec4 v7=vec4(0.7450980392156863,0.8941176470588236,0,1);const float e8=1.0;const vec4 v8=vec4(0.5764705882352941,1,0,1);float a0=smoothstep(e0,e1,x_43);float a1=smoothstep(e1,e2,x_43);float a2=smoothstep(e2,e3,x_43);float a3=smoothstep(e3,e4,x_43);float a4=smoothstep(e4,e5,x_43);float a5=smoothstep(e5,e6,x_43);float a6=smoothstep(e6,e7,x_43);float a7=smoothstep(e7,e8,x_43);return max(mix(v0,v1,a0)*step(e0,x_43)*step(x_43,e1),max(mix(v1,v2,a1)*step(e1,x_43)*step(x_43,e2),max(mix(v2,v3,a2)*step(e2,x_43)*step(x_43,e3),max(mix(v3,v4,a3)*step(e3,x_43)*step(x_43,e4),max(mix(v4,v5,a4)*step(e4,x_43)*step(x_43,e5),max(mix(v5,v6,a5)*step(e5,x_43)*step(x_43,e6),max(mix(v6,v7,a6)*step(e6,x_43)*step(x_43,e7),mix(v7,v8,a7)*step(e7,x_43)*step(x_43,e8))))))));}vec4 rainbow_soft_1310269270(float x_14){const float e0=0.0;const vec4 v0=vec4(0.49019607843137253,0,0.7019607843137254,1);const float e1=0.1;const vec4 v1=vec4(0.7803921568627451,0,0.7058823529411765,1);const float e2=0.2;const vec4 v2=vec4(1,0,0.4745098039215686,1);const float e3=0.3;const vec4 v3=vec4(1,0.4235294117647059,0,1);const float e4=0.4;const vec4 v4=vec4(0.8705882352941177,0.7607843137254902,0,1);const float e5=0.5;const vec4 v5=vec4(0.5882352941176471,1,0,1);const float e6=0.6;const vec4 v6=vec4(0,1,0.21568627450980393,1);const float e7=0.7;const vec4 v7=vec4(0,0.9647058823529412,0.5882352941176471,1);const float e8=0.8;const vec4 v8=vec4(0.19607843137254902,0.6549019607843137,0.8705882352941177,1);const float e9=0.9;const vec4 v9=vec4(0.403921568627451,0.2,0.9215686274509803,1);const float e10=1.0;const vec4 v10=vec4(0.48627450980392156,0,0.7294117647058823,1);float a0=smoothstep(e0,e1,x_14);float a1=smoothstep(e1,e2,x_14);float a2=smoothstep(e2,e3,x_14);float a3=smoothstep(e3,e4,x_14);float a4=smoothstep(e4,e5,x_14);float a5=smoothstep(e5,e6,x_14);float a6=smoothstep(e6,e7,x_14);float a7=smoothstep(e7,e8,x_14);float a8=smoothstep(e8,e9,x_14);float a9=smoothstep(e9,e10,x_14);return max(mix(v0,v1,a0)*step(e0,x_14)*step(x_14,e1),max(mix(v1,v2,a1)*step(e1,x_14)*step(x_14,e2),max(mix(v2,v3,a2)*step(e2,x_14)*step(x_14,e3),max(mix(v3,v4,a3)*step(e3,x_14)*step(x_14,e4),max(mix(v4,v5,a4)*step(e4,x_14)*step(x_14,e5),max(mix(v5,v6,a5)*step(e5,x_14)*step(x_14,e6),max(mix(v6,v7,a6)*step(e6,x_14)*step(x_14,e7),max(mix(v7,v8,a7)*step(e7,x_14)*step(x_14,e8),max(mix(v8,v9,a8)*step(e8,x_14)*step(x_14,e9),mix(v9,v10,a9)*step(e9,x_14)*step(x_14,e10))))))))));}vec4 bathymetry(float x_36){const float e0=0.0;const vec4 v0=vec4(0.1568627450980392,0.10196078431372549,0.17254901960784313,1);const float e1=0.13;const vec4 v1=vec4(0.23137254901960785,0.19215686274509805,0.35294117647058826,1);const float e2=0.25;const vec4 v2=vec4(0.25098039215686274,0.2980392156862745,0.5450980392156862,1);const float e3=0.38;const vec4 v3=vec4(0.24705882352941178,0.43137254901960786,0.592156862745098,1);const float e4=0.5;const vec4 v4=vec4(0.2823529411764706,0.5568627450980392,0.6196078431372549,1);const float e5=0.63;const vec4 v5=vec4(0.3333333333333333,0.6823529411764706,0.6392156862745098,1);const float e6=0.75;const vec4 v6=vec4(0.47058823529411764,0.807843137254902,0.6392156862745098,1);const float e7=0.88;const vec4 v7=vec4(0.7333333333333333,0.9019607843137255,0.6745098039215687,1);const float e8=1.0;const vec4 v8=vec4(0.9921568627450981,0.996078431372549,0.8,1);float a0=smoothstep(e0,e1,x_36);float a1=smoothstep(e1,e2,x_36);float a2=smoothstep(e2,e3,x_36);float a3=smoothstep(e3,e4,x_36);float a4=smoothstep(e4,e5,x_36);float a5=smoothstep(e5,e6,x_36);float a6=smoothstep(e6,e7,x_36);float a7=smoothstep(e7,e8,x_36);return max(mix(v0,v1,a0)*step(e0,x_36)*step(x_36,e1),max(mix(v1,v2,a1)*step(e1,x_36)*step(x_36,e2),max(mix(v2,v3,a2)*step(e2,x_36)*step(x_36,e3),max(mix(v3,v4,a3)*step(e3,x_36)*step(x_36,e4),max(mix(v4,v5,a4)*step(e4,x_36)*step(x_36,e5),max(mix(v5,v6,a5)*step(e5,x_36)*step(x_36,e6),max(mix(v6,v7,a6)*step(e6,x_36)*step(x_36,e7),mix(v7,v8,a7)*step(e7,x_36)*step(x_36,e8))))))));}vec4 cdom(float x_7){const float e0=0.0;const vec4 v0=vec4(0.1843137254901961,0.058823529411764705,0.24313725490196078,1);const float e1=0.13;const vec4 v1=vec4(0.3411764705882353,0.09019607843137255,0.33725490196078434,1);const float e2=0.25;const vec4 v2=vec4(0.5098039215686274,0.10980392156862745,0.38823529411764707,1);const float e3=0.38;const vec4 v3=vec4(0.6705882352941176,0.1607843137254902,0.3764705882352941,1);const float e4=0.5;const vec4 v4=vec4(0.807843137254902,0.2627450980392157,0.33725490196078434,1);const float e5=0.63;const vec4 v5=vec4(0.9019607843137255,0.41568627450980394,0.32941176470588235,1);const float e6=0.75;const vec4 v6=vec4(0.9490196078431372,0.5843137254901961,0.403921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.9764705882352941,0.7568627450980392,0.5294117647058824,1);const float e8=1.0;const vec4 v8=vec4(0.996078431372549,0.9294117647058824,0.6901960784313725,1);float a0=smoothstep(e0,e1,x_7);float a1=smoothstep(e1,e2,x_7);float a2=smoothstep(e2,e3,x_7);float a3=smoothstep(e3,e4,x_7);float a4=smoothstep(e4,e5,x_7);float a5=smoothstep(e5,e6,x_7);float a6=smoothstep(e6,e7,x_7);float a7=smoothstep(e7,e8,x_7);return max(mix(v0,v1,a0)*step(e0,x_7)*step(x_7,e1),max(mix(v1,v2,a1)*step(e1,x_7)*step(x_7,e2),max(mix(v2,v3,a2)*step(e2,x_7)*step(x_7,e3),max(mix(v3,v4,a3)*step(e3,x_7)*step(x_7,e4),max(mix(v4,v5,a4)*step(e4,x_7)*step(x_7,e5),max(mix(v5,v6,a5)*step(e5,x_7)*step(x_7,e6),max(mix(v6,v7,a6)*step(e6,x_7)*step(x_7,e7),mix(v7,v8,a7)*step(e7,x_7)*step(x_7,e8))))))));}vec4 chlorophyll(float x_6){const float e0=0.0;const vec4 v0=vec4(0.07058823529411765,0.1411764705882353,0.0784313725490196,1);const float e1=0.13;const vec4 v1=vec4(0.09803921568627451,0.24705882352941178,0.1607843137254902,1);const float e2=0.25;const vec4 v2=vec4(0.09411764705882353,0.3568627450980392,0.23137254901960785,1);const float e3=0.38;const vec4 v3=vec4(0.050980392156862744,0.4666666666666667,0.2823529411764706,1);const float e4=0.5;const vec4 v4=vec4(0.07058823529411765,0.5803921568627451,0.3137254901960784,1);const float e5=0.63;const vec4 v5=vec4(0.3137254901960784,0.6784313725490196,0.34901960784313724,1);const float e6=0.75;const vec4 v6=vec4(0.5176470588235295,0.7686274509803922,0.47843137254901963,1);const float e7=0.88;const vec4 v7=vec4(0.6862745098039216,0.8666666666666667,0.6352941176470588,1);const float e8=1.0;const vec4 v8=vec4(0.8431372549019608,0.9764705882352941,0.8156862745098039,1);float a0=smoothstep(e0,e1,x_6);float a1=smoothstep(e1,e2,x_6);float a2=smoothstep(e2,e3,x_6);float a3=smoothstep(e3,e4,x_6);float a4=smoothstep(e4,e5,x_6);float a5=smoothstep(e5,e6,x_6);float a6=smoothstep(e6,e7,x_6);float a7=smoothstep(e7,e8,x_6);return max(mix(v0,v1,a0)*step(e0,x_6)*step(x_6,e1),max(mix(v1,v2,a1)*step(e1,x_6)*step(x_6,e2),max(mix(v2,v3,a2)*step(e2,x_6)*step(x_6,e3),max(mix(v3,v4,a3)*step(e3,x_6)*step(x_6,e4),max(mix(v4,v5,a4)*step(e4,x_6)*step(x_6,e5),max(mix(v5,v6,a5)*step(e5,x_6)*step(x_6,e6),max(mix(v6,v7,a6)*step(e6,x_6)*step(x_6,e7),mix(v7,v8,a7)*step(e7,x_6)*step(x_6,e8))))))));}vec4 density(float x_19){const float e0=0.0;const vec4 v0=vec4(0.21176470588235294,0.054901960784313725,0.1411764705882353,1);const float e1=0.13;const vec4 v1=vec4(0.34901960784313724,0.09019607843137255,0.3137254901960784,1);const float e2=0.25;const vec4 v2=vec4(0.43137254901960786,0.17647058823529413,0.5176470588235295,1);const float e3=0.38;const vec4 v3=vec4(0.47058823529411764,0.30196078431372547,0.6980392156862745,1);const float e4=0.5;const vec4 v4=vec4(0.47058823529411764,0.44313725490196076,0.8352941176470589,1);const float e5=0.63;const vec4 v5=vec4(0.45098039215686275,0.592156862745098,0.8941176470588236,1);const float e6=0.75;const vec4 v6=vec4(0.5254901960784314,0.7254901960784313,0.8901960784313725,1);const float e7=0.88;const vec4 v7=vec4(0.6941176470588235,0.8392156862745098,0.8901960784313725,1);const float e8=1.0;const vec4 v8=vec4(0.9019607843137255,0.9450980392156862,0.9450980392156862,1);float a0=smoothstep(e0,e1,x_19);float a1=smoothstep(e1,e2,x_19);float a2=smoothstep(e2,e3,x_19);float a3=smoothstep(e3,e4,x_19);float a4=smoothstep(e4,e5,x_19);float a5=smoothstep(e5,e6,x_19);float a6=smoothstep(e6,e7,x_19);float a7=smoothstep(e7,e8,x_19);return max(mix(v0,v1,a0)*step(e0,x_19)*step(x_19,e1),max(mix(v1,v2,a1)*step(e1,x_19)*step(x_19,e2),max(mix(v2,v3,a2)*step(e2,x_19)*step(x_19,e3),max(mix(v3,v4,a3)*step(e3,x_19)*step(x_19,e4),max(mix(v4,v5,a4)*step(e4,x_19)*step(x_19,e5),max(mix(v5,v6,a5)*step(e5,x_19)*step(x_19,e6),max(mix(v6,v7,a6)*step(e6,x_19)*step(x_19,e7),mix(v7,v8,a7)*step(e7,x_19)*step(x_19,e8))))))));}vec4 freesurface_blue_3154355989(float x_35){const float e0=0.0;const vec4 v0=vec4(0.11764705882352941,0.01568627450980392,0.43137254901960786,1);const float e1=0.13;const vec4 v1=vec4(0.1843137254901961,0.054901960784313725,0.6901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.1607843137254902,0.17647058823529413,0.9254901960784314,1);const float e3=0.38;const vec4 v3=vec4(0.09803921568627451,0.38823529411764707,0.8313725490196079,1);const float e4=0.5;const vec4 v4=vec4(0.26666666666666666,0.5137254901960784,0.7843137254901961,1);const float e5=0.63;const vec4 v5=vec4(0.4470588235294118,0.611764705882353,0.7725490196078432,1);const float e6=0.75;const vec4 v6=vec4(0.615686274509804,0.7098039215686275,0.796078431372549,1);const float e7=0.88;const vec4 v7=vec4(0.7843137254901961,0.8156862745098039,0.8470588235294118,1);const float e8=1.0;const vec4 v8=vec4(0.9450980392156862,0.9294117647058824,0.9254901960784314,1);float a0=smoothstep(e0,e1,x_35);float a1=smoothstep(e1,e2,x_35);float a2=smoothstep(e2,e3,x_35);float a3=smoothstep(e3,e4,x_35);float a4=smoothstep(e4,e5,x_35);float a5=smoothstep(e5,e6,x_35);float a6=smoothstep(e6,e7,x_35);float a7=smoothstep(e7,e8,x_35);return max(mix(v0,v1,a0)*step(e0,x_35)*step(x_35,e1),max(mix(v1,v2,a1)*step(e1,x_35)*step(x_35,e2),max(mix(v2,v3,a2)*step(e2,x_35)*step(x_35,e3),max(mix(v3,v4,a3)*step(e3,x_35)*step(x_35,e4),max(mix(v4,v5,a4)*step(e4,x_35)*step(x_35,e5),max(mix(v5,v6,a5)*step(e5,x_35)*step(x_35,e6),max(mix(v6,v7,a6)*step(e6,x_35)*step(x_35,e7),mix(v7,v8,a7)*step(e7,x_35)*step(x_35,e8))))))));}vec4 freesurface_red_1679163293(float x_20){const float e0=0.0;const vec4 v0=vec4(0.23529411764705882,0.03529411764705882,0.07058823529411765,1);const float e1=0.13;const vec4 v1=vec4(0.39215686274509803,0.06666666666666667,0.10588235294117647,1);const float e2=0.25;const vec4 v2=vec4(0.5568627450980392,0.0784313725490196,0.11372549019607843,1);const float e3=0.38;const vec4 v3=vec4(0.6941176470588235,0.16862745098039217,0.10588235294117647,1);const float e4=0.5;const vec4 v4=vec4(0.7529411764705882,0.3411764705882353,0.24705882352941178,1);const float e5=0.63;const vec4 v5=vec4(0.803921568627451,0.49019607843137253,0.4117647058823529,1);const float e6=0.75;const vec4 v6=vec4(0.8470588235294118,0.6352941176470588,0.5803921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.8901960784313725,0.7803921568627451,0.7568627450980392,1);const float e8=1.0;const vec4 v8=vec4(0.9450980392156862,0.9294117647058824,0.9254901960784314,1);float a0=smoothstep(e0,e1,x_20);float a1=smoothstep(e1,e2,x_20);float a2=smoothstep(e2,e3,x_20);float a3=smoothstep(e3,e4,x_20);float a4=smoothstep(e4,e5,x_20);float a5=smoothstep(e5,e6,x_20);float a6=smoothstep(e6,e7,x_20);float a7=smoothstep(e7,e8,x_20);return max(mix(v0,v1,a0)*step(e0,x_20)*step(x_20,e1),max(mix(v1,v2,a1)*step(e1,x_20)*step(x_20,e2),max(mix(v2,v3,a2)*step(e2,x_20)*step(x_20,e3),max(mix(v3,v4,a3)*step(e3,x_20)*step(x_20,e4),max(mix(v4,v5,a4)*step(e4,x_20)*step(x_20,e5),max(mix(v5,v6,a5)*step(e5,x_20)*step(x_20,e6),max(mix(v6,v7,a6)*step(e6,x_20)*step(x_20,e7),mix(v7,v8,a7)*step(e7,x_20)*step(x_20,e8))))))));}vec4 oxygen(float x_11){const float e0=0.0;const vec4 v0=vec4(0.25098039215686274,0.0196078431372549,0.0196078431372549,1);const float e1=0.13;const vec4 v1=vec4(0.41568627450980394,0.023529411764705882,0.058823529411764705,1);const float e2=0.25;const vec4 v2=vec4(0.5647058823529412,0.10196078431372549,0.027450980392156862,1);const float e3=0.38;const vec4 v3=vec4(0.6588235294117647,0.25098039215686274,0.011764705882352941,1);const float e4=0.5;const vec4 v4=vec4(0.7372549019607844,0.39215686274509803,0.01568627450980392,1);const float e5=0.63;const vec4 v5=vec4(0.807843137254902,0.5333333333333333,0.043137254901960784,1);const float e6=0.75;const vec4 v6=vec4(0.8627450980392157,0.6823529411764706,0.09803921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.9058823529411765,0.8431372549019608,0.17254901960784313,1);const float e8=1.0;const vec4 v8=vec4(0.9725490196078431,0.996078431372549,0.4117647058823529,1);float a0=smoothstep(e0,e1,x_11);float a1=smoothstep(e1,e2,x_11);float a2=smoothstep(e2,e3,x_11);float a3=smoothstep(e3,e4,x_11);float a4=smoothstep(e4,e5,x_11);float a5=smoothstep(e5,e6,x_11);float a6=smoothstep(e6,e7,x_11);float a7=smoothstep(e7,e8,x_11);return max(mix(v0,v1,a0)*step(e0,x_11)*step(x_11,e1),max(mix(v1,v2,a1)*step(e1,x_11)*step(x_11,e2),max(mix(v2,v3,a2)*step(e2,x_11)*step(x_11,e3),max(mix(v3,v4,a3)*step(e3,x_11)*step(x_11,e4),max(mix(v4,v5,a4)*step(e4,x_11)*step(x_11,e5),max(mix(v5,v6,a5)*step(e5,x_11)*step(x_11,e6),max(mix(v6,v7,a6)*step(e6,x_11)*step(x_11,e7),mix(v7,v8,a7)*step(e7,x_11)*step(x_11,e8))))))));}vec4 par(float x_28){const float e0=0.0;const vec4 v0=vec4(0.2,0.0784313725490196,0.09411764705882353,1);const float e1=0.13;const vec4 v1=vec4(0.35294117647058826,0.12549019607843137,0.13725490196078433,1);const float e2=0.25;const vec4 v2=vec4(0.5058823529411764,0.17254901960784313,0.13333333333333333,1);const float e3=0.38;const vec4 v3=vec4(0.6235294117647059,0.26666666666666666,0.09803921568627451,1);const float e4=0.5;const vec4 v4=vec4(0.7137254901960784,0.38823529411764707,0.07450980392156863,1);const float e5=0.63;const vec4 v5=vec4(0.7803921568627451,0.5254901960784314,0.08627450980392157,1);const float e6=0.75;const vec4 v6=vec4(0.8313725490196079,0.6705882352941176,0.13725490196078433,1);const float e7=0.88;const vec4 v7=vec4(0.8666666666666667,0.8235294117647058,0.21176470588235294,1);const float e8=1.0;const vec4 v8=vec4(0.8823529411764706,0.9921568627450981,0.29411764705882354,1);float a0=smoothstep(e0,e1,x_28);float a1=smoothstep(e1,e2,x_28);float a2=smoothstep(e2,e3,x_28);float a3=smoothstep(e3,e4,x_28);float a4=smoothstep(e4,e5,x_28);float a5=smoothstep(e5,e6,x_28);float a6=smoothstep(e6,e7,x_28);float a7=smoothstep(e7,e8,x_28);return max(mix(v0,v1,a0)*step(e0,x_28)*step(x_28,e1),max(mix(v1,v2,a1)*step(e1,x_28)*step(x_28,e2),max(mix(v2,v3,a2)*step(e2,x_28)*step(x_28,e3),max(mix(v3,v4,a3)*step(e3,x_28)*step(x_28,e4),max(mix(v4,v5,a4)*step(e4,x_28)*step(x_28,e5),max(mix(v5,v6,a5)*step(e5,x_28)*step(x_28,e6),max(mix(v6,v7,a6)*step(e6,x_28)*step(x_28,e7),mix(v7,v8,a7)*step(e7,x_28)*step(x_28,e8))))))));}vec4 phase(float x_39){const float e0=0.0;const vec4 v0=vec4(0.5686274509803921,0.4117647058823529,0.07058823529411765,1);const float e1=0.13;const vec4 v1=vec4(0.7215686274509804,0.2784313725490196,0.14901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.7294117647058823,0.22745098039215686,0.45098039215686275,1);const float e3=0.38;const vec4 v3=vec4(0.6274509803921569,0.2784313725490196,0.7254901960784313,1);const float e4=0.5;const vec4 v4=vec4(0.43137254901960786,0.3803921568627451,0.8549019607843137,1);const float e5=0.63;const vec4 v5=vec4(0.19607843137254902,0.4823529411764706,0.6431372549019608,1);const float e6=0.75;const vec4 v6=vec4(0.12156862745098039,0.5137254901960784,0.43137254901960786,1);const float e7=0.88;const vec4 v7=vec4(0.30196078431372547,0.5058823529411764,0.13333333333333333,1);const float e8=1.0;const vec4 v8=vec4(0.5686274509803921,0.4117647058823529,0.07058823529411765,1);float a0=smoothstep(e0,e1,x_39);float a1=smoothstep(e1,e2,x_39);float a2=smoothstep(e2,e3,x_39);float a3=smoothstep(e3,e4,x_39);float a4=smoothstep(e4,e5,x_39);float a5=smoothstep(e5,e6,x_39);float a6=smoothstep(e6,e7,x_39);float a7=smoothstep(e7,e8,x_39);return max(mix(v0,v1,a0)*step(e0,x_39)*step(x_39,e1),max(mix(v1,v2,a1)*step(e1,x_39)*step(x_39,e2),max(mix(v2,v3,a2)*step(e2,x_39)*step(x_39,e3),max(mix(v3,v4,a3)*step(e3,x_39)*step(x_39,e4),max(mix(v4,v5,a4)*step(e4,x_39)*step(x_39,e5),max(mix(v5,v6,a5)*step(e5,x_39)*step(x_39,e6),max(mix(v6,v7,a6)*step(e6,x_39)*step(x_39,e7),mix(v7,v8,a7)*step(e7,x_39)*step(x_39,e8))))))));}vec4 salinity(float x_26){const float e0=0.0;const vec4 v0=vec4(0.16470588235294117,0.09411764705882353,0.4235294117647059,1);const float e1=0.13;const vec4 v1=vec4(0.12941176470588237,0.19607843137254902,0.6352941176470588,1);const float e2=0.25;const vec4 v2=vec4(0.058823529411764705,0.35294117647058826,0.5686274509803921,1);const float e3=0.38;const vec4 v3=vec4(0.1568627450980392,0.4627450980392157,0.5372549019607843,1);const float e4=0.5;const vec4 v4=vec4(0.23137254901960785,0.5725490196078431,0.5294117647058824,1);const float e5=0.63;const vec4 v5=vec4(0.30980392156862746,0.6862745098039216,0.49411764705882355,1);const float e6=0.75;const vec4 v6=vec4(0.47058823529411764,0.796078431372549,0.40784313725490196,1);const float e7=0.88;const vec4 v7=vec4(0.7568627450980392,0.8666666666666667,0.39215686274509803,1);const float e8=1.0;const vec4 v8=vec4(0.9921568627450981,0.9372549019607843,0.6039215686274509,1);float a0=smoothstep(e0,e1,x_26);float a1=smoothstep(e1,e2,x_26);float a2=smoothstep(e2,e3,x_26);float a3=smoothstep(e3,e4,x_26);float a4=smoothstep(e4,e5,x_26);float a5=smoothstep(e5,e6,x_26);float a6=smoothstep(e6,e7,x_26);float a7=smoothstep(e7,e8,x_26);return max(mix(v0,v1,a0)*step(e0,x_26)*step(x_26,e1),max(mix(v1,v2,a1)*step(e1,x_26)*step(x_26,e2),max(mix(v2,v3,a2)*step(e2,x_26)*step(x_26,e3),max(mix(v3,v4,a3)*step(e3,x_26)*step(x_26,e4),max(mix(v4,v5,a4)*step(e4,x_26)*step(x_26,e5),max(mix(v5,v6,a5)*step(e5,x_26)*step(x_26,e6),max(mix(v6,v7,a6)*step(e6,x_26)*step(x_26,e7),mix(v7,v8,a7)*step(e7,x_26)*step(x_26,e8))))))));}vec4 temperature(float x_8){const float e0=0.0;const vec4 v0=vec4(0.01568627450980392,0.13725490196078433,0.2,1);const float e1=0.13;const vec4 v1=vec4(0.09019607843137255,0.2,0.47843137254901963,1);const float e2=0.25;const vec4 v2=vec4(0.3333333333333333,0.23137254901960785,0.615686274509804,1);const float e3=0.38;const vec4 v3=vec4(0.5058823529411764,0.30980392156862746,0.5607843137254902,1);const float e4=0.5;const vec4 v4=vec4(0.6862745098039216,0.37254901960784315,0.5098039215686274,1);const float e5=0.63;const vec4 v5=vec4(0.8705882352941177,0.4392156862745098,0.396078431372549,1);const float e6=0.75;const vec4 v6=vec4(0.9764705882352941,0.5725490196078431,0.25882352941176473,1);const float e7=0.88;const vec4 v7=vec4(0.9764705882352941,0.7686274509803922,0.2549019607843137,1);const float e8=1.0;const vec4 v8=vec4(0.9098039215686274,0.9803921568627451,0.3568627450980392,1);float a0=smoothstep(e0,e1,x_8);float a1=smoothstep(e1,e2,x_8);float a2=smoothstep(e2,e3,x_8);float a3=smoothstep(e3,e4,x_8);float a4=smoothstep(e4,e5,x_8);float a5=smoothstep(e5,e6,x_8);float a6=smoothstep(e6,e7,x_8);float a7=smoothstep(e7,e8,x_8);return max(mix(v0,v1,a0)*step(e0,x_8)*step(x_8,e1),max(mix(v1,v2,a1)*step(e1,x_8)*step(x_8,e2),max(mix(v2,v3,a2)*step(e2,x_8)*step(x_8,e3),max(mix(v3,v4,a3)*step(e3,x_8)*step(x_8,e4),max(mix(v4,v5,a4)*step(e4,x_8)*step(x_8,e5),max(mix(v5,v6,a5)*step(e5,x_8)*step(x_8,e6),max(mix(v6,v7,a6)*step(e6,x_8)*step(x_8,e7),mix(v7,v8,a7)*step(e7,x_8)*step(x_8,e8))))))));}vec4 turbidity(float x_40){const float e0=0.0;const vec4 v0=vec4(0.13333333333333333,0.12156862745098039,0.10588235294117647,1);const float e1=0.13;const vec4 v1=vec4(0.2549019607843137,0.19607843137254902,0.1607843137254902,1);const float e2=0.25;const vec4 v2=vec4(0.3843137254901961,0.27058823529411763,0.20392156862745098,1);const float e3=0.38;const vec4 v3=vec4(0.5137254901960784,0.34901960784313724,0.2235294117647059,1);const float e4=0.5;const vec4 v4=vec4(0.6313725490196078,0.4392156862745098,0.23137254901960785,1);const float e5=0.63;const vec4 v5=vec4(0.7254901960784313,0.5490196078431373,0.25882352941176473,1);const float e6=0.75;const vec4 v6=vec4(0.792156862745098,0.6823529411764706,0.34509803921568627,1);const float e7=0.88;const vec4 v7=vec4(0.8470588235294118,0.8196078431372549,0.49411764705882355,1);const float e8=1.0;const vec4 v8=vec4(0.9137254901960784,0.9647058823529412,0.6705882352941176,1);float a0=smoothstep(e0,e1,x_40);float a1=smoothstep(e1,e2,x_40);float a2=smoothstep(e2,e3,x_40);float a3=smoothstep(e3,e4,x_40);float a4=smoothstep(e4,e5,x_40);float a5=smoothstep(e5,e6,x_40);float a6=smoothstep(e6,e7,x_40);float a7=smoothstep(e7,e8,x_40);return max(mix(v0,v1,a0)*step(e0,x_40)*step(x_40,e1),max(mix(v1,v2,a1)*step(e1,x_40)*step(x_40,e2),max(mix(v2,v3,a2)*step(e2,x_40)*step(x_40,e3),max(mix(v3,v4,a3)*step(e3,x_40)*step(x_40,e4),max(mix(v4,v5,a4)*step(e4,x_40)*step(x_40,e5),max(mix(v5,v6,a5)*step(e5,x_40)*step(x_40,e6),max(mix(v6,v7,a6)*step(e6,x_40)*step(x_40,e7),mix(v7,v8,a7)*step(e7,x_40)*step(x_40,e8))))))));}vec4 velocity_blue_297387650(float x_2){const float e0=0.0;const vec4 v0=vec4(0.06666666666666667,0.12549019607843137,0.25098039215686274,1);const float e1=0.13;const vec4 v1=vec4(0.13725490196078433,0.20392156862745098,0.4549019607843137,1);const float e2=0.25;const vec4 v2=vec4(0.11372549019607843,0.3176470588235294,0.611764705882353,1);const float e3=0.38;const vec4 v3=vec4(0.12156862745098039,0.44313725490196076,0.6352941176470588,1);const float e4=0.5;const vec4 v4=vec4(0.19607843137254902,0.5647058823529412,0.6627450980392157,1);const float e5=0.63;const vec4 v5=vec4(0.3411764705882353,0.6784313725490196,0.6901960784313725,1);const float e6=0.75;const vec4 v6=vec4(0.5843137254901961,0.7686274509803922,0.7411764705882353,1);const float e7=0.88;const vec4 v7=vec4(0.796078431372549,0.8666666666666667,0.8274509803921568,1);const float e8=1.0;const vec4 v8=vec4(0.996078431372549,0.984313725490196,0.9019607843137255,1);float a0=smoothstep(e0,e1,x_2);float a1=smoothstep(e1,e2,x_2);float a2=smoothstep(e2,e3,x_2);float a3=smoothstep(e3,e4,x_2);float a4=smoothstep(e4,e5,x_2);float a5=smoothstep(e5,e6,x_2);float a6=smoothstep(e6,e7,x_2);float a7=smoothstep(e7,e8,x_2);return max(mix(v0,v1,a0)*step(e0,x_2)*step(x_2,e1),max(mix(v1,v2,a1)*step(e1,x_2)*step(x_2,e2),max(mix(v2,v3,a2)*step(e2,x_2)*step(x_2,e3),max(mix(v3,v4,a3)*step(e3,x_2)*step(x_2,e4),max(mix(v4,v5,a4)*step(e4,x_2)*step(x_2,e5),max(mix(v5,v6,a5)*step(e5,x_2)*step(x_2,e6),max(mix(v6,v7,a6)*step(e6,x_2)*step(x_2,e7),mix(v7,v8,a7)*step(e7,x_2)*step(x_2,e8))))))));}vec4 velocity_green_2558432129(float x_27){const float e0=0.0;const vec4 v0=vec4(0.09019607843137255,0.13725490196078433,0.07450980392156863,1);const float e1=0.13;const vec4 v1=vec4(0.09411764705882353,0.25098039215686274,0.14901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.043137254901960784,0.37254901960784315,0.17647058823529413,1);const float e3=0.38;const vec4 v3=vec4(0.15294117647058825,0.4823529411764706,0.13725490196078433,1);const float e4=0.5;const vec4 v4=vec4(0.37254901960784315,0.5725490196078431,0.047058823529411764,1);const float e5=0.63;const vec4 v5=vec4(0.596078431372549,0.6470588235294118,0.07058823529411765,1);const float e6=0.75;const vec4 v6=vec4(0.788235294117647,0.7294117647058823,0.27058823529411763,1);const float e7=0.88;const vec4 v7=vec4(0.9137254901960784,0.8470588235294118,0.5372549019607843,1);const float e8=1.0;const vec4 v8=vec4(1,0.9921568627450981,0.803921568627451,1);float a0=smoothstep(e0,e1,x_27);float a1=smoothstep(e1,e2,x_27);float a2=smoothstep(e2,e3,x_27);float a3=smoothstep(e3,e4,x_27);float a4=smoothstep(e4,e5,x_27);float a5=smoothstep(e5,e6,x_27);float a6=smoothstep(e6,e7,x_27);float a7=smoothstep(e7,e8,x_27);return max(mix(v0,v1,a0)*step(e0,x_27)*step(x_27,e1),max(mix(v1,v2,a1)*step(e1,x_27)*step(x_27,e2),max(mix(v2,v3,a2)*step(e2,x_27)*step(x_27,e3),max(mix(v3,v4,a3)*step(e3,x_27)*step(x_27,e4),max(mix(v4,v5,a4)*step(e4,x_27)*step(x_27,e5),max(mix(v5,v6,a5)*step(e5,x_27)*step(x_27,e6),max(mix(v6,v7,a6)*step(e6,x_27)*step(x_27,e7),mix(v7,v8,a7)*step(e7,x_27)*step(x_27,e8))))))));}vec4 cubehelix(float x_37){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.07;const vec4 v1=vec4(0.08627450980392157,0.0196078431372549,0.23137254901960785,1);const float e2=0.13;const vec4 v2=vec4(0.23529411764705882,0.01568627450980392,0.4117647058823529,1);const float e3=0.2;const vec4 v3=vec4(0.42745098039215684,0.00392156862745098,0.5294117647058824,1);const float e4=0.27;const vec4 v4=vec4(0.6313725490196078,0,0.5764705882352941,1);const float e5=0.33;const vec4 v5=vec4(0.8235294117647058,0.00784313725490196,0.5568627450980392,1);const float e6=0.4;const vec4 v6=vec4(0.984313725490196,0.043137254901960784,0.4823529411764706,1);const float e7=0.47;const vec4 v7=vec4(1,0.11372549019607843,0.3803921568627451,1);const float e8=0.53;const vec4 v8=vec4(1,0.21176470588235294,0.27058823529411763,1);const float e9=0.6;const vec4 v9=vec4(1,0.3333333333333333,0.1803921568627451,1);const float e10=0.67;const vec4 v10=vec4(1,0.47058823529411764,0.13333333333333333,1);const float e11=0.73;const vec4 v11=vec4(1,0.615686274509804,0.1450980392156863,1);const float e12=0.8;const vec4 v12=vec4(0.9450980392156862,0.7490196078431373,0.2235294117647059,1);const float e13=0.87;const vec4 v13=vec4(0.8784313725490196,0.8627450980392157,0.36470588235294116,1);const float e14=0.93;const vec4 v14=vec4(0.8549019607843137,0.9450980392156862,0.5568627450980392,1);const float e15=1.0;const vec4 v15=vec4(0.8901960784313725,0.9921568627450981,0.7764705882352941,1);float a0=smoothstep(e0,e1,x_37);float a1=smoothstep(e1,e2,x_37);float a2=smoothstep(e2,e3,x_37);float a3=smoothstep(e3,e4,x_37);float a4=smoothstep(e4,e5,x_37);float a5=smoothstep(e5,e6,x_37);float a6=smoothstep(e6,e7,x_37);float a7=smoothstep(e7,e8,x_37);float a8=smoothstep(e8,e9,x_37);float a9=smoothstep(e9,e10,x_37);float a10=smoothstep(e10,e11,x_37);float a11=smoothstep(e11,e12,x_37);float a12=smoothstep(e12,e13,x_37);float a13=smoothstep(e13,e14,x_37);float a14=smoothstep(e14,e15,x_37);return max(mix(v0,v1,a0)*step(e0,x_37)*step(x_37,e1),max(mix(v1,v2,a1)*step(e1,x_37)*step(x_37,e2),max(mix(v2,v3,a2)*step(e2,x_37)*step(x_37,e3),max(mix(v3,v4,a3)*step(e3,x_37)*step(x_37,e4),max(mix(v4,v5,a4)*step(e4,x_37)*step(x_37,e5),max(mix(v5,v6,a5)*step(e5,x_37)*step(x_37,e6),max(mix(v6,v7,a6)*step(e6,x_37)*step(x_37,e7),max(mix(v7,v8,a7)*step(e7,x_37)*step(x_37,e8),max(mix(v8,v9,a8)*step(e8,x_37)*step(x_37,e9),max(mix(v9,v10,a9)*step(e9,x_37)*step(x_37,e10),max(mix(v10,v11,a10)*step(e10,x_37)*step(x_37,e11),max(mix(v11,v12,a11)*step(e11,x_37)*step(x_37,e12),max(mix(v12,v13,a12)*step(e12,x_37)*step(x_37,e13),max(mix(v13,v14,a13)*step(e13,x_37)*step(x_37,e14),mix(v14,v15,a14)*step(e14,x_37)*step(x_37,e15)))))))))))))));}float apply_contrast_limits(float intensity,vec2 contrastLimits){float contrastLimitsAppliedToIntensity=(intensity-contrastLimits[0])/max(0.0005,(contrastLimits[1]-contrastLimits[0]));return max(0.,contrastLimitsAppliedToIntensity);}vec4 colormap(float intensity,float opacity){return vec4(COLORMAP_FUNCTION(min(1.,intensity)).xyz,opacity);}";
var channels = {
  name: "channel-intensity-module",
  fs
};
var RENDERING_MODES_BLEND = {
  [RENDERING_MODES.MAX_INTENSITY_PROJECTION]: {
    _BEFORE_RENDER: `      float maxVals[6] = float[6](-1.0, -1.0, -1.0, -1.0, -1.0, -1.0);
    `,
    _RENDER: `    
      float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);

      for(int i = 0; i < 6; i++) {
        if(intensityArray[i] > maxVals[i]) {
          maxVals[i] = intensityArray[i];
        }
      }
    `,
    _AFTER_RENDER: `      vec3 rgbCombo = vec3(0.0);
      for(int i = 0; i < 6; i++) {
        rgbCombo += max(0.0, min(1.0, maxVals[i])) * vec3(colors[i]);
      }
      color = vec4(rgbCombo, 1.0);
    `
  },
  [RENDERING_MODES.MIN_INTENSITY_PROJECTION]: {
    _BEFORE_RENDER: `      float minVals[6] = float[6](1. / 0., 1. / 0., 1. / 0., 1. / 0., 1. / 0., 1. / 0.);
    `,
    _RENDER: `    
      float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);

      for(int i = 0; i < 6; i++) {
        if(intensityArray[i] < minVals[i]) {
          minVals[i] = intensityArray[i];
        }
      }
    `,
    _AFTER_RENDER: `      vec3 rgbCombo = vec3(0.0);
      for(int i = 0; i < 6; i++) {
        rgbCombo += max(0.0, min(1.0, minVals[i])) * vec3(colors[i]);
      }
      color = vec4(rgbCombo, 1.0);
    `
  },
  [RENDERING_MODES.ADDITIVE]: {
    _BEFORE_RENDER: ``,
    _RENDER: `      vec3 rgbCombo = vec3(0.0);
      vec3 hsvCombo = vec3(0.0);
      float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);
      float total = 0.0;
      for(int i = 0; i < 6; i++) {
        float intensityValue = intensityArray[i];
        rgbCombo += max(0.0, min(1.0, intensityValue)) * colors[i];
        total += intensityValue;
      }
      // Do not go past 1 in opacity.
      total = min(total, 1.0);
      vec4 val_color = vec4(rgbCombo, total);
      // Opacity correction
      val_color.a = 1.0 - pow(1.0 - val_color.a, 1.0);
      color.rgb += (1.0 - color.a) * val_color.a * val_color.rgb;
      color.a += (1.0 - color.a) * val_color.a;
      if (color.a >= 0.95) {
        break;
      }
    `,
    _AFTER_RENDER: ``
  }
};
var RENDERING_MODES_COLORMAP = {
  [RENDERING_MODES.MAX_INTENSITY_PROJECTION]: {
    _BEFORE_RENDER: `      float maxVals[6] = float[6](-1.0, -1.0, -1.0, -1.0, -1.0, -1.0);
    `,
    _RENDER: `    
      float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);

      for(int i = 0; i < 6; i++) {
        if(intensityArray[i] > maxVals[i]) {
          maxVals[i] = intensityArray[i];
        }
      }
    `,
    _AFTER_RENDER: `      float total = 0.0;
      for(int i = 0; i < 6; i++) {
        total += maxVals[i];
      }
      // Do not go past 1 in opacity/colormap value.
      total = min(total, 1.0);
      color = colormap(total, total);
    `
  },
  [RENDERING_MODES.MIN_INTENSITY_PROJECTION]: {
    _BEFORE_RENDER: `      float minVals[6] = float[6](1. / 0., 1. / 0., 1. / 0., 1. / 0., 1. / 0., 1. / 0.);
    `,
    _RENDER: `    
      float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);

      for(int i = 0; i < 6; i++) {
        if(intensityArray[i] < minVals[i]) {
          minVals[i] = intensityArray[i];
        }
      }
    `,
    _AFTER_RENDER: `      float total = 0.0;
      for(int i = 0; i < 6; i++) {
        total += minVals[i];
      }
      // Do not go past 1 in opacity/colormap value.
      total = min(total, 1.0);
      color = colormap(total, total);
    `
  },
  [RENDERING_MODES.ADDITIVE]: {
    _BEFORE_RENDER: ``,
    _RENDER: `    float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);
		float total = 0.0;

		for(int i = 0; i < 6; i++) {
			total += intensityArray[i];
		}
		// Do not go past 1 in opacity/colormap value.
		total = min(total, 1.0);

		vec4 val_color = colormap(total, total);

		// Opacity correction
		val_color.a = 1.0 - pow(1.0 - val_color.a, 1.0);
		color.rgb += (1.0 - color.a) * val_color.a * val_color.rgb;
		color.a += (1.0 - color.a) * val_color.a;
		if (color.a >= 0.95) {
			break;
		}
    p += ray_dir * dt;
    `,
    _AFTER_RENDER: ``
  }
};
var CUBE_STRIP = [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0];
var NUM_PLANES_DEFAULT = 1;
var defaultProps$1 = {
  pickable: false,
  coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["COORDINATE_SYSTEM"].CARTESIAN,
  channelData: {
    type: "object",
    value: {},
    compare: true
  },
  colors: {
    type: "array",
    value: [],
    compare: true
  },
  contrastLimits: {
    type: "array",
    value: [],
    compare: true
  },
  dtype: {
    type: "string",
    value: "Uint8",
    compare: true
  },
  colormap: {
    type: "string",
    value: "",
    compare: true
  },
  xSlice: {
    type: "array",
    value: null,
    compare: true
  },
  ySlice: {
    type: "array",
    value: null,
    compare: true
  },
  zSlice: {
    type: "array",
    value: null,
    compare: true
  },
  clippingPlanes: {
    type: "array",
    value: [],
    compare: true
  },
  renderingMode: {
    type: "string",
    value: RENDERING_MODES.ADDITIVE,
    compare: true
  },
  resolutionMatrix: {
    type: "object",
    value: new math_gl__WEBPACK_IMPORTED_MODULE_23__["Matrix4"](),
    compare: true
  }
};
function getRenderingAttrs() {
  const values = getDtypeValues("Float32");
  return __spreadProps(__spreadValues({}, values), {
    sampler: values.sampler.replace("2D", "3D"),
    cast: (data) => new Float32Array(data)
  });
}
function removeExtraColormapFunctionsFromShader(colormap) {
  const discardColormaps = COLORMAPS.filter((i) => i !== (colormap || "viridis")).map((i) => i.replace(/-/g, "_"));
  const discardRegex = new RegExp(`vec4 (${discardColormaps.join("(_([0-9]*))?|")})\\(float x_[0-9]+\\){([^}]+)}`, "g");
  const channelsModules = __spreadProps(__spreadValues({}, channels), {
    fs: channels.fs.replace(discardRegex, ""),
    defines: {
      COLORMAP_FUNCTION: colormap || "viridis"
    }
  });
  return channelsModules;
}
var XR3DLayer = class extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["Layer"] {
  initializeState() {
    const {
      gl
    } = this.context;
    gl.pixelStorei(_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].UNPACK_ALIGNMENT, 1);
    gl.pixelStorei(_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].PACK_ALIGNMENT, 1);
    const programManager = _luma_gl_engine__WEBPACK_IMPORTED_MODULE_27__["ProgramManager"].getDefaultProgramManager(gl);
    const processStr = `fs:DECKGL_PROCESS_INTENSITY(inout float intensity, vec2 contrastLimits, int channelIndex)`;
    if (!programManager._hookFunctions.includes(processStr)) {
      programManager.addShaderHook(processStr);
    }
  }
  _isHookDefinedByExtensions(hookName) {
    const {
      extensions
    } = this.props;
    return extensions == null ? void 0 : extensions.some((e) => {
      const shaders = e.getShaders();
      const {
        inject: inject3 = {},
        modules = []
      } = shaders;
      const definesInjection = inject3[hookName];
      const moduleDefinesInjection = modules.some((m) => m == null ? void 0 : m.inject[hookName]);
      return definesInjection || moduleDefinesInjection;
    });
  }
  getShaders() {
    const {
      colormap,
      renderingMode,
      clippingPlanes
    } = this.props;
    const {
      sampler
    } = getRenderingAttrs();
    const {
      _BEFORE_RENDER,
      _RENDER,
      _AFTER_RENDER
    } = colormap ? RENDERING_MODES_COLORMAP[renderingMode] : RENDERING_MODES_BLEND[renderingMode];
    const channelsModules = removeExtraColormapFunctionsFromShader(colormap);
    const extensionDefinesDeckglProcessIntensity = this._isHookDefinedByExtensions("fs:DECKGL_PROCESS_INTENSITY");
    const newChannelsModule = __spreadProps(__spreadValues({}, channelsModules), {
      inject: {}
    });
    if (!extensionDefinesDeckglProcessIntensity) {
      newChannelsModule.inject["fs:DECKGL_PROCESS_INTENSITY"] = `
        intensity = apply_contrast_limits(intensity, contrastLimits);
      `;
    }
    return super.getShaders({
      vs,
      fs: fs$1.replace("_BEFORE_RENDER", _BEFORE_RENDER).replace("_RENDER", _RENDER).replace("_AFTER_RENDER", _AFTER_RENDER),
      defines: {
        SAMPLER_TYPE: sampler,
        COLORMAP_FUNCTION: colormap || "viridis",
        NUM_PLANES: String(clippingPlanes.length || NUM_PLANES_DEFAULT)
      },
      modules: [newChannelsModule]
    });
  }
  finalizeState() {
    super.finalizeState();
    if (this.state.textures) {
      Object.values(this.state.textures).forEach((tex) => tex && tex.delete());
    }
  }
  updateState({
    props,
    oldProps,
    changeFlags
  }) {
    var _a2, _b2;
    if (changeFlags.extensionsChanged || props.colormap !== oldProps.colormap || props.renderingMode !== oldProps.renderingMode || props.clippingPlanes.length !== oldProps.clippingPlanes.length) {
      const {
        gl
      } = this.context;
      if (this.state.model) {
        this.state.model.delete();
      }
      this.setState({
        model: this._getModel(gl)
      });
    }
    if (props.channelData && ((_a2 = props == null ? void 0 : props.channelData) == null ? void 0 : _a2.data) !== ((_b2 = oldProps == null ? void 0 : oldProps.channelData) == null ? void 0 : _b2.data)) {
      this.loadTexture(props.channelData);
    }
  }
  _getModel(gl) {
    if (!gl) {
      return null;
    }
    return new _luma_gl_core__WEBPACK_IMPORTED_MODULE_26__["Model"](gl, __spreadProps(__spreadValues({}, this.getShaders()), {
      geometry: new _luma_gl_core__WEBPACK_IMPORTED_MODULE_26__["Geometry"]({
        drawMode: gl.TRIANGLE_STRIP,
        attributes: {
          positions: new Float32Array(CUBE_STRIP)
        }
      })
    }));
  }
  draw({
    uniforms
  }) {
    const {
      textures,
      model,
      scaleMatrix
    } = this.state;
    const {
      contrastLimits,
      colors,
      xSlice,
      ySlice,
      zSlice,
      modelMatrix,
      channelsVisible,
      domain,
      dtype,
      clippingPlanes,
      resolutionMatrix
    } = this.props;
    const {
      viewMatrix,
      viewMatrixInverse,
      projectionMatrix
    } = this.context.viewport;
    if (textures && model && scaleMatrix) {
      const paddedContrastLimits = padContrastLimits({
        contrastLimits,
        channelsVisible,
        domain,
        dtype
      });
      const paddedColors = padColors({
        colors,
        channelsVisible
      });
      const invertedScaleMatrix = scaleMatrix.clone().invert();
      const invertedResolutionMatrix = resolutionMatrix.clone().invert();
      const paddedClippingPlanes = padWithDefault(clippingPlanes.map((p) => p.clone().transform(invertedScaleMatrix).transform(invertedResolutionMatrix)), new _math_gl_culling__WEBPACK_IMPORTED_MODULE_31__["Plane"]([1, 0, 0]), clippingPlanes.length || NUM_PLANES_DEFAULT);
      const normals = paddedClippingPlanes.map((plane) => plane.normal).flat();
      const distances = paddedClippingPlanes.map((plane) => plane.distance);
      model.setUniforms(__spreadProps(__spreadValues(__spreadValues({}, uniforms), textures), {
        contrastLimits: paddedContrastLimits,
        colors: paddedColors,
        xSlice: new Float32Array(xSlice ? xSlice.map((i) => i / scaleMatrix[0] / resolutionMatrix[0]) : [0, 1]),
        ySlice: new Float32Array(ySlice ? ySlice.map((i) => i / scaleMatrix[5] / resolutionMatrix[5]) : [0, 1]),
        zSlice: new Float32Array(zSlice ? zSlice.map((i) => i / scaleMatrix[10] / resolutionMatrix[10]) : [0, 1]),
        eye_pos: new Float32Array([viewMatrixInverse[12], viewMatrixInverse[13], viewMatrixInverse[14]]),
        view: viewMatrix,
        proj: projectionMatrix,
        scale: scaleMatrix,
        resolution: resolutionMatrix,
        model: modelMatrix || new math_gl__WEBPACK_IMPORTED_MODULE_23__["Matrix4"](),
        normals,
        distances
      })).draw();
    }
  }
  loadTexture(channelData) {
    const textures = {
      volume0: null,
      volume1: null,
      volume2: null,
      volume3: null,
      volume4: null,
      volume5: null
    };
    if (this.state.textures) {
      Object.values(this.state.textures).forEach((tex) => tex && tex.delete());
    }
    if (channelData && Object.keys(channelData).length > 0 && channelData.data) {
      const {
        height,
        width,
        depth
      } = channelData;
      channelData.data.forEach((d, i) => {
        textures[`volume${i}`] = this.dataToTexture(d, width, height, depth);
      }, this);
      this.setState({
        textures,
        scaleMatrix: new math_gl__WEBPACK_IMPORTED_MODULE_23__["Matrix4"]().scale(this.props.physicalSizeScalingMatrix.transformPoint([width, height, depth]))
      });
    }
  }
  dataToTexture(data, width, height, depth) {
    var _a2, _b2;
    const attrs = getRenderingAttrs();
    const texture = new _luma_gl_core__WEBPACK_IMPORTED_MODULE_26__["Texture3D"](this.context.gl, {
      width,
      height,
      depth,
      data: (_b2 = (_a2 = attrs.cast) == null ? void 0 : _a2.call(attrs, data)) != null ? _b2 : data,
      format: attrs.dataFormat,
      dataFormat: attrs.format,
      type: attrs.type,
      mipmaps: false,
      parameters: {
        [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].TEXTURE_MIN_FILTER]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].LINEAR,
        [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].TEXTURE_MAG_FILTER]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].LINEAR,
        [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].TEXTURE_WRAP_S]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].CLAMP_TO_EDGE,
        [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].TEXTURE_WRAP_T]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].CLAMP_TO_EDGE,
        [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].TEXTURE_WRAP_R]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].CLAMP_TO_EDGE
      }
    });
    return texture;
  }
};
XR3DLayer.layerName = "XR3DLayer";
XR3DLayer.defaultProps = defaultProps$1;
function getVolume(_0) {
  return __async(this, arguments, function* ({
    source,
    selection,
    onUpdate = () => {
    },
    downsampleDepth = 1,
    signal
  }) {
    const {
      shape,
      labels,
      dtype
    } = source;
    const {
      height,
      width
    } = getImageSize(source);
    const depth = shape[labels.indexOf("z")];
    const depthDownsampled = Math.max(1, Math.floor(depth / downsampleDepth));
    const rasterSize = height * width;
    const name2 = `${dtype}Array`;
    const TypedArray = globalThis[name2];
    const volumeData = new TypedArray(rasterSize * depthDownsampled);
    yield Promise.all(new Array(depthDownsampled).fill(0).map((_, z) => __async(this, null, function* () {
      const depthSelection = __spreadProps(__spreadValues({}, selection), {
        z: z * downsampleDepth
      });
      const {
        data: rasterData
      } = yield source.getRaster({
        selection: depthSelection,
        signal
      });
      let r = 0;
      onUpdate();
      while (r < rasterSize) {
        const volIndex = z * rasterSize + (rasterSize - r - 1);
        const rasterIndex = (width - r - 1) % width + width * Math.floor(r / width);
        volumeData[volIndex] = rasterData[rasterIndex];
        r += 1;
      }
      onUpdate();
    })));
    return {
      data: volumeData,
      height,
      width,
      depth: depthDownsampled
    };
  });
}
var getTextLayer = (text, viewport, id) => {
  return new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["TextLayer"]({
    id: `text-${id}`,
    coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["COORDINATE_SYSTEM"].CARTESIAN,
    data: [{
      text,
      position: viewport.position
    }],
    getColor: [220, 220, 220, 255],
    getSize: 25,
    sizeUnits: "meters",
    sizeScale: __pow(2, -viewport.zoom),
    fontFamily: "Helvetica"
  });
};
var defaultProps = {
  pickable: false,
  coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["COORDINATE_SYSTEM"].CARTESIAN,
  contrastLimits: {
    type: "array",
    value: [],
    compare: true
  },
  channelsVisible: {
    type: "array",
    value: [],
    compare: true
  },
  colors: {
    type: "array",
    value: [],
    compare: true
  },
  colormap: {
    type: "string",
    value: "",
    compare: true
  },
  selections: {
    type: "array",
    value: [],
    compare: true
  },
  resolution: {
    type: "number",
    value: 0,
    compare: true
  },
  domain: {
    type: "array",
    value: [],
    compare: true
  },
  loader: {
    type: "object",
    value: [{
      getRaster: () => __async(void 0, null, function* () {
        return {
          data: [],
          height: 0,
          width: 0
        };
      }),
      dtype: "Uint16",
      shape: [1],
      labels: ["z"]
    }],
    compare: true
  },
  xSlice: {
    type: "array",
    value: null,
    compare: true
  },
  ySlice: {
    type: "array",
    value: null,
    compare: true
  },
  zSlice: {
    type: "array",
    value: null,
    compare: true
  },
  clippingPlanes: {
    type: "array",
    value: [],
    compare: true
  },
  renderingMode: {
    type: "string",
    value: RENDERING_MODES.MAX_INTENSITY_PROJECTION,
    compare: true
  },
  onUpdate: {
    type: "function",
    value: () => {
    },
    compare: true
  },
  useProgressIndicator: {
    type: "boolean",
    value: true,
    compare: true
  },
  useWebGL1Warning: {
    type: "boolean",
    value: true,
    compare: true
  }
};
var VolumeLayer = class extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["CompositeLayer"] {
  clearState() {
    this.setState({
      height: null,
      width: null,
      depth: null,
      data: null,
      physicalSizeScalingMatrix: null,
      resolutionMatrix: null,
      progress: 0,
      abortController: null
    });
  }
  finalizeState() {
    this.state.abortController.abort();
  }
  updateState({
    oldProps,
    props
  }) {
    const loaderChanged = props.loader !== oldProps.loader;
    const resolutionChanged = props.resolution !== oldProps.resolution;
    const selectionsChanged = props.selections !== oldProps.selections;
    if (resolutionChanged) {
      this.clearState();
    }
    if (loaderChanged || selectionsChanged || resolutionChanged) {
      const {
        loader,
        selections = [],
        resolution,
        onViewportLoad
      } = this.props;
      const source = loader[resolution];
      let progress = 0;
      const totalRequests = (source.shape[source.labels.indexOf("z")] >> resolution) * selections.length;
      const onUpdate = () => {
        progress += 0.5 / totalRequests;
        if (this.props.onUpdate) {
          this.props.onUpdate({
            progress
          });
        }
        this.setState({
          progress
        });
      };
      const abortController = new AbortController();
      this.setState({
        abortController
      });
      const {
        signal
      } = abortController;
      const volumePromises = selections.map((selection) => getVolume({
        selection,
        source,
        onUpdate,
        downsampleDepth: __pow(2, resolution),
        signal
      }));
      const physicalSizeScalingMatrix = getPhysicalSizeScalingMatrix(loader[resolution]);
      Promise.all(volumePromises).then((volumes) => {
        if (onViewportLoad) {
          onViewportLoad(volumes);
        }
        const volume = {
          data: volumes.map((d) => d.data),
          width: volumes[0].width,
          height: volumes[0].height,
          depth: volumes[0].depth
        };
        this.setState(__spreadProps(__spreadValues({}, volume), {
          physicalSizeScalingMatrix,
          resolutionMatrix: new math_gl__WEBPACK_IMPORTED_MODULE_23__["Matrix4"]().scale(__pow(2, resolution))
        }));
      });
    }
  }
  renderLayers() {
    const {
      loader,
      id,
      resolution,
      useProgressIndicator,
      useWebGL1Warning
    } = this.props;
    const {
      dtype
    } = loader[resolution];
    const {
      data,
      width,
      height,
      depth,
      progress,
      physicalSizeScalingMatrix,
      resolutionMatrix
    } = this.state;
    const {
      gl
    } = this.context;
    if (!Object(_luma_gl_core__WEBPACK_IMPORTED_MODULE_26__["isWebGL2"])(gl) && useWebGL1Warning) {
      const {
        viewport
      } = this.context;
      return getTextLayer(["Volume rendering is only available on browsers that support WebGL2. If you", "are using Safari, you can turn on WebGL2 by navigating in the top menubar", "to check Develop > Experimental Features > WebGL 2.0 and then refreshing", "the page."].join("\n"), viewport, id);
    }
    if (!(width && height) && useProgressIndicator) {
      const {
        viewport
      } = this.context;
      return getTextLayer(`Loading Volume ${String((progress || 0) * 100).slice(0, 5)}%...`, viewport, id);
    }
    return new XR3DLayer(this.props, {
      channelData: {
        data,
        width,
        height,
        depth
      },
      id: `XR3DLayer-${0}-${height}-${width}-${0}-${resolution}-${id}`,
      physicalSizeScalingMatrix,
      parameters: {
        [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].CULL_FACE]: true,
        [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].CULL_FACE_MODE]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].FRONT,
        [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].DEPTH_TEST]: false,
        blendFunc: [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].SRC_ALPHA, _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].ONE],
        blend: true
      },
      resolutionMatrix,
      dtype
    });
  }
};
VolumeLayer.layerName = "VolumeLayer";
VolumeLayer.defaultProps = defaultProps;
var VIV_PROXY_KEY = "__viv";
var OFFSETS_PROXY_KEY = `${VIV_PROXY_KEY}-offsets`;
function checkProxies(tiff) {
  if (!isProxy(tiff, OFFSETS_PROXY_KEY)) {
    console.warn("GeoTIFF source is missing offsets proxy.");
  }
}
function isProxy(tiff, proxyFlag) {
  return tiff[proxyFlag];
}
function createOffsetsProxy(tiff, offsets) {
  const get = (target, key) => {
    if (key === "getImage") {
      return (index) => {
        if (!(index in target.ifdRequests) && index in offsets) {
          const offset = offsets[index];
          target.ifdRequests[index] = target.parseFileDirectoryAt(offset);
        }
        return target.getImage(index);
      };
    }
    if (key === OFFSETS_PROXY_KEY) {
      return true;
    }
    return Reflect.get(target, key);
  };
  return new Proxy(tiff, {
    get
  });
}
var encodedJs = "";
var blob = typeof window !== "undefined" && window.Blob && new Blob([atob(encodedJs)], { type: "text/javascript;charset=utf-8" });
function WorkerWrapper() {
  const objURL = blob && (window.URL || window.webkitURL).createObjectURL(blob);
  try {
    return objURL ? new Worker(objURL) : new Worker("data:application/javascript;base64," + encodedJs, { type: "module" });
  } finally {
    objURL && (window.URL || window.webkitURL).revokeObjectURL(objURL);
  }
}
var _a, _b;
var defaultPoolSize = (_b = (_a = globalThis == null ? void 0 : globalThis.navigator) == null ? void 0 : _a.hardwareConcurrency) != null ? _b : 4;
var Pool = class {
  constructor(size = defaultPoolSize) {
    __publicField(this, "workers");
    __publicField(this, "idleWorkers");
    __publicField(this, "waitQueue");
    __publicField(this, "decoder");
    this.workers = [];
    this.idleWorkers = [];
    this.waitQueue = [];
    this.decoder = null;
    for (let i = 0; i < size; ++i) {
      const w = new WorkerWrapper();
      this.workers.push(w);
      this.idleWorkers.push(w);
    }
  }
  decode(fileDirectory, buffer) {
    return __async(this, null, function* () {
      const currentWorker = yield this.waitForWorker();
      return new Promise((resolve, reject) => {
        currentWorker.onmessage = (event) => {
          this.finishTask(currentWorker);
          resolve(event.data);
        };
        currentWorker.onerror = (error) => {
          this.finishTask(currentWorker);
          reject(error);
        };
        currentWorker.postMessage(["decode", fileDirectory, buffer], [buffer]);
      });
    });
  }
  waitForWorker() {
    return __async(this, null, function* () {
      const idleWorker = this.idleWorkers.pop();
      if (idleWorker) {
        return idleWorker;
      }
      const waiter = {};
      const promise = new Promise((resolve) => {
        waiter.resolve = resolve;
      });
      this.waitQueue.push(waiter);
      return promise;
    });
  }
  finishTask(currentWorker) {
    return __async(this, null, function* () {
      const waiter = this.waitQueue.pop();
      if (waiter) {
        waiter.resolve(currentWorker);
      } else {
        this.idleWorkers.push(currentWorker);
      }
    });
  }
  destroy() {
    for (let i = 0; i < this.workers.length; ++i) {
      this.workers[i].terminate();
    }
  }
};
var PARSER_OPTIONS = {
  attributeNamePrefix: "",
  attrNodeName: "attr",
  parseNodeValue: true,
  parseAttributeValue: true,
  ignoreAttributes: false
};
var parse = (str) => fast_xml_parser__WEBPACK_IMPORTED_MODULE_35___default.a.parse(str, PARSER_OPTIONS);
function fromString(str) {
  const res = parse(str);
  if (!res.OME) {
    throw Error("Failed to parse OME-XML metadata.");
  }
  return ensureArray(res.OME.Image).map((img) => {
    const Channels = ensureArray(img.Pixels.Channel).map((c) => {
      if ("Color" in c.attr) {
        return __spreadProps(__spreadValues({}, c.attr), {
          Color: intToRgba(c.attr.Color)
        });
      }
      return __spreadValues({}, c.attr);
    });
    const {
      AquisitionDate = "",
      Description: Description2 = ""
    } = img;
    const image = __spreadProps(__spreadValues({}, img.attr), {
      AquisitionDate,
      Description: Description2,
      Pixels: __spreadProps(__spreadValues({}, img.Pixels.attr), {
        Channels
      })
    });
    return __spreadProps(__spreadValues({}, image), {
      format() {
        const {
          Pixels
        } = image;
        const sizes = ["X", "Y", "Z"].map((name2) => {
          const size = Pixels[`PhysicalSize${name2}`];
          const unit2 = Pixels[`PhysicalSize${name2}Unit`];
          return size && unit2 ? `${size} ${unit2}` : "-";
        }).join(" x ");
        return {
          "Acquisition Date": image.AquisitionDate,
          "Dimensions (XY)": `${Pixels.SizeX} x ${Pixels.SizeY}`,
          "Pixels Type": Pixels.Type,
          "Pixels Size (XYZ)": sizes,
          "Z-sections/Timepoints": `${Pixels.SizeZ} x ${Pixels.SizeT}`,
          Channels: Pixels.SizeC
        };
      }
    });
  });
}
var TiffPixelSource = class {
  constructor(indexer, dtype, tileSize, shape, labels, meta, pool) {
    __publicField(this, "_indexer");
    this.dtype = dtype;
    this.tileSize = tileSize;
    this.shape = shape;
    this.labels = labels;
    this.meta = meta;
    this.pool = pool;
    this._indexer = indexer;
  }
  getRaster(_0) {
    return __async(this, arguments, function* ({
      selection,
      signal
    }) {
      const image = yield this._indexer(selection);
      return this._readRasters(image, {
        signal
      });
    });
  }
  getTile(_0) {
    return __async(this, arguments, function* ({
      x,
      y,
      selection,
      signal
    }) {
      const {
        height,
        width
      } = this._getTileExtent(x, y);
      const x0 = x * this.tileSize;
      const y0 = y * this.tileSize;
      const window2 = [x0, y0, x0 + width, y0 + height];
      const image = yield this._indexer(selection);
      return this._readRasters(image, {
        window: window2,
        width,
        height,
        signal
      });
    });
  }
  _readRasters(image, props) {
    return __async(this, null, function* () {
      var _a2;
      const interleave = isInterleaved(this.shape);
      const raster = yield image.readRasters(__spreadProps(__spreadValues({
        interleave
      }, props), {
        pool: this.pool
      }));
      if ((_a2 = props == null ? void 0 : props.signal) == null ? void 0 : _a2.aborted) {
        throw SIGNAL_ABORTED;
      }
      const data = interleave ? raster : raster[0];
      return {
        data,
        width: raster.width,
        height: raster.height
      };
    });
  }
  _getTileExtent(x, y) {
    const {
      height: zoomLevelHeight,
      width: zoomLevelWidth
    } = getImageSize(this);
    let height = this.tileSize;
    let width = this.tileSize;
    const maxXTileCoord = Math.floor(zoomLevelWidth / this.tileSize);
    const maxYTileCoord = Math.floor(zoomLevelHeight / this.tileSize);
    if (x === maxXTileCoord) {
      width = zoomLevelWidth % this.tileSize;
    }
    if (y === maxYTileCoord) {
      height = zoomLevelHeight % this.tileSize;
    }
    return {
      height,
      width
    };
  }
  onTileError(err) {
    console.error(err);
  }
};
function getOmeLegacyIndexer(tiff, rootMeta) {
  const imgMeta = rootMeta[0];
  const {
    SizeT,
    SizeC,
    SizeZ
  } = imgMeta.Pixels;
  const ifdIndexer = getOmeIFDIndexer(imgMeta);
  return (sel, pyramidLevel) => {
    const index = ifdIndexer(sel);
    const pyramidIndex = pyramidLevel * SizeZ * SizeT * SizeC;
    return tiff.getImage(index + pyramidIndex);
  };
}
function getOmeSubIFDIndexer(tiff, rootMeta) {
  const imgMeta = rootMeta[0];
  const ifdIndexer = getOmeIFDIndexer(imgMeta);
  const ifdCache = new Map();
  return (sel, pyramidLevel) => __async(this, null, function* () {
    const index = ifdIndexer(sel);
    const baseImage = yield tiff.getImage(index);
    if (pyramidLevel === 0) {
      return baseImage;
    }
    const {
      SubIFDs
    } = baseImage.fileDirectory;
    if (!SubIFDs) {
      throw Error("Indexing Error: OME-TIFF is missing SubIFDs.");
    }
    const key = `${sel.t}-${sel.c}-${sel.z}-${pyramidLevel}`;
    if (!ifdCache.has(key)) {
      const subIfdOffset = SubIFDs[pyramidLevel - 1];
      ifdCache.set(key, tiff.parseFileDirectoryAt(subIfdOffset));
    }
    const ifd = yield ifdCache.get(key);
    return new baseImage.constructor(ifd.fileDirectory, ifd.geoKeyDirectory, tiff.dataView, tiff.littleEndian, tiff.cache, tiff.source);
  });
}
function getOmeIFDIndexer(imgMeta) {
  const {
    SizeC,
    SizeZ,
    SizeT,
    DimensionOrder
  } = imgMeta.Pixels;
  switch (DimensionOrder) {
    case "XYZCT": {
      return ({
        t,
        c,
        z
      }) => t * SizeZ * SizeC + c * SizeZ + z;
    }
    case "XYZTC": {
      return ({
        t,
        c,
        z
      }) => c * SizeZ * SizeT + t * SizeZ + z;
    }
    case "XYCTZ": {
      return ({
        t,
        c,
        z
      }) => z * SizeC * SizeT + t * SizeC + c;
    }
    case "XYCZT": {
      return ({
        t,
        c,
        z
      }) => t * SizeC * SizeZ + z * SizeC + c;
    }
    case "XYTCZ": {
      return ({
        t,
        c,
        z
      }) => z * SizeT * SizeC + c * SizeT + t;
    }
    case "XYTZC": {
      return ({
        t,
        c,
        z
      }) => c * SizeT * SizeZ + z * SizeT + t;
    }
    default: {
      throw new Error(`Invalid OME-XML DimensionOrder, got ${DimensionOrder}.`);
    }
  }
}
var DTYPE_LOOKUP$1 = {
  uint8: "Uint8",
  uint16: "Uint16",
  uint32: "Uint32",
  float: "Float32",
  double: "Float64",
  int8: "Int8",
  int16: "Int16",
  int32: "Int32"
};
function getOmePixelSourceMeta({
  Pixels
}) {
  const labels = getLabels(Pixels.DimensionOrder);
  const dims = getDims(labels);
  const shape = Array(labels.length).fill(0);
  shape[dims("t")] = Pixels.SizeT;
  shape[dims("c")] = Pixels.SizeC;
  shape[dims("z")] = Pixels.SizeZ;
  if (Pixels.Interleaved) {
    labels.push("_c");
    shape.push(3);
  }
  const getShape = (level) => {
    const s = [...shape];
    s[dims("x")] = Pixels.SizeX >> level;
    s[dims("y")] = Pixels.SizeY >> level;
    return s;
  };
  if (!(Pixels.Type in DTYPE_LOOKUP$1)) {
    throw Error(`Pixel type ${Pixels.Type} not supported.`);
  }
  const dtype = DTYPE_LOOKUP$1[Pixels.Type];
  if (Pixels.PhysicalSizeX && Pixels.PhysicalSizeY) {
    const physicalSizes = {
      x: {
        size: Pixels.PhysicalSizeX,
        unit: Pixels.PhysicalSizeXUnit
      },
      y: {
        size: Pixels.PhysicalSizeY,
        unit: Pixels.PhysicalSizeYUnit
      }
    };
    if (Pixels.PhysicalSizeZ) {
      physicalSizes.z = {
        size: Pixels.PhysicalSizeZ,
        unit: Pixels.PhysicalSizeZUnit
      };
    }
    return {
      labels,
      getShape,
      physicalSizes,
      dtype
    };
  }
  return {
    labels,
    getShape,
    dtype
  };
}
function guessTileSize$1(image) {
  const tileWidth = image.getTileWidth();
  const tileHeight = image.getTileHeight();
  const size = Math.min(tileWidth, tileHeight);
  return prevPowerOf2(size);
}
function load$2(tiff, pool) {
  return __async(this, null, function* () {
    const firstImage = yield tiff.getImage(0);
    const {
      ImageDescription,
      SubIFDs,
      PhotometricInterpretation: photometricInterpretation
    } = firstImage.fileDirectory;
    const omexml = fromString(ImageDescription);
    let levels;
    let pyramidIndexer;
    if (SubIFDs) {
      levels = SubIFDs.length + 1;
      pyramidIndexer = getOmeSubIFDIndexer(tiff, omexml);
    } else {
      levels = omexml.length;
      pyramidIndexer = getOmeLegacyIndexer(tiff, omexml);
    }
    const imgMeta = omexml[0];
    const {
      labels,
      getShape,
      physicalSizes,
      dtype
    } = getOmePixelSourceMeta(imgMeta);
    const tileSize = guessTileSize$1(firstImage);
    const meta = {
      photometricInterpretation,
      physicalSizes
    };
    const data = Array.from({
      length: levels
    }).map((_, resolution) => {
      const shape = getShape(resolution);
      const indexer = (sel) => pyramidIndexer(sel, resolution);
      const source = new TiffPixelSource(indexer, dtype, tileSize, shape, labels, meta, pool);
      return source;
    });
    return {
      data,
      metadata: imgMeta
    };
  });
}
function loadOmeTiff(_0) {
  return __async(this, arguments, function* (source, opts = {}) {
    const {
      headers,
      offsets,
      pool = true
    } = opts;
    let tiff;
    if (typeof source === "string") {
      tiff = yield Object(geotiff__WEBPACK_IMPORTED_MODULE_34__["fromUrl"])(source, __spreadProps(__spreadValues({}, headers), {
        cacheSize: Infinity
      }));
    } else {
      tiff = yield Object(geotiff__WEBPACK_IMPORTED_MODULE_34__["fromBlob"])(source);
    }
    if (offsets) {
      tiff = createOffsetsProxy(tiff, offsets);
    }
    checkProxies(tiff);
    return pool ? load$2(tiff, new Pool()) : load$2(tiff);
  });
}
function loadMultiscales(store, path = "") {
  return __async(this, null, function* () {
    const grp = yield Object(zarr__WEBPACK_IMPORTED_MODULE_36__["openGroup"])(store, path);
    const rootAttrs = yield grp.attrs.asObject();
    let paths = ["0"];
    let labels = ["t", "c", "z", "y", "x"];
    if ("multiscales" in rootAttrs) {
      const {
        datasets,
        axes
      } = rootAttrs.multiscales[0];
      paths = datasets.map((d) => d.path);
      if (axes) {
        labels = axes;
      }
    }
    const data = paths.map((path2) => grp.getItem(path2));
    return {
      data: yield Promise.all(data),
      rootAttrs,
      labels
    };
  });
}
function guessTileSize(arr) {
  const interleaved = isInterleaved(arr.shape);
  const [yChunk, xChunk] = arr.chunks.slice(interleaved ? -3 : -2);
  const size = Math.min(yChunk, xChunk);
  return prevPowerOf2(size);
}
function getIndexer(labels) {
  const size = labels.length;
  const dims = getDims(labels);
  return (sel) => {
    if (Array.isArray(sel)) {
      return [...sel];
    }
    const selection = Array(size).fill(0);
    for (const [key, value] of Object.entries(sel)) {
      selection[dims(key)] = value;
    }
    return selection;
  };
}
var DTYPE_LOOKUP = {
  u1: "Uint8",
  u2: "Uint16",
  u4: "Uint32",
  f4: "Float32",
  f8: "Float64",
  i1: "Int8",
  i2: "Int16",
  i4: "Int32"
};
var ZarrPixelSource = class {
  constructor(data, labels, tileSize) {
    __publicField(this, "_data");
    __publicField(this, "_indexer");
    __publicField(this, "_readChunks");
    this.labels = labels;
    this.tileSize = tileSize;
    this._indexer = getIndexer(labels);
    this._data = data;
    const xChunkSize = data.chunks[this._xIndex];
    const yChunkSize = data.chunks[this._xIndex - 1];
    this._readChunks = tileSize === xChunkSize && tileSize === yChunkSize;
  }
  get shape() {
    return this._data.shape;
  }
  get dtype() {
    const suffix = this._data.dtype.slice(1);
    if (!(suffix in DTYPE_LOOKUP)) {
      throw Error(`Zarr dtype not supported, got ${suffix}.`);
    }
    return DTYPE_LOOKUP[suffix];
  }
  get _xIndex() {
    const interleave = isInterleaved(this._data.shape);
    return this._data.shape.length - (interleave ? 2 : 1);
  }
  _chunkIndex(selection, x, y) {
    const sel = this._indexer(selection);
    sel[this._xIndex] = x;
    sel[this._xIndex - 1] = y;
    return sel;
  }
  _getSlices(x, y) {
    const {
      height,
      width
    } = getImageSize(this);
    const [xStart, xStop] = [x * this.tileSize, Math.min((x + 1) * this.tileSize, width)];
    const [yStart, yStop] = [y * this.tileSize, Math.min((y + 1) * this.tileSize, height)];
    if (xStart === xStop || yStart === yStop) {
      throw new zarr__WEBPACK_IMPORTED_MODULE_36__["BoundsCheckError"]("Tile slice is zero-sized.");
    }
    return [Object(zarr__WEBPACK_IMPORTED_MODULE_36__["slice"])(xStart, xStop), Object(zarr__WEBPACK_IMPORTED_MODULE_36__["slice"])(yStart, yStop)];
  }
  getRaster(_0) {
    return __async(this, arguments, function* ({
      selection
    }) {
      const sel = this._chunkIndex(selection, null, null);
      const {
        data,
        shape
      } = yield this._data.getRaw(sel);
      const [height, width] = shape;
      return {
        data,
        width,
        height
      };
    });
  }
  getTile(props) {
    return __async(this, null, function* () {
      const {
        x,
        y,
        selection,
        signal
      } = props;
      let res;
      if (this._readChunks) {
        const sel = this._chunkIndex(selection, x, y);
        res = yield this._data.getRawChunk(sel, {
          storeOptions: {
            signal
          }
        });
      } else {
        const [xSlice, ySlice] = this._getSlices(x, y);
        const sel = this._chunkIndex(selection, xSlice, ySlice);
        res = yield this._data.getRaw(sel);
      }
      const {
        data,
        shape: [height, width]
      } = res;
      return {
        data,
        width,
        height
      };
    });
  }
  onTileError(err) {
    if (!(err instanceof zarr__WEBPACK_IMPORTED_MODULE_36__["BoundsCheckError"])) {
      throw err;
    }
  }
};
function load(store) {
  return __async(this, null, function* () {
    const {
      data,
      rootAttrs,
      labels
    } = yield loadMultiscales(store);
    const tileSize = guessTileSize(data[0]);
    const pyramid = data.map((arr) => new ZarrPixelSource(arr, labels, tileSize));
    return {
      data: pyramid,
      metadata: rootAttrs
    };
  });
}
function loadOmeZarr(_0) {
  return __async(this, arguments, function* (source, options = {}) {
    const store = new zarr__WEBPACK_IMPORTED_MODULE_36__["HTTPStore"](source, options);
    if ((options == null ? void 0 : options.type) !== "multiscales") {
      throw Error("Only multiscale OME-Zarr is supported.");
    }
    return load(store);
  });
}

// src/components/spatial/constants.js
var GLOBAL_LABELS = ["z", "t"];
var DEFAULT_RASTER_DOMAIN_TYPE = "Min/Max";
var DEFAULT_RASTER_LAYER_PROPS = {
  visible: true,
  colormap: null,
  opacity: 1,
  domainType: DEFAULT_RASTER_DOMAIN_TYPE,
  transparentColor: [0, 0, 0],
  renderingMode: RENDERING_MODES.ADDITIVE,
  use3d: false
};
var DEFAULT_MOLECULES_LAYER = {
  opacity: 1,
  radius: 20,
  visible: true
};
var DEFAULT_CELLS_LAYER = {
  opacity: 1,
  radius: 50,
  visible: true,
  stroked: false
};
var DEFAULT_NEIGHBORHOODS_LAYER = {
  visible: false
};

// src/app/constants.js
var Component = {
  DESCRIPTION: "description",
  STATUS: "status",
  GENES: "genes",
  CELL_SETS: "cellSets",
  SCATTERPLOT: "scatterplot",
  SPATIAL: "spatial",
  HEATMAP: "heatmap",
  LAYER_CONTROLLER: "layerController",
  CELL_SET_SIZES: "cellSetSizes",
  GENOMIC_PROFILES: "genomicProfiles",
  CELL_SET_EXPRESSION: "cellSetExpression",
  EXPRESSION_HISTOGRAM: "expressionHistogram"
};
var DataType = {
  CELLS: "cells",
  CELL_SETS: "cell-sets",
  EXPRESSION_MATRIX: "expression-matrix",
  GENOMIC_PROFILES: "genomic-profiles",
  MOLECULES: "molecules",
  NEIGHBORHOODS: "neighborhoods",
  RASTER: "raster"
};
var FileType = {
  CELLS_JSON: "cells.json",
  CELL_SETS_JSON: "cell-sets.json",
  EXPRESSION_MATRIX_ZARR: "expression-matrix.zarr",
  GENOMIC_PROFILES_ZARR: "genomic-profiles.zarr",
  MOLECULES_JSON: "molecules.json",
  NEIGHBORHOODS_JSON: "neighborhoods.json",
  RASTER_JSON: "raster.json",
  RASTER_OME_ZARR: "raster.ome-zarr",
  CLUSTERS_JSON: "clusters.json",
  GENES_JSON: "genes.json",
  ANNDATA_CELL_SETS_ZARR: "anndata-cell-sets.zarr",
  ANNDATA_CELLS_ZARR: "anndata-cells.zarr",
  ANNDATA_EXPRESSION_MATRIX_ZARR: "anndata-expression-matrix.zarr"
};
var CoordinationType = {
  DATASET: "dataset",
  EMBEDDING_TYPE: "embeddingType",
  EMBEDDING_ZOOM: "embeddingZoom",
  EMBEDDING_ROTATION: "embeddingRotation",
  EMBEDDING_TARGET_X: "embeddingTargetX",
  EMBEDDING_TARGET_Y: "embeddingTargetY",
  EMBEDDING_TARGET_Z: "embeddingTargetZ",
  EMBEDDING_CELL_SET_POLYGONS_VISIBLE: "embeddingCellSetPolygonsVisible",
  EMBEDDING_CELL_SET_LABELS_VISIBLE: "embeddingCellSetLabelsVisible",
  EMBEDDING_CELL_SET_LABEL_SIZE: "embeddingCellSetLabelSize",
  EMBEDDING_CELL_RADIUS: "embeddingCellRadius",
  EMBEDDING_CELL_RADIUS_MODE: "embeddingCellRadiusMode",
  EMBEDDING_CELL_OPACITY: "embeddingCellOpacity",
  EMBEDDING_CELL_OPACITY_MODE: "embeddingCellOpacityMode",
  SPATIAL_ZOOM: "spatialZoom",
  SPATIAL_ROTATION: "spatialRotation",
  SPATIAL_TARGET_X: "spatialTargetX",
  SPATIAL_TARGET_Y: "spatialTargetY",
  SPATIAL_TARGET_Z: "spatialTargetZ",
  SPATIAL_ROTATION_X: "spatialRotationX",
  SPATIAL_ROTATION_Y: "spatialRotationY",
  SPATIAL_ROTATION_Z: "spatialRotationZ",
  SPATIAL_ROTATION_ORBIT: "spatialRotationOrbit",
  SPATIAL_ORBIT_AXIS: "spatialOrbitAxis",
  SPATIAL_AXIS_FIXED: "spatialAxisFixed",
  HEATMAP_ZOOM_X: "heatmapZoomX",
  HEATMAP_ZOOM_Y: "heatmapZoomY",
  HEATMAP_TARGET_X: "heatmapTargetX",
  HEATMAP_TARGET_Y: "heatmapTargetY",
  CELL_FILTER: "cellFilter",
  CELL_HIGHLIGHT: "cellHighlight",
  CELL_SET_SELECTION: "cellSetSelection",
  CELL_SET_HIGHLIGHT: "cellSetHighlight",
  CELL_SET_COLOR: "cellSetColor",
  GENE_FILTER: "geneFilter",
  GENE_HIGHLIGHT: "geneHighlight",
  GENE_SELECTION: "geneSelection",
  GENE_EXPRESSION_COLORMAP: "geneExpressionColormap",
  GENE_EXPRESSION_TRANSFORM: "geneExpressionTransform",
  GENE_EXPRESSION_COLORMAP_RANGE: "geneExpressionColormapRange",
  CELL_COLOR_ENCODING: "cellColorEncoding",
  SPATIAL_RASTER_LAYERS: "spatialRasterLayers",
  SPATIAL_CELLS_LAYER: "spatialCellsLayer",
  SPATIAL_MOLECULES_LAYER: "spatialMoleculesLayer",
  SPATIAL_NEIGHBORHOODS_LAYER: "spatialNeighborhoodsLayer",
  GENOMIC_ZOOM_X: "genomicZoomX",
  GENOMIC_ZOOM_Y: "genomicZoomY",
  GENOMIC_TARGET_X: "genomicTargetX",
  GENOMIC_TARGET_Y: "genomicTargetY",
  ADDITIONAL_CELL_SETS: "additionalCellSets",
  MOLECULE_HIGHLIGHT: "moleculeHighlight"
};

// src/app/state/coordination.js
var DEFAULT_COORDINATION_VALUES = {
  [CoordinationType.EMBEDDING_ZOOM]: null,
  [CoordinationType.EMBEDDING_ROTATION]: 0,
  [CoordinationType.EMBEDDING_TARGET_X]: null,
  [CoordinationType.EMBEDDING_TARGET_Y]: null,
  [CoordinationType.EMBEDDING_TARGET_Z]: 0,
  [CoordinationType.EMBEDDING_CELL_SET_POLYGONS_VISIBLE]: false,
  [CoordinationType.EMBEDDING_CELL_SET_LABELS_VISIBLE]: false,
  [CoordinationType.EMBEDDING_CELL_SET_LABEL_SIZE]: 14,
  [CoordinationType.EMBEDDING_CELL_RADIUS]: 1,
  [CoordinationType.EMBEDDING_CELL_RADIUS_MODE]: "auto",
  [CoordinationType.EMBEDDING_CELL_OPACITY]: 1,
  [CoordinationType.EMBEDDING_CELL_OPACITY_MODE]: "auto",
  [CoordinationType.SPATIAL_ZOOM]: null,
  [CoordinationType.SPATIAL_ROTATION]: 0,
  [CoordinationType.SPATIAL_TARGET_X]: null,
  [CoordinationType.SPATIAL_TARGET_Y]: null,
  [CoordinationType.SPATIAL_TARGET_Z]: null,
  [CoordinationType.SPATIAL_ROTATION_X]: null,
  [CoordinationType.SPATIAL_ROTATION_Y]: null,
  [CoordinationType.SPATIAL_ROTATION_Z]: null,
  [CoordinationType.SPATIAL_AXIS_FIXED]: false,
  [CoordinationType.SPATIAL_ROTATION_ORBIT]: 0,
  [CoordinationType.SPATIAL_ORBIT_AXIS]: "Y",
  [CoordinationType.SPATIAL_RASTER_LAYERS]: null,
  [CoordinationType.SPATIAL_CELLS_LAYER]: null,
  [CoordinationType.SPATIAL_MOLECULES_LAYER]: null,
  [CoordinationType.SPATIAL_NEIGHBORHOODS_LAYER]: null,
  [CoordinationType.HEATMAP_ZOOM_X]: 0,
  [CoordinationType.HEATMAP_ZOOM_Y]: 0,
  [CoordinationType.HEATMAP_TARGET_X]: 0,
  [CoordinationType.HEATMAP_TARGET_Y]: 0,
  [CoordinationType.GENE_EXPRESSION_COLORMAP]: "plasma",
  [CoordinationType.GENE_EXPRESSION_COLORMAP_RANGE]: [0, 1],
  [CoordinationType.GENE_EXPRESSION_TRANSFORM]: null,
  [CoordinationType.GENE_FILTER]: null,
  [CoordinationType.GENE_HIGHLIGHT]: null,
  [CoordinationType.GENE_SELECTION]: null,
  [CoordinationType.CELL_FILTER]: null,
  [CoordinationType.CELL_HIGHLIGHT]: null,
  [CoordinationType.CELL_SET_SELECTION]: null,
  [CoordinationType.CELL_SET_HIGHLIGHT]: null,
  [CoordinationType.CELL_SET_COLOR]: null,
  [CoordinationType.CELL_COLOR_ENCODING]: "cellSetSelection",
  [CoordinationType.GENOMIC_ZOOM_X]: 0,
  [CoordinationType.GENOMIC_ZOOM_Y]: 0,
  [CoordinationType.GENOMIC_TARGET_X]: 15499999995e-1,
  [CoordinationType.GENOMIC_TARGET_Y]: 15499999995e-1,
  [CoordinationType.ADDITIONAL_CELL_SETS]: null,
  [CoordinationType.MOLECULE_HIGHLIGHT]: null
};
var AUTO_INDEPENDENT_COORDINATION_TYPES = [
  CoordinationType.HEATMAP_ZOOM_X,
  CoordinationType.HEATMAP_ZOOM_Y,
  CoordinationType.HEATMAP_TARGET_X,
  CoordinationType.HEATMAP_TARGET_Y,
  CoordinationType.EMBEDDING_ZOOM,
  CoordinationType.EMBEDDING_TARGET_X,
  CoordinationType.EMBEDDING_TARGET_Y,
  CoordinationType.EMBEDDING_TARGET_Z,
  CoordinationType.EMBEDDING_CELL_SET_POLYGONS_VISIBLE,
  CoordinationType.EMBEDDING_CELL_SET_LABELS_VISIBLE,
  CoordinationType.EMBEDDING_CELL_SET_LABEL_SIZE,
  CoordinationType.EMBEDDING_CELL_RADIUS,
  CoordinationType.EMBEDDING_CELL_OPACITY
];
var COMPONENT_COORDINATION_TYPES = {
  [Component.SCATTERPLOT]: [
    CoordinationType.DATASET,
    CoordinationType.EMBEDDING_TYPE,
    CoordinationType.EMBEDDING_ZOOM,
    CoordinationType.EMBEDDING_ROTATION,
    CoordinationType.EMBEDDING_TARGET_X,
    CoordinationType.EMBEDDING_TARGET_Y,
    CoordinationType.EMBEDDING_TARGET_Z,
    CoordinationType.EMBEDDING_CELL_SET_POLYGONS_VISIBLE,
    CoordinationType.EMBEDDING_CELL_SET_LABELS_VISIBLE,
    CoordinationType.EMBEDDING_CELL_SET_LABEL_SIZE,
    CoordinationType.EMBEDDING_CELL_RADIUS,
    CoordinationType.EMBEDDING_CELL_RADIUS_MODE,
    CoordinationType.EMBEDDING_CELL_OPACITY,
    CoordinationType.EMBEDDING_CELL_OPACITY_MODE,
    CoordinationType.CELL_FILTER,
    CoordinationType.CELL_HIGHLIGHT,
    CoordinationType.CELL_SET_SELECTION,
    CoordinationType.CELL_SET_HIGHLIGHT,
    CoordinationType.CELL_SET_COLOR,
    CoordinationType.GENE_HIGHLIGHT,
    CoordinationType.GENE_SELECTION,
    CoordinationType.GENE_EXPRESSION_COLORMAP,
    CoordinationType.GENE_EXPRESSION_COLORMAP_RANGE,
    CoordinationType.CELL_COLOR_ENCODING,
    CoordinationType.ADDITIONAL_CELL_SETS
  ],
  [Component.SPATIAL]: [
    CoordinationType.DATASET,
    CoordinationType.SPATIAL_ZOOM,
    CoordinationType.SPATIAL_ROTATION,
    CoordinationType.SPATIAL_RASTER_LAYERS,
    CoordinationType.SPATIAL_CELLS_LAYER,
    CoordinationType.SPATIAL_MOLECULES_LAYER,
    CoordinationType.SPATIAL_NEIGHBORHOODS_LAYER,
    CoordinationType.SPATIAL_TARGET_X,
    CoordinationType.SPATIAL_TARGET_Y,
    CoordinationType.SPATIAL_TARGET_Z,
    CoordinationType.SPATIAL_ROTATION_X,
    CoordinationType.SPATIAL_ROTATION_Y,
    CoordinationType.SPATIAL_ROTATION_Z,
    CoordinationType.SPATIAL_ROTATION_ORBIT,
    CoordinationType.SPATIAL_ORBIT_AXIS,
    CoordinationType.SPATIAL_AXIS_FIXED,
    CoordinationType.CELL_FILTER,
    CoordinationType.CELL_HIGHLIGHT,
    CoordinationType.CELL_SET_SELECTION,
    CoordinationType.CELL_SET_HIGHLIGHT,
    CoordinationType.CELL_SET_COLOR,
    CoordinationType.GENE_HIGHLIGHT,
    CoordinationType.GENE_SELECTION,
    CoordinationType.GENE_EXPRESSION_COLORMAP,
    CoordinationType.GENE_EXPRESSION_COLORMAP_RANGE,
    CoordinationType.CELL_COLOR_ENCODING,
    CoordinationType.ADDITIONAL_CELL_SETS,
    CoordinationType.MOLECULE_HIGHLIGHT
  ],
  [Component.HEATMAP]: [
    CoordinationType.DATASET,
    CoordinationType.HEATMAP_ZOOM_X,
    CoordinationType.HEATMAP_ZOOM_Y,
    CoordinationType.HEATMAP_TARGET_X,
    CoordinationType.HEATMAP_TARGET_Y,
    CoordinationType.CELL_FILTER,
    CoordinationType.CELL_HIGHLIGHT,
    CoordinationType.CELL_SET_SELECTION,
    CoordinationType.CELL_SET_HIGHLIGHT,
    CoordinationType.CELL_SET_COLOR,
    CoordinationType.GENE_FILTER,
    CoordinationType.GENE_HIGHLIGHT,
    CoordinationType.GENE_SELECTION,
    CoordinationType.GENE_EXPRESSION_COLORMAP,
    CoordinationType.GENE_EXPRESSION_COLORMAP_RANGE,
    CoordinationType.CELL_COLOR_ENCODING,
    CoordinationType.ADDITIONAL_CELL_SETS
  ],
  [Component.CELL_SETS]: [
    CoordinationType.DATASET,
    CoordinationType.CELL_SET_SELECTION,
    CoordinationType.CELL_SET_HIGHLIGHT,
    CoordinationType.CELL_SET_COLOR,
    CoordinationType.CELL_COLOR_ENCODING,
    CoordinationType.ADDITIONAL_CELL_SETS,
    CoordinationType.GENE_SELECTION
  ],
  [Component.CELL_SET_SIZES]: [
    CoordinationType.DATASET,
    CoordinationType.CELL_SET_SELECTION,
    CoordinationType.CELL_SET_HIGHLIGHT,
    CoordinationType.CELL_SET_COLOR,
    CoordinationType.ADDITIONAL_CELL_SETS
  ],
  [Component.STATUS]: [
    CoordinationType.DATASET,
    CoordinationType.CELL_HIGHLIGHT,
    CoordinationType.GENE_HIGHLIGHT,
    CoordinationType.CELL_SET_HIGHLIGHT,
    CoordinationType.MOLECULE_HIGHLIGHT
  ],
  [Component.GENES]: [
    CoordinationType.DATASET,
    CoordinationType.GENE_FILTER,
    CoordinationType.GENE_HIGHLIGHT,
    CoordinationType.GENE_SELECTION,
    CoordinationType.CELL_COLOR_ENCODING,
    CoordinationType.CELL_SET_SELECTION
  ],
  [Component.CELL_SET_EXPRESSION]: [
    CoordinationType.DATASET,
    CoordinationType.GENE_SELECTION,
    CoordinationType.GENE_EXPRESSION_TRANSFORM,
    CoordinationType.CELL_SET_SELECTION,
    CoordinationType.CELL_SET_HIGHLIGHT,
    CoordinationType.CELL_SET_COLOR,
    CoordinationType.ADDITIONAL_CELL_SETS
  ],
  [Component.EXPRESSION_HISTOGRAM]: [
    CoordinationType.DATASET,
    CoordinationType.GENE_SELECTION
  ],
  [Component.LAYER_CONTROLLER]: [
    CoordinationType.DATASET,
    CoordinationType.SPATIAL_RASTER_LAYERS,
    CoordinationType.SPATIAL_CELLS_LAYER,
    CoordinationType.SPATIAL_MOLECULES_LAYER,
    CoordinationType.SPATIAL_NEIGHBORHOODS_LAYER,
    CoordinationType.SPATIAL_ZOOM,
    CoordinationType.SPATIAL_TARGET_X,
    CoordinationType.SPATIAL_TARGET_Y,
    CoordinationType.SPATIAL_TARGET_Z,
    CoordinationType.SPATIAL_ROTATION_X,
    CoordinationType.SPATIAL_ROTATION_Y,
    CoordinationType.SPATIAL_ROTATION_Z,
    CoordinationType.SPATIAL_ROTATION_ORBIT,
    CoordinationType.SPATIAL_ORBIT_AXIS
  ],
  [Component.GENOMIC_PROFILES]: [
    CoordinationType.DATASET,
    CoordinationType.GENOMIC_ZOOM_X,
    CoordinationType.GENOMIC_ZOOM_Y,
    CoordinationType.GENOMIC_TARGET_X,
    CoordinationType.GENOMIC_TARGET_Y,
    CoordinationType.GENE_FILTER,
    CoordinationType.GENE_HIGHLIGHT,
    CoordinationType.GENE_SELECTION,
    CoordinationType.CELL_SET_SELECTION,
    CoordinationType.CELL_SET_HIGHLIGHT,
    CoordinationType.CELL_SET_COLOR,
    CoordinationType.ADDITIONAL_CELL_SETS
  ],
  [Component.DESCRIPTION]: [
    CoordinationType.DATASET,
    CoordinationType.SPATIAL_RASTER_LAYERS
  ],
  higlass: [
    CoordinationType.DATASET,
    CoordinationType.GENOMIC_ZOOM_X,
    CoordinationType.GENOMIC_ZOOM_Y,
    CoordinationType.GENOMIC_TARGET_X,
    CoordinationType.GENOMIC_TARGET_Y,
    CoordinationType.GENE_FILTER,
    CoordinationType.GENE_HIGHLIGHT,
    CoordinationType.GENE_SELECTION
  ]
};

// src/components/data-hooks.js
function warn(error, setWarning) {
  setWarning(error.message);
  console.warn(error.message);
  if (error instanceof AbstractLoaderError) {
    error.warnInConsole();
  }
}
function initCoordinationSpace(values, setters, initialValues) {
  if (!values || !setters) {
    return;
  }
  Object.entries(values).forEach(([coordinationType, value]) => {
    const setterName = `set${capitalize(coordinationType)}`;
    const setterFunc = setters[setterName];
    const initialValue = initialValues && initialValues[coordinationType];
    const shouldInit = fast_deep_equal__WEBPACK_IMPORTED_MODULE_22___default()(initialValue, DEFAULT_COORDINATION_VALUES[coordinationType]);
    if (shouldInit && setterFunc) {
      setterFunc(value);
    }
  });
}
function useDescription(loaders, dataset) {
  const [description2, setDescription] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])();
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (loaders[dataset].description) {
      setDescription(loaders[dataset].description);
    } else {
      setDescription(null);
    }
  }, [loaders, dataset]);
  return [description2];
}
function useCellsData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {
  const [cells, setCells] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])({});
  const [cellsCount, setCellsCount] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(0);
  const setWarning = useSetWarning();
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (loaders[dataset].loaders.cells) {
      loaders[dataset].loaders.cells.load().catch((e) => warn(e, setWarning)).then((payload) => {
        if (!payload)
          return;
        const { data, url, coordinationValues } = payload;
        setCells(data);
        setCellsCount(Object.keys(data).length);
        addUrl(url, "Cells");
        const coordinationValuesOrDefault = __spreadValues({
          spatialCellsLayer: DEFAULT_CELLS_LAYER
        }, coordinationValues);
        initCoordinationSpace(coordinationValuesOrDefault, coordinationSetters, initialCoordinationValues);
        setItemIsReady("cells");
      });
    } else {
      setCells({});
      setCellsCount(0);
      if (isRequired) {
        warn(new LoaderNotFoundError(dataset, "cells", null, null), setWarning);
      } else {
        setItemIsReady("cells");
      }
    }
  }, [loaders, dataset]);
  return [cells, cellsCount];
}
function useCellSetsData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {
  const [cellSets, setCellSets] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])();
  const setWarning = useSetWarning();
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (loaders[dataset].loaders["cell-sets"]) {
      loaders[dataset].loaders["cell-sets"].load().catch((e) => warn(e, setWarning)).then((payload) => {
        if (!payload)
          return;
        const { data, url, coordinationValues } = payload;
        setCellSets(data);
        addUrl(url, "Cell Sets");
        initCoordinationSpace(coordinationValues, coordinationSetters, initialCoordinationValues);
        setItemIsReady("cell-sets");
      });
    } else {
      setCellSets(null);
      if (isRequired) {
        warn(new LoaderNotFoundError(dataset, "cell-sets", null, null), setWarning);
      } else {
        setItemIsReady("cell-sets");
      }
    }
  }, [loaders, dataset]);
  return [cellSets];
}
function useExpressionMatrixData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {
  const [expressionMatrix, setExpressionMatrix] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])();
  const setWarning = useSetWarning();
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (loaders[dataset].loaders["expression-matrix"]) {
      loaders[dataset].loaders["expression-matrix"].load().catch((e) => warn(e, setWarning)).then((payload) => {
        if (!payload)
          return;
        const { data, url, coordinationValues } = payload;
        const [attrs, arr] = data;
        setExpressionMatrix({
          cols: attrs.cols,
          rows: attrs.rows,
          matrix: arr.data
        });
        addUrl(url, "Expression Matrix");
        initCoordinationSpace(coordinationValues, coordinationSetters, initialCoordinationValues);
        setItemIsReady("expression-matrix");
      });
    } else {
      setExpressionMatrix(null);
      if (isRequired) {
        warn(new LoaderNotFoundError(dataset, "expression-matrix", null, null), setWarning);
      } else {
        setItemIsReady("expression-matrix");
      }
    }
  }, [loaders, dataset]);
  return [expressionMatrix];
}
function useGeneSelection(loaders, dataset, setItemIsReady, isRequired, selection, setItemIsNotReady) {
  const [geneData, setGeneData] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])();
  const setWarning = useSetWarning();
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (!selection) {
      setItemIsReady("expression-matrix");
      return;
    }
    const loader = loaders[dataset].loaders["expression-matrix"];
    if (loader) {
      setItemIsNotReady("expression-matrix");
      const implementsGeneSelection = typeof loader.loadGeneSelection === "function";
      if (implementsGeneSelection) {
        loaders[dataset].loaders["expression-matrix"].loadGeneSelection({ selection }).catch((e) => warn(e, setWarning)).then((payload) => {
          if (!payload)
            return;
          const { data } = payload;
          setGeneData(data);
          setItemIsReady("expression-matrix");
        });
      } else {
        loader.load().catch((e) => warn(e, setWarning)).then((payload) => {
          if (!payload)
            return;
          const { data } = payload;
          const [attrs, { data: matrix }] = data;
          const expressionDataForSelection = selection.map((sel) => {
            const geneIndex = attrs.cols.indexOf(sel);
            const numGenes = attrs.cols.length;
            const numCells = attrs.rows.length;
            const expressionData = new Uint8Array(numCells);
            for (let cellIndex = 0; cellIndex < numCells; cellIndex += 1) {
              expressionData[cellIndex] = matrix[cellIndex * numGenes + geneIndex];
            }
            return expressionData;
          });
          setGeneData(expressionDataForSelection);
          setItemIsReady("expression-matrix");
        });
      }
    } else {
      setGeneData(null);
      if (isRequired) {
        warn(new LoaderNotFoundError(dataset, "expression-matrix", null, null), setWarning);
      } else {
        setItemIsReady("expression-matrix");
      }
    }
  }, [loaders, dataset, selection]);
  return [geneData];
}
function useExpressionAttrs(loaders, dataset, setItemIsReady, addUrl, isRequired) {
  const [attrs, setAttrs] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])();
  const setWarning = useSetWarning();
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (!loaders[dataset]) {
      return;
    }
    const loader = loaders[dataset].loaders["expression-matrix"];
    if (loader) {
      const implementsLoadAttrs = typeof loader.loadAttrs === "function";
      if (implementsLoadAttrs) {
        loader.loadAttrs().catch((e) => warn(e, setWarning)).then((payload) => {
          if (!payload)
            return;
          const { data, url } = payload;
          setAttrs(data);
          addUrl(url, "Expression Matrix");
          setItemIsReady("expression-matrix");
        });
      } else {
        loader.load().catch((e) => warn(e, setWarning)).then((payload) => {
          if (!payload)
            return;
          const { data, url } = payload;
          setAttrs(data[0]);
          addUrl(url, "Expression Matrix");
          setItemIsReady("expression-matrix");
        });
      }
    } else {
      setAttrs(null);
      if (isRequired) {
        warn(new LoaderNotFoundError(dataset, "expression-matrix", null, null), setWarning);
      } else {
        setItemIsReady("expression-matrix");
      }
    }
  }, [loaders, dataset]);
  return [attrs];
}
function useMoleculesData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {
  const [molecules, setMolecules] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])();
  const [moleculesCount, setMoleculesCount] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(0);
  const [locationsCount, setLocationsCount] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(0);
  const setWarning = useSetWarning();
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (loaders[dataset].loaders.molecules) {
      loaders[dataset].loaders.molecules.load().catch((e) => warn(e, setWarning)).then((payload) => {
        if (!payload)
          return;
        const { data, url, coordinationValues } = payload;
        setMolecules(data);
        setMoleculesCount(Object.keys(data).length);
        setLocationsCount(Object.values(data).map((l) => l.length).reduce((a, b) => a + b, 0));
        addUrl(url, "Molecules");
        const coordinationValuesOrDefault = __spreadValues({
          spatialMoleculesLayer: DEFAULT_MOLECULES_LAYER
        }, coordinationValues);
        initCoordinationSpace(coordinationValuesOrDefault, coordinationSetters, initialCoordinationValues);
        setItemIsReady("molecules");
      });
    } else {
      setMolecules({});
      setMoleculesCount(0);
      setLocationsCount(0);
      if (isRequired) {
        warn(new LoaderNotFoundError(dataset, "molecules", null, null), setWarning);
      } else {
        setItemIsReady("molecules");
      }
    }
  }, [loaders, dataset]);
  return [molecules, moleculesCount, locationsCount];
}
function useNeighborhoodsData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {
  const [neighborhoods, setNeighborhoods] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])();
  const setWarning = useSetWarning();
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (loaders[dataset].loaders.neighborhoods) {
      loaders[dataset].loaders.neighborhoods.load().catch((e) => warn(e, setWarning)).then((payload) => {
        if (!payload)
          return;
        const { data, url, coordinationValues } = payload;
        setNeighborhoods(data);
        addUrl(url, "Neighborhoods");
        const coordinationValuesOrDefault = __spreadValues({
          spatialNeighborhoodsLayer: DEFAULT_NEIGHBORHOODS_LAYER
        }, coordinationValues);
        initCoordinationSpace(coordinationValuesOrDefault, coordinationSetters, initialCoordinationValues);
        setItemIsReady("neighborhoods");
      });
    } else {
      setNeighborhoods({});
      if (isRequired) {
        warn(new LoaderNotFoundError(dataset, "neighborhoods", null, null), setWarning);
      } else {
        setItemIsReady("neighborhoods");
      }
    }
  }, [loaders, dataset]);
  return [neighborhoods];
}
function useRasterData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {
  const [raster, setRaster] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])();
  const [imageLayerLoaders, setImageLayerLoaders] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  const [imageLayerMeta, setImageLayerMeta] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  const setWarning = useSetWarning();
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (loaders[dataset].loaders.raster) {
      loaders[dataset].loaders.raster.load().catch((e) => warn(e, setWarning)).then((payload) => {
        if (!payload)
          return;
        const { data, url: urls, coordinationValues } = payload;
        setRaster(data);
        urls.forEach(([url, name2]) => {
          addUrl(url, name2);
        });
        const { loaders: nextImageLoaders, meta: nextImageMeta } = data;
        setImageLayerLoaders(nextImageLoaders);
        setImageLayerMeta(nextImageMeta);
        initCoordinationSpace(coordinationValues, coordinationSetters, initialCoordinationValues);
        setItemIsReady("raster");
      });
    } else {
      setImageLayerLoaders([]);
      setImageLayerMeta([]);
      if (isRequired) {
        warn(new LoaderNotFoundError(dataset, "raster", null, null), setWarning);
      } else {
        setItemIsReady("raster");
      }
    }
  }, [loaders, dataset]);
  return [raster, imageLayerLoaders, imageLayerMeta];
}
function useGenomicProfilesData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {
  const [genomicProfilesAttrs, setGenomicProfilesAttrs] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])();
  const setWarning = useSetWarning();
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (loaders[dataset].loaders["genomic-profiles"]) {
      loaders[dataset].loaders["genomic-profiles"].load().catch((e) => warn(e, setWarning)).then((payload) => {
        if (!payload)
          return;
        const { data, url, coordinationValues } = payload;
        setGenomicProfilesAttrs(data);
        addUrl(url);
        initCoordinationSpace(coordinationValues, coordinationSetters, initialCoordinationValues);
        setItemIsReady("genomic-profiles");
      });
    } else {
      setGenomicProfilesAttrs(null);
      if (isRequired) {
        warn(new LoaderNotFoundError(dataset, "genomic-profiles", null, null), setWarning);
      } else {
        setItemIsReady("genomic-profiles");
      }
    }
  }, [loaders, dataset]);
  return [genomicProfilesAttrs];
}

// src/components/sets/cell-set-utils.js








// src/components/sets/utils.js


function callbackOnKeyPress(event, key, callback) {
  if (event.key === key) {
    event.preventDefault();
    callback();
  }
}
function colorArrayToString(rgbArray) {
  return tinycolor2__WEBPACK_IMPORTED_MODULE_44___default()({ r: rgbArray[0], g: rgbArray[1], b: rgbArray[2] }).toHexString();
}
function colorStringToArray(colorString) {
  const colorObj = tinycolor2__WEBPACK_IMPORTED_MODULE_44___default()(colorString).toRgb();
  return [colorObj.r, colorObj.g, colorObj.b];
}
function getLevelTooltipText(i) {
  if (i === 0)
    return "Color by hierarchy";
  if (i <= 2) {
    const subs = (j) => "sub".repeat(j);
    return `Color by ${subs(i - 1)}cluster`;
  }
  return `Color by cluster level ${i}`;
}
function isEqualOrPrefix(targetPath, testPath) {
  if (targetPath.length <= testPath.length) {
    return lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(targetPath, testPath.slice(0, targetPath.length));
  }
  return false;
}
function tryRenamePath(targetPath, testPath, nextTargetPath) {
  if (isEqualOrPrefix(targetPath, testPath)) {
    return [...nextTargetPath, ...testPath.slice(nextTargetPath.length)];
  }
  return testPath;
}
var PATH_SEP = "___";
function pathToKey(path) {
  return path.join(PATH_SEP);
}

// src/components/sets/cell-set-utils.js
function generateKey() {
  return uuid_v4__WEBPACK_IMPORTED_MODULE_37___default()();
}
function nodeToSet(currNode) {
  if (!currNode) {
    return [];
  }
  if (!currNode.children) {
    return currNode.set || [];
  }
  return currNode.children.flatMap((c) => nodeToSet(c));
}
function nodeToHeight(currNode, level = 0) {
  if (!currNode.children) {
    return level;
  }
  const newLevel = level + 1;
  const childrenHeights = currNode.children.map((c) => nodeToHeight(c, newLevel));
  return Math.max(...childrenHeights, newLevel);
}
function getNodeLength(currNode) {
  var _a2;
  if (!currNode) {
    return 0;
  }
  if (!currNode.children) {
    return ((_a2 = currNode.set) == null ? void 0 : _a2.length) || 0;
  }
  return currNode.children.reduce((acc, curr) => acc + getNodeLength(curr), 0);
}
function nodeFindNodeByNamePath(node, path, currLevelIndex) {
  const currNodeName = path[currLevelIndex];
  if (node.name === currNodeName) {
    if (currLevelIndex === path.length - 1) {
      return node;
    }
    if (node.children) {
      const foundNodes = node.children.map((child) => nodeFindNodeByNamePath(child, path, currLevelIndex + 1)).filter(Boolean);
      if (foundNodes.length === 1) {
        return foundNodes[0];
      }
    }
  }
  return null;
}
function treeFindNodeByNamePath(currTree, targetNamePath) {
  const foundNodes = currTree.tree.map((levelZeroNode) => nodeFindNodeByNamePath(levelZeroNode, targetNamePath, 0)).filter(Boolean);
  if (foundNodes.length === 1) {
    return foundNodes[0];
  }
  return null;
}
function nodeTransform(node, predicate, transform, transformedPaths, currPath) {
  let newPath;
  if (!currPath) {
    newPath = [node.name];
  } else {
    newPath = [...currPath];
  }
  if (predicate(node, newPath)) {
    transformedPaths.push(newPath);
    return transform(node, newPath);
  }
  if (node.children) {
    return __spreadProps(__spreadValues({}, node), {
      children: node.children.map((child) => nodeTransform(child, predicate, transform, transformedPaths, newPath.concat([child.name])))
    });
  }
  return node;
}
function nodeTransformAll(node, predicate, transform, transformedPaths, currPath) {
  let newPath;
  if (!currPath) {
    newPath = [node.name];
  } else {
    newPath = [...currPath];
  }
  let newNode = node;
  if (predicate(node, newPath)) {
    transformedPaths.push(newPath);
    newNode = transform(node, newPath);
  }
  if (node.children) {
    return __spreadProps(__spreadValues({}, newNode), {
      children: newNode.children.map((child) => nodeTransformAll(child, predicate, transform, transformedPaths, newPath.concat([child.name])))
    });
  }
  return newNode;
}
function nodeAppendChild(currNode, newChild) {
  return __spreadProps(__spreadValues({}, currNode), {
    children: [...currNode.children, newChild]
  });
}
function nodePrependChild(currNode, newChild) {
  return __spreadProps(__spreadValues({}, currNode), {
    children: [newChild, ...currNode.children]
  });
}
function nodeInsertChild(currNode, newChild, insertIndex) {
  const newChildren = Array.from(currNode.children);
  newChildren.splice(insertIndex, 0, newChild);
  return __spreadProps(__spreadValues({}, currNode), {
    children: newChildren
  });
}
function treeToUnion(currTree, checkedPaths) {
  const nodes = checkedPaths.map((path) => treeFindNodeByNamePath(currTree, path));
  const nodeSets = nodes.map((node) => nodeToSet(node).map(([cellId]) => cellId));
  return nodeSets.reduce((a, h) => a.concat(h.filter((hEl) => !a.includes(hEl))), nodeSets[0] || []);
}
function treeToIntersection(currTree, checkedPaths) {
  const nodes = checkedPaths.map((path) => treeFindNodeByNamePath(currTree, path));
  const nodeSets = nodes.map((node) => nodeToSet(node).map(([cellId]) => cellId));
  return nodeSets.reduce((a, h) => h.filter((hEl) => a.includes(hEl)), nodeSets[0] || []);
}
function treeToComplement(currTree, checkedPaths, items2) {
  const primaryUnion = treeToUnion(currTree, checkedPaths);
  return items2.filter((el) => !primaryUnion.includes(el));
}
function nodeToLevelDescendantNamePaths(node, level, prevPath, stopEarly = false) {
  if (!node.children) {
    if (!stopEarly) {
      return null;
    }
    return [[...prevPath, node.name]];
  }
  if (level === 0) {
    return [[...prevPath, node.name]];
  }
  return node.children.flatMap((c) => nodeToLevelDescendantNamePaths(c, level - 1, [...prevPath, node.name], stopEarly)).filter(Boolean);
}
function treeExport(currTree, datatype) {
  return {
    version: HIERARCHICAL_SCHEMAS[datatype].latestVersion,
    datatype,
    tree: currTree.tree
  };
}
function treeExportLevelZeroNode(currTree, nodePath, datatype, cellSetColors, theme) {
  const node = treeFindNodeByNamePath(currTree, nodePath);
  const nodeWithColors = nodeTransformAll(node, () => true, (n, nPath) => {
    var _a2, _b2;
    const nodeColor = (_b2 = (_a2 = cellSetColors == null ? void 0 : cellSetColors.find((c) => lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(c.path, nPath))) == null ? void 0 : _a2.color) != null ? _b2 : getDefaultColor(theme);
    return __spreadProps(__spreadValues({}, n), {
      color: nodeColor.slice(0, 3)
    });
  }, []);
  const treeWithOneLevelZeroNode = __spreadProps(__spreadValues({}, currTree), {
    tree: [nodeWithColors]
  });
  return {
    treeToExport: treeExport(treeWithOneLevelZeroNode, datatype),
    nodeName: node.name
  };
}
function treeExportSet(currTree, nodePath) {
  const node = treeFindNodeByNamePath(currTree, nodePath);
  return { setToExport: nodeToSet(node), nodeName: node.name };
}
function treeInitialize(datatype) {
  return {
    version: HIERARCHICAL_SCHEMAS[datatype].latestVersion,
    datatype,
    tree: []
  };
}
function nodeToRenderProps(node, path, cellSetColor) {
  var _a2;
  const level = path.length - 1;
  return {
    title: node.name,
    nodeKey: pathToKey(path),
    path,
    size: getNodeLength(node),
    color: (_a2 = cellSetColor == null ? void 0 : cellSetColor.find((d) => lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(d.path, path))) == null ? void 0 : _a2.color,
    level,
    isLeaf: (!node.children || node.children.length === 0) && Boolean(node.set),
    height: nodeToHeight(node)
  };
}
function colorMixWithUncertainty(originalColor, p, mixingColor = [128, 128, 128]) {
  return [
    (originalColor[0] - mixingColor[0]) * p + mixingColor[0],
    (originalColor[1] - mixingColor[1]) * p + mixingColor[1],
    (originalColor[2] - mixingColor[2]) * p + mixingColor[2]
  ];
}
function treeToCellColorsBySetNames(currTree, selectedNamePaths, cellSetColor, theme) {
  let cellColorsArray = [];
  selectedNamePaths.forEach((setNamePath) => {
    var _a2;
    const node = treeFindNodeByNamePath(currTree, setNamePath);
    if (node) {
      const nodeSet = nodeToSet(node);
      const nodeColor = ((_a2 = cellSetColor == null ? void 0 : cellSetColor.find((d) => lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(d.path, setNamePath))) == null ? void 0 : _a2.color) || getDefaultColor(theme);
      cellColorsArray = [
        ...cellColorsArray,
        ...nodeSet.map(([cellId, prob]) => [
          cellId,
          lodash_isNil__WEBPACK_IMPORTED_MODULE_38___default()(prob) ? nodeColor : colorMixWithUncertainty(nodeColor, prob)
        ])
      ];
    }
  });
  return new Map(cellColorsArray);
}
function treeToObjectsBySetNames(currTree, selectedNamePaths, setColor, theme) {
  var _a2;
  let cellsArray = [];
  for (let i = 0; i < selectedNamePaths.length; i += 1) {
    const setNamePath = selectedNamePaths[i];
    const node = treeFindNodeByNamePath(currTree, setNamePath);
    if (node) {
      const nodeSet = nodeToSet(node);
      const nodeColor = ((_a2 = setColor == null ? void 0 : setColor.find((d) => lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(d.path, setNamePath))) == null ? void 0 : _a2.color) || getDefaultColor(theme);
      cellsArray = cellsArray.concat(nodeSet.map(([cellId]) => ({
        obsId: cellId,
        name: node.name,
        color: nodeColor
      })));
    }
  }
  return cellsArray;
}
function treeToCellPolygonsBySetNames(currTree, cells, mapping, selectedNamePaths, cellSetColor, theme) {
  const cellSetPolygons = [];
  selectedNamePaths.forEach((setNamePath) => {
    var _a2;
    const node = treeFindNodeByNamePath(currTree, setNamePath);
    if (node) {
      const nodeSet = nodeToSet(node);
      const nodeColor = ((_a2 = cellSetColor == null ? void 0 : cellSetColor.find((d) => lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(d.path, setNamePath))) == null ? void 0 : _a2.color) || getDefaultColor(theme);
      const cellPositions = nodeSet.map(([cellId]) => {
        var _a3, _b2;
        return [
          (_a3 = cells[cellId]) == null ? void 0 : _a3.mappings[mapping][0],
          -((_b2 = cells[cellId]) == null ? void 0 : _b2.mappings[mapping][1])
        ];
      }).filter((cell) => cell.every((i) => typeof i === "number"));
      if (cellPositions.length > 2) {
        const points = Object(_turf_helpers__WEBPACK_IMPORTED_MODULE_41__["featureCollection"])(cellPositions.map(_turf_helpers__WEBPACK_IMPORTED_MODULE_41__["point"]));
        const concavity = Infinity;
        const hullCoords = concaveman__WEBPACK_IMPORTED_MODULE_43___default()(cellPositions, concavity);
        if (hullCoords) {
          const centroidCoords = Object(_turf_centroid__WEBPACK_IMPORTED_MODULE_42__["default"])(points).geometry.coordinates;
          cellSetPolygons.push({
            path: setNamePath,
            name: setNamePath[setNamePath.length - 1],
            hull: hullCoords,
            color: nodeColor,
            centroid: centroidCoords
          });
        }
      }
    }
  });
  return cellSetPolygons;
}
function treeToSetSizesBySetNames(currTree, selectedNamePaths, setColor, theme) {
  const sizes = [];
  selectedNamePaths.forEach((setNamePath) => {
    var _a2;
    const node = treeFindNodeByNamePath(currTree, setNamePath);
    if (node) {
      const nodeSet = nodeToSet(node);
      const nodeColor = ((_a2 = setColor == null ? void 0 : setColor.find((d) => lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(d.path, setNamePath))) == null ? void 0 : _a2.color) || getDefaultColor(theme);
      sizes.push({
        key: generateKey(),
        name: node.name,
        size: nodeSet.length,
        color: nodeColor
      });
    }
  });
  return sizes;
}
function filterNode(node, prevPath, filterPath) {
  if (lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()([...prevPath, node.name], filterPath)) {
    return null;
  }
  if (!node.children) {
    return node;
  }
  return __spreadProps(__spreadValues({}, node), {
    children: node.children.map((c) => filterNode(c, [...prevPath, node.name], filterPath)).filter(Boolean)
  });
}
function treeToExpectedCheckedLevel(currTree, checkedPaths) {
  let result = null;
  if (currTree) {
    currTree.tree.forEach((lzn) => {
      const levelZeroPath = [lzn.name];
      const height = nodeToHeight(lzn);
      lodash_range__WEBPACK_IMPORTED_MODULE_40___default()(height).forEach((i) => {
        const levelIndex = i + 1;
        const levelNodePaths = nodeToLevelDescendantNamePaths(lzn, levelIndex, [], true);
        if (lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(levelNodePaths, checkedPaths)) {
          result = { levelZeroPath, levelIndex };
        }
      });
    });
  }
  return result;
}
function treesConflict(cellSets, testCellSets) {
  const paths = [];
  const testPaths = [];
  let hasConflict = false;
  function getPaths(node, prevPath) {
    paths.push([...prevPath, node.name]);
    if (node.children) {
      node.children.forEach((c) => getPaths(c, [...prevPath, node.name]));
    }
  }
  cellSets.tree.forEach((lzn) => getPaths(lzn, []));
  function getTestPaths(node, prevPath) {
    testPaths.push([...prevPath, node.name]);
    if (node.children) {
      node.children.forEach((c) => getPaths(c, [...prevPath, node.name]));
    }
  }
  testCellSets.tree.forEach((lzn) => getTestPaths(lzn, []));
  testPaths.forEach((testPath) => {
    if (paths.find((p) => lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(p, testPath))) {
      hasConflict = true;
    }
  });
  return hasConflict;
}
function initializeCellSetColor(cellSets, cellSetColor) {
  const nextCellSetColor = [...cellSetColor || []];
  const nodeCountPerTreePerLevel = cellSets.tree.map((tree) => Array.from({
    length: nodeToHeight(tree) + 1
  }).fill(0));
  function processNode2(node, prevPath, hierarchyLevel, treeIndex) {
    const index = nodeCountPerTreePerLevel[treeIndex][hierarchyLevel];
    const nodePath = [...prevPath, node.name];
    const nodeColor = nextCellSetColor.find((d) => lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(d.path, nodePath));
    if (!nodeColor) {
      const nodeColorArray = node.color ? node.color : PALETTE[index % PALETTE.length];
      nextCellSetColor.push({
        path: nodePath,
        color: nodeColorArray
      });
    }
    nodeCountPerTreePerLevel[treeIndex][hierarchyLevel] += 1;
    if (node.children) {
      node.children.forEach((c) => processNode2(c, nodePath, hierarchyLevel + 1, treeIndex));
    }
  }
  cellSets.tree.forEach((lzn, treeIndex) => processNode2(lzn, [], 0, treeIndex));
  return nextCellSetColor;
}
function getCellSetPolygons(params) {
  const {
    cells,
    mapping,
    cellSets,
    cellSetSelection,
    cellSetColor,
    theme
  } = params;
  if (cellSetSelection && cellSetSelection.length > 0 && cellSets && cells) {
    return treeToCellPolygonsBySetNames(cellSets, cells, mapping, cellSetSelection, cellSetColor, theme);
  }
  return [];
}

// src/components/interpolate-colors.js
var schemeRdBu = [[103, 0, 31], [178, 24, 43], [214, 96, 77], [244, 165, 130], [253, 219, 199], [247, 247, 247], [209, 229, 240], [146, 197, 222], [67, 147, 195], [33, 102, 172], [5, 48, 97]];
var schemePlasma = [[13, 8, 135], [16, 7, 136], [19, 7, 137], [22, 7, 138], [25, 6, 140], [27, 6, 141], [29, 6, 142], [32, 6, 143], [34, 6, 144], [36, 6, 145], [38, 5, 145], [40, 5, 146], [42, 5, 147], [44, 5, 148], [46, 5, 149], [47, 5, 150], [49, 5, 151], [51, 5, 151], [53, 4, 152], [55, 4, 153], [56, 4, 154], [58, 4, 154], [60, 4, 155], [62, 4, 156], [63, 4, 156], [65, 4, 157], [67, 3, 158], [68, 3, 158], [70, 3, 159], [72, 3, 159], [73, 3, 160], [75, 3, 161], [76, 2, 161], [78, 2, 162], [80, 2, 162], [81, 2, 163], [83, 2, 163], [85, 2, 164], [86, 1, 164], [88, 1, 164], [89, 1, 165], [91, 1, 165], [92, 1, 166], [94, 1, 166], [96, 1, 166], [97, 0, 167], [99, 0, 167], [100, 0, 167], [102, 0, 167], [103, 0, 168], [105, 0, 168], [106, 0, 168], [108, 0, 168], [110, 0, 168], [111, 0, 168], [113, 0, 168], [114, 1, 168], [116, 1, 168], [117, 1, 168], [119, 1, 168], [120, 1, 168], [122, 2, 168], [123, 2, 168], [125, 3, 168], [126, 3, 168], [128, 4, 168], [129, 4, 167], [131, 5, 167], [132, 5, 167], [134, 6, 166], [135, 7, 166], [136, 8, 166], [138, 9, 165], [139, 10, 165], [141, 11, 165], [142, 12, 164], [143, 13, 164], [145, 14, 163], [146, 15, 163], [148, 16, 162], [149, 17, 161], [150, 19, 161], [152, 20, 160], [153, 21, 159], [154, 22, 159], [156, 23, 158], [157, 24, 157], [158, 25, 157], [160, 26, 156], [161, 27, 155], [162, 29, 154], [163, 30, 154], [165, 31, 153], [166, 32, 152], [167, 33, 151], [168, 34, 150], [170, 35, 149], [171, 36, 148], [172, 38, 148], [173, 39, 147], [174, 40, 146], [176, 41, 145], [177, 42, 144], [178, 43, 143], [179, 44, 142], [180, 46, 141], [181, 47, 140], [182, 48, 139], [183, 49, 138], [184, 50, 137], [186, 51, 136], [187, 52, 136], [188, 53, 135], [189, 55, 134], [190, 56, 133], [191, 57, 132], [192, 58, 131], [193, 59, 130], [194, 60, 129], [195, 61, 128], [196, 62, 127], [197, 64, 126], [198, 65, 125], [199, 66, 124], [200, 67, 123], [201, 68, 122], [202, 69, 122], [203, 70, 121], [204, 71, 120], [204, 73, 119], [205, 74, 118], [206, 75, 117], [207, 76, 116], [208, 77, 115], [209, 78, 114], [210, 79, 113], [211, 81, 113], [212, 82, 112], [213, 83, 111], [213, 84, 110], [214, 85, 109], [215, 86, 108], [216, 87, 107], [217, 88, 106], [218, 90, 106], [218, 91, 105], [219, 92, 104], [220, 93, 103], [221, 94, 102], [222, 95, 101], [222, 97, 100], [223, 98, 99], [224, 99, 99], [225, 100, 98], [226, 101, 97], [226, 102, 96], [227, 104, 95], [228, 105, 94], [229, 106, 93], [229, 107, 93], [230, 108, 92], [231, 110, 91], [231, 111, 90], [232, 112, 89], [233, 113, 88], [233, 114, 87], [234, 116, 87], [235, 117, 86], [235, 118, 85], [236, 119, 84], [237, 121, 83], [237, 122, 82], [238, 123, 81], [239, 124, 81], [239, 126, 80], [240, 127, 79], [240, 128, 78], [241, 129, 77], [241, 131, 76], [242, 132, 75], [243, 133, 75], [243, 135, 74], [244, 136, 73], [244, 137, 72], [245, 139, 71], [245, 140, 70], [246, 141, 69], [246, 143, 68], [247, 144, 68], [247, 145, 67], [247, 147, 66], [248, 148, 65], [248, 149, 64], [249, 151, 63], [249, 152, 62], [249, 154, 62], [250, 155, 61], [250, 156, 60], [250, 158, 59], [251, 159, 58], [251, 161, 57], [251, 162, 56], [252, 163, 56], [252, 165, 55], [252, 166, 54], [252, 168, 53], [252, 169, 52], [253, 171, 51], [253, 172, 51], [253, 174, 50], [253, 175, 49], [253, 177, 48], [253, 178, 47], [253, 180, 47], [253, 181, 46], [254, 183, 45], [254, 184, 44], [254, 186, 44], [254, 187, 43], [254, 189, 42], [254, 190, 42], [254, 192, 41], [253, 194, 41], [253, 195, 40], [253, 197, 39], [253, 198, 39], [253, 200, 39], [253, 202, 38], [253, 203, 38], [252, 205, 37], [252, 206, 37], [252, 208, 37], [252, 210, 37], [251, 211, 36], [251, 213, 36], [251, 215, 36], [250, 216, 36], [250, 218, 36], [249, 220, 36], [249, 221, 37], [248, 223, 37], [248, 225, 37], [247, 226, 37], [247, 228, 37], [246, 230, 38], [246, 232, 38], [245, 233, 38], [245, 235, 39], [244, 237, 39], [243, 238, 39], [243, 240, 39], [242, 242, 39], [241, 244, 38], [241, 245, 37], [240, 247, 36], [240, 249, 33]];
function rgbSpline(spline) {
  return (colors) => {
    const n = colors.length;
    let r = new Array(n);
    let g = new Array(n);
    let b = new Array(n);
    let i;
    let color;
    for (i = 0; i < n; ++i) {
      color = [colors[i][0], colors[i][1], colors[i][2]];
      r[i] = color[0] || 0;
      g[i] = color[1] || 0;
      b[i] = color[2] || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    return (t) => [r(t), g(t), b(t)];
  };
}
function basis(values) {
  function innerBasis(t1, v0, v1, v2, v3) {
    const t2 = t1 * t1;
    const t3 = t2 * t1;
    return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
  }
  const n = values.length - 1;
  return (t) => {
    const i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n);
    const v1 = values[i];
    const v2 = values[i + 1];
    const v0 = i > 0 ? values[i - 1] : 2 * v1 - v2;
    const v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return innerBasis((t - i / n) * n, v0, v1, v2, v3);
  };
}
var interpolateRgbBasis = rgbSpline(basis);
function interpolateSequentialMulti(range10) {
  const n = range10.length;
  return (t) => range10[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
}
var interpolateRdBu = interpolateRgbBasis(schemeRdBu);
var interpolatePlasma = interpolateSequentialMulti(schemePlasma);
function getCellColors(params) {
  const {
    cellColorEncoding,
    expressionData,
    cellSets,
    cellSetSelection,
    cellSetColor,
    expressionDataAttrs,
    theme
  } = params;
  if (cellColorEncoding === "geneSelection" && expressionData && expressionDataAttrs) {
    const geneExpColormap = interpolatePlasma;
    const colors = new Map();
    for (let i = 0; i < expressionData.length; i += 1) {
      const value = expressionData[i];
      const cellColor = geneExpColormap(value / 255);
      colors.set(expressionDataAttrs.rows[i], cellColor);
    }
    return colors;
  }
  if (cellColorEncoding === "cellSetSelection" && cellSetSelection && cellSets) {
    return treeToCellColorsBySetNames(cellSets, cellSetSelection, cellSetColor, theme);
  }
  return new Map();
}

// src/components/heatmap/Heatmap.js









// src/layers/HeatmapCompositeTextLayer.js



// src/layers/heatmap-constants.js

var TILE_SIZE = 2048;
var MIN_ROW_AGG = 1;
var MAX_ROW_AGG = 16;
var COLOR_BAR_SIZE = 20;
var AXIS_LABEL_TEXT_SIZE = 9;
var AXIS_TITLE_TEXT_SIZE = 15;
var AXIS_MIN_SIZE = 10;
var AXIS_MAX_SIZE = 90;
var AXIS_MARGIN = 3;
var THEME_TO_TEXT_COLOR = {
  dark: [224, 224, 224],
  light: [64, 64, 64]
};
var AXIS_FONT_FAMILY = "-apple-system, 'Helvetica Neue', Arial, sans-serif";
var PIXELATED_TEXTURE_PARAMETERS = {
  [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].TEXTURE_MIN_FILTER]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].NEAREST,
  [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].TEXTURE_MAG_FILTER]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].NEAREST,
  [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].TEXTURE_WRAP_S]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].CLAMP_TO_EDGE,
  [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].TEXTURE_WRAP_T]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].CLAMP_TO_EDGE
};

// src/layers/HeatmapCompositeTextLayer.js
var HeatmapCompositeTextLayer = class extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["CompositeLayer"] {
  _renderAxisTopLayers() {
    const {
      axisTopLabelData,
      matrixLeft,
      width,
      matrixWidth,
      viewWidth,
      theme,
      targetX,
      targetY,
      axisTopTitle,
      cellWidth,
      axisOffsetTop,
      scaleFactor
    } = this.props;
    const showAxisTopLabels = cellWidth >= AXIS_LABEL_TEXT_SIZE;
    const axisLabelTop = targetY + (axisOffsetTop - AXIS_MARGIN) / 2 / scaleFactor;
    return [
      new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["TextLayer"]({
        id: "axisTopLabels",
        coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["COORDINATE_SYSTEM"].CARTESIAN,
        data: axisTopLabelData,
        getText: (d) => d[1],
        getPosition: (d) => [matrixLeft + (d[0] + 0.5) / width * matrixWidth, axisLabelTop],
        getTextAnchor: "start",
        getColor: () => THEME_TO_TEXT_COLOR[theme],
        getSize: showAxisTopLabels ? AXIS_LABEL_TEXT_SIZE : 0,
        getAngle: 75,
        fontFamily: AXIS_FONT_FAMILY,
        updateTriggers: {
          getPosition: [axisLabelTop, matrixLeft, matrixWidth, viewWidth],
          getSize: [showAxisTopLabels],
          getColor: [theme]
        }
      }),
      new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["TextLayer"]({
        id: "axisTopTitle",
        coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["COORDINATE_SYSTEM"].CARTESIAN,
        data: [{ title: axisTopTitle }],
        getText: (d) => d.title,
        getPosition: [targetX, targetY],
        getTextAnchor: "middle",
        getColor: () => THEME_TO_TEXT_COLOR[theme],
        getSize: !showAxisTopLabels ? AXIS_TITLE_TEXT_SIZE : 0,
        getAngle: 0,
        fontFamily: AXIS_FONT_FAMILY,
        updateTriggers: {
          getSize: [showAxisTopLabels],
          getColor: [theme]
        }
      })
    ];
  }
  _renderAxisLeftLayers() {
    const {
      axisLeftLabelData,
      matrixTop,
      height,
      matrixHeight,
      viewHeight,
      theme,
      axisLeftTitle,
      targetX,
      targetY,
      cellHeight,
      axisOffsetLeft,
      scaleFactor
    } = this.props;
    const showAxisLeftLabels = cellHeight >= AXIS_LABEL_TEXT_SIZE;
    const axisLabelLeft = targetX + (axisOffsetLeft - AXIS_MARGIN) / 2 / scaleFactor;
    return [
      new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["TextLayer"]({
        id: "axisLeftLabels",
        coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["COORDINATE_SYSTEM"].CARTESIAN,
        data: axisLeftLabelData,
        getText: (d) => d[1],
        getPosition: (d) => [axisLabelLeft, matrixTop + (d[0] + 0.5) / height * matrixHeight],
        getTextAnchor: "end",
        getColor: () => THEME_TO_TEXT_COLOR[theme],
        getSize: showAxisLeftLabels ? AXIS_LABEL_TEXT_SIZE : 0,
        getAngle: 0,
        fontFamily: AXIS_FONT_FAMILY,
        updateTriggers: {
          getPosition: [axisLabelLeft, matrixTop, matrixHeight, viewHeight],
          getSize: [showAxisLeftLabels],
          getColor: [theme]
        }
      }),
      new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["TextLayer"]({
        id: "axisLeftTitle",
        coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["COORDINATE_SYSTEM"].CARTESIAN,
        data: [{ title: axisLeftTitle }],
        getText: (d) => d.title,
        getPosition: [targetX, targetY],
        getTextAnchor: "middle",
        getColor: () => THEME_TO_TEXT_COLOR[theme],
        getSize: !showAxisLeftLabels ? AXIS_TITLE_TEXT_SIZE : 0,
        getAngle: 90,
        fontFamily: AXIS_FONT_FAMILY,
        updateTriggers: {
          getSize: [showAxisLeftLabels],
          getColor: [theme]
        }
      })
    ];
  }
  renderLayers() {
    return [
      this._renderAxisTopLayers(),
      this._renderAxisLeftLayers()
    ];
  }
};
HeatmapCompositeTextLayer.layerName = "HeatmapCompositeTextLayer";

// src/layers/PixelatedBitmapLayer.js


var defaultProps2 = __spreadProps(__spreadValues({}, _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["BitmapLayer"].defaultProps), {
  image: { type: "object", value: null, async: true },
  bounds: { type: "array", value: [1, 0, 0, 1], compare: true },
  desaturate: {
    type: "number",
    min: 0,
    max: 1,
    value: 0
  },
  transparentColor: { type: "color", value: [0, 0, 0, 0] },
  tintColor: { type: "color", value: [255, 255, 255] }
});
var PixelatedBitmapLayer = class extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["CompositeLayer"] {
  renderLayers() {
    const { image } = this.props;
    return new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["BitmapLayer"](this.props, {
      id: `${this.props.id}-wrapped`,
      image,
      textureParameters: PIXELATED_TEXTURE_PARAMETERS
    });
  }
};
PixelatedBitmapLayer.layerName = "PixelatedBitmapLayer";
PixelatedBitmapLayer.defaultProps = defaultProps2;

// src/layers/HeatmapBitmapLayer.js





// src/layers/constants.js
var GLSL_COLORMAPS = [
  "plasma",
  "viridis",
  "jet"
];
var GLSL_COLORMAP_DEFAULT = "plasma";
var COLORMAP_SHADER_PLACEHOLDER = "COLORMAP_FUNC";

// src/layers/heatmap-bitmap-layer-shaders.js
var vertexShader = "\n#define SHADER_NAME heatmap-bitmap-layer-vertex-shader\n\nattribute vec2 texCoords;\nattribute vec3 positions;\nattribute vec3 positions64Low;\n\nvarying vec2 vTexCoord;\n\nconst vec3 pickingColor = vec3(1.0, 0.0, 0.0);\n\nvoid main(void) {\n  geometry.worldPosition = positions;\n  geometry.uv = texCoords;\n  geometry.pickingColor = pickingColor;\n\n  gl_Position = project_position_to_clipspace(positions, positions64Low, vec3(0.0), geometry.position);\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  vTexCoord = texCoords;\n\n  vec4 color = vec4(0.0);\n  DECKGL_FILTER_COLOR(color, geometry);\n}\n";
var fragmentShader = "\n#define SHADER_NAME heatmap-bitmap-layer-fragment-shader\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvec4 rdbu (float x_2865134303) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.0196078431372549,0.0392156862745098,0.6745098039215687,1);\n  const float e1 = 0.35;\n  const vec4 v1 = vec4(0.41568627450980394,0.5372549019607843,0.9686274509803922,1);\n  const float e2 = 0.5;\n  const vec4 v2 = vec4(0.7450980392156863,0.7450980392156863,0.7450980392156863,1);\n  const float e3 = 0.6;\n  const vec4 v3 = vec4(0.8627450980392157,0.6666666666666666,0.5176470588235295,1);\n  const float e4 = 0.7;\n  const vec4 v4 = vec4(0.9019607843137255,0.5686274509803921,0.35294117647058826,1);\n  const float e5 = 1.0;\n  const vec4 v5 = vec4(0.6980392156862745,0.0392156862745098,0.10980392156862745,1);\n  float a0 = smoothstep(e0,e1,x_2865134303);\n  float a1 = smoothstep(e1,e2,x_2865134303);\n  float a2 = smoothstep(e2,e3,x_2865134303);\n  float a3 = smoothstep(e3,e4,x_2865134303);\n  float a4 = smoothstep(e4,e5,x_2865134303);\n  return max(mix(v0,v1,a0)*step(e0,x_2865134303)*step(x_2865134303,e1),\n    max(mix(v1,v2,a1)*step(e1,x_2865134303)*step(x_2865134303,e2),\n    max(mix(v2,v3,a2)*step(e2,x_2865134303)*step(x_2865134303,e3),\n    max(mix(v3,v4,a3)*step(e3,x_2865134303)*step(x_2865134303,e4),mix(v4,v5,a4)*step(e4,x_2865134303)*step(x_2865134303,e5)\n  ))));\n}\n\nvec4 plasma (float x_4113959278) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.050980392156862744,0.03137254901960784,0.5294117647058824,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.29411764705882354,0.011764705882352941,0.6313725490196078,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.49019607843137253,0.011764705882352941,0.6588235294117647,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.6588235294117647,0.13333333333333333,0.5882352941176471,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.796078431372549,0.27450980392156865,0.4745098039215686,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8980392156862745,0.4196078431372549,0.36470588235294116,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.9725490196078431,0.5803921568627451,0.2549019607843137,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.9921568627450981,0.7647058823529411,0.1568627450980392,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9411764705882353,0.9764705882352941,0.12941176470588237,1);\n  float a0 = smoothstep(e0,e1,x_4113959278);\n  float a1 = smoothstep(e1,e2,x_4113959278);\n  float a2 = smoothstep(e2,e3,x_4113959278);\n  float a3 = smoothstep(e3,e4,x_4113959278);\n  float a4 = smoothstep(e4,e5,x_4113959278);\n  float a5 = smoothstep(e5,e6,x_4113959278);\n  float a6 = smoothstep(e6,e7,x_4113959278);\n  float a7 = smoothstep(e7,e8,x_4113959278);\n  return max(mix(v0,v1,a0)*step(e0,x_4113959278)*step(x_4113959278,e1),\n    max(mix(v1,v2,a1)*step(e1,x_4113959278)*step(x_4113959278,e2),\n    max(mix(v2,v3,a2)*step(e2,x_4113959278)*step(x_4113959278,e3),\n    max(mix(v3,v4,a3)*step(e3,x_4113959278)*step(x_4113959278,e4),\n    max(mix(v4,v5,a4)*step(e4,x_4113959278)*step(x_4113959278,e5),\n    max(mix(v5,v6,a5)*step(e5,x_4113959278)*step(x_4113959278,e6),\n    max(mix(v6,v7,a6)*step(e6,x_4113959278)*step(x_4113959278,e7),mix(v7,v8,a7)*step(e7,x_4113959278)*step(x_4113959278,e8)\n  )))))));\n}\n\nvec4 viridis (float x_1156145534) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.26666666666666666,0.00392156862745098,0.32941176470588235,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.2784313725490196,0.17254901960784313,0.47843137254901963,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.23137254901960785,0.3176470588235294,0.5450980392156862,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.17254901960784313,0.44313725490196076,0.5568627450980392,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.12941176470588237,0.5647058823529412,0.5529411764705883,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.15294117647058825,0.6784313725490196,0.5058823529411764,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.3607843137254902,0.7843137254901961,0.38823529411764707,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.6666666666666666,0.8627450980392157,0.19607843137254902,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9921568627450981,0.9058823529411765,0.1450980392156863,1);\n  float a0 = smoothstep(e0,e1,x_1156145534);\n  float a1 = smoothstep(e1,e2,x_1156145534);\n  float a2 = smoothstep(e2,e3,x_1156145534);\n  float a3 = smoothstep(e3,e4,x_1156145534);\n  float a4 = smoothstep(e4,e5,x_1156145534);\n  float a5 = smoothstep(e5,e6,x_1156145534);\n  float a6 = smoothstep(e6,e7,x_1156145534);\n  float a7 = smoothstep(e7,e8,x_1156145534);\n  return max(mix(v0,v1,a0)*step(e0,x_1156145534)*step(x_1156145534,e1),\n    max(mix(v1,v2,a1)*step(e1,x_1156145534)*step(x_1156145534,e2),\n    max(mix(v2,v3,a2)*step(e2,x_1156145534)*step(x_1156145534,e3),\n    max(mix(v3,v4,a3)*step(e3,x_1156145534)*step(x_1156145534,e4),\n    max(mix(v4,v5,a4)*step(e4,x_1156145534)*step(x_1156145534,e5),\n    max(mix(v5,v6,a5)*step(e5,x_1156145534)*step(x_1156145534,e6),\n    max(mix(v6,v7,a6)*step(e6,x_1156145534)*step(x_1156145534,e7),mix(v7,v8,a7)*step(e7,x_1156145534)*step(x_1156145534,e8)\n  )))))));\n}\n\nvec4 greys (float x_2073311089) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_2073311089);\n  return mix(v0,v1,a0)*step(e0,x_2073311089)*step(x_2073311089,e1);\n}\n\nvec4 magma (float x_2664132035) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.01568627450980392,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.10980392156862745,0.06274509803921569,0.26666666666666666,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.30980392156862746,0.07058823529411765,0.4823529411764706,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.5058823529411764,0.1450980392156863,0.5058823529411764,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.7098039215686275,0.21176470588235294,0.47843137254901963,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8980392156862745,0.3137254901960784,0.39215686274509803,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.984313725490196,0.5294117647058824,0.3803921568627451,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.996078431372549,0.7607843137254902,0.5294117647058824,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9882352941176471,0.9921568627450981,0.7490196078431373,1);\n  float a0 = smoothstep(e0,e1,x_2664132035);\n  float a1 = smoothstep(e1,e2,x_2664132035);\n  float a2 = smoothstep(e2,e3,x_2664132035);\n  float a3 = smoothstep(e3,e4,x_2664132035);\n  float a4 = smoothstep(e4,e5,x_2664132035);\n  float a5 = smoothstep(e5,e6,x_2664132035);\n  float a6 = smoothstep(e6,e7,x_2664132035);\n  float a7 = smoothstep(e7,e8,x_2664132035);\n  return max(mix(v0,v1,a0)*step(e0,x_2664132035)*step(x_2664132035,e1),\n    max(mix(v1,v2,a1)*step(e1,x_2664132035)*step(x_2664132035,e2),\n    max(mix(v2,v3,a2)*step(e2,x_2664132035)*step(x_2664132035,e3),\n    max(mix(v3,v4,a3)*step(e3,x_2664132035)*step(x_2664132035,e4),\n    max(mix(v4,v5,a4)*step(e4,x_2664132035)*step(x_2664132035,e5),\n    max(mix(v5,v6,a5)*step(e5,x_2664132035)*step(x_2664132035,e6),\n    max(mix(v6,v7,a6)*step(e6,x_2664132035)*step(x_2664132035,e7),mix(v7,v8,a7)*step(e7,x_2664132035)*step(x_2664132035,e8)\n  )))))));\n}\n\nvec4 jet (float x_2485945205) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.5137254901960784,1);\n  const float e1 = 0.125;\n  const vec4 v1 = vec4(0,0.23529411764705882,0.6666666666666666,1);\n  const float e2 = 0.375;\n  const vec4 v2 = vec4(0.0196078431372549,1,1,1);\n  const float e3 = 0.625;\n  const vec4 v3 = vec4(1,1,0,1);\n  const float e4 = 0.875;\n  const vec4 v4 = vec4(0.9803921568627451,0,0,1);\n  const float e5 = 1.0;\n  const vec4 v5 = vec4(0.5019607843137255,0,0,1);\n  float a0 = smoothstep(e0,e1,x_2485945205);\n  float a1 = smoothstep(e1,e2,x_2485945205);\n  float a2 = smoothstep(e2,e3,x_2485945205);\n  float a3 = smoothstep(e3,e4,x_2485945205);\n  float a4 = smoothstep(e4,e5,x_2485945205);\n  return max(mix(v0,v1,a0)*step(e0,x_2485945205)*step(x_2485945205,e1),\n    max(mix(v1,v2,a1)*step(e1,x_2485945205)*step(x_2485945205,e2),\n    max(mix(v2,v3,a2)*step(e2,x_2485945205)*step(x_2485945205,e3),\n    max(mix(v3,v4,a3)*step(e3,x_2485945205)*step(x_2485945205,e4),mix(v4,v5,a4)*step(e4,x_2485945205)*step(x_2485945205,e5)\n  ))));\n}\n\nvec4 bone (float x_2693572714) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.376;\n  const vec4 v1 = vec4(0.32941176470588235,0.32941176470588235,0.4549019607843137,1);\n  const float e2 = 0.753;\n  const vec4 v2 = vec4(0.6627450980392157,0.7843137254901961,0.7843137254901961,1);\n  const float e3 = 1.0;\n  const vec4 v3 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_2693572714);\n  float a1 = smoothstep(e1,e2,x_2693572714);\n  float a2 = smoothstep(e2,e3,x_2693572714);\n  return max(mix(v0,v1,a0)*step(e0,x_2693572714)*step(x_2693572714,e1),\n    max(mix(v1,v2,a1)*step(e1,x_2693572714)*step(x_2693572714,e2),mix(v2,v3,a2)*step(e2,x_2693572714)*step(x_2693572714,e3)\n  ));\n}\n\nvec4 copper (float x_2606013778) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.804;\n  const vec4 v1 = vec4(1,0.6274509803921569,0.4,1);\n  const float e2 = 1.0;\n  const vec4 v2 = vec4(1,0.7803921568627451,0.4980392156862745,1);\n  float a0 = smoothstep(e0,e1,x_2606013778);\n  float a1 = smoothstep(e1,e2,x_2606013778);\n  return max(mix(v0,v1,a0)*step(e0,x_2606013778)*step(x_2606013778,e1),mix(v1,v2,a1)*step(e1,x_2606013778)*step(x_2606013778,e2)\n  );\n}\n\nvec4 density (float x_4072297271) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.21176470588235294,0.054901960784313725,0.1411764705882353,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.34901960784313724,0.09019607843137255,0.3137254901960784,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.43137254901960786,0.17647058823529413,0.5176470588235295,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.47058823529411764,0.30196078431372547,0.6980392156862745,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.47058823529411764,0.44313725490196076,0.8352941176470589,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.45098039215686275,0.592156862745098,0.8941176470588236,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.5254901960784314,0.7254901960784313,0.8901960784313725,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.6941176470588235,0.8392156862745098,0.8901960784313725,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9019607843137255,0.9450980392156862,0.9450980392156862,1);\n  float a0 = smoothstep(e0,e1,x_4072297271);\n  float a1 = smoothstep(e1,e2,x_4072297271);\n  float a2 = smoothstep(e2,e3,x_4072297271);\n  float a3 = smoothstep(e3,e4,x_4072297271);\n  float a4 = smoothstep(e4,e5,x_4072297271);\n  float a5 = smoothstep(e5,e6,x_4072297271);\n  float a6 = smoothstep(e6,e7,x_4072297271);\n  float a7 = smoothstep(e7,e8,x_4072297271);\n  return max(mix(v0,v1,a0)*step(e0,x_4072297271)*step(x_4072297271,e1),\n    max(mix(v1,v2,a1)*step(e1,x_4072297271)*step(x_4072297271,e2),\n    max(mix(v2,v3,a2)*step(e2,x_4072297271)*step(x_4072297271,e3),\n    max(mix(v3,v4,a3)*step(e3,x_4072297271)*step(x_4072297271,e4),\n    max(mix(v4,v5,a4)*step(e4,x_4072297271)*step(x_4072297271,e5),\n    max(mix(v5,v6,a5)*step(e5,x_4072297271)*step(x_4072297271,e6),\n    max(mix(v6,v7,a6)*step(e6,x_4072297271)*step(x_4072297271,e7),mix(v7,v8,a7)*step(e7,x_4072297271)*step(x_4072297271,e8)\n  )))))));\n}\n\nvec4 inferno (float x_524681000) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.01568627450980392,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.12156862745098039,0.047058823529411764,0.2823529411764706,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.3333333333333333,0.058823529411764705,0.42745098039215684,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.5333333333333333,0.13333333333333333,0.41568627450980394,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.7294117647058823,0.21176470588235294,0.3333333333333333,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8901960784313725,0.34901960784313724,0.2,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.9764705882352941,0.5490196078431373,0.0392156862745098,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.9764705882352941,0.788235294117647,0.19607843137254902,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9882352941176471,1,0.6431372549019608,1);\n  float a0 = smoothstep(e0,e1,x_524681000);\n  float a1 = smoothstep(e1,e2,x_524681000);\n  float a2 = smoothstep(e2,e3,x_524681000);\n  float a3 = smoothstep(e3,e4,x_524681000);\n  float a4 = smoothstep(e4,e5,x_524681000);\n  float a5 = smoothstep(e5,e6,x_524681000);\n  float a6 = smoothstep(e6,e7,x_524681000);\n  float a7 = smoothstep(e7,e8,x_524681000);\n  return max(mix(v0,v1,a0)*step(e0,x_524681000)*step(x_524681000,e1),\n    max(mix(v1,v2,a1)*step(e1,x_524681000)*step(x_524681000,e2),\n    max(mix(v2,v3,a2)*step(e2,x_524681000)*step(x_524681000,e3),\n    max(mix(v3,v4,a3)*step(e3,x_524681000)*step(x_524681000,e4),\n    max(mix(v4,v5,a4)*step(e4,x_524681000)*step(x_524681000,e5),\n    max(mix(v5,v6,a5)*step(e5,x_524681000)*step(x_524681000,e6),\n    max(mix(v6,v7,a6)*step(e6,x_524681000)*step(x_524681000,e7),mix(v7,v8,a7)*step(e7,x_524681000)*step(x_524681000,e8)\n  )))))));\n}\n\nvec4 cool (float x_3050536724) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.49019607843137253,0,0.7019607843137254,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.4549019607843137,0,0.8549019607843137,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.3843137254901961,0.2901960784313726,0.9294117647058824,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.26666666666666666,0.5725490196078431,0.9058823529411765,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0,0.8,0.7725490196078432,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0,0.9686274509803922,0.5725490196078431,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0,1,0.34509803921568627,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.1568627450980392,1,0.03137254901960784,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.5764705882352941,1,0,1);\n  float a0 = smoothstep(e0,e1,x_3050536724);\n  float a1 = smoothstep(e1,e2,x_3050536724);\n  float a2 = smoothstep(e2,e3,x_3050536724);\n  float a3 = smoothstep(e3,e4,x_3050536724);\n  float a4 = smoothstep(e4,e5,x_3050536724);\n  float a5 = smoothstep(e5,e6,x_3050536724);\n  float a6 = smoothstep(e6,e7,x_3050536724);\n  float a7 = smoothstep(e7,e8,x_3050536724);\n  return max(mix(v0,v1,a0)*step(e0,x_3050536724)*step(x_3050536724,e1),\n    max(mix(v1,v2,a1)*step(e1,x_3050536724)*step(x_3050536724,e2),\n    max(mix(v2,v3,a2)*step(e2,x_3050536724)*step(x_3050536724,e3),\n    max(mix(v3,v4,a3)*step(e3,x_3050536724)*step(x_3050536724,e4),\n    max(mix(v4,v5,a4)*step(e4,x_3050536724)*step(x_3050536724,e5),\n    max(mix(v5,v6,a5)*step(e5,x_3050536724)*step(x_3050536724,e6),\n    max(mix(v6,v7,a6)*step(e6,x_3050536724)*step(x_3050536724,e7),mix(v7,v8,a7)*step(e7,x_3050536724)*step(x_3050536724,e8)\n  )))))));\n}\n\nvec4 hot (float x_4009354686) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.3;\n  const vec4 v1 = vec4(0.9019607843137255,0,0,1);\n  const float e2 = 0.6;\n  const vec4 v2 = vec4(1,0.8235294117647058,0,1);\n  const float e3 = 1.0;\n  const vec4 v3 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_4009354686);\n  float a1 = smoothstep(e1,e2,x_4009354686);\n  float a2 = smoothstep(e2,e3,x_4009354686);\n  return max(mix(v0,v1,a0)*step(e0,x_4009354686)*step(x_4009354686,e1),\n    max(mix(v1,v2,a1)*step(e1,x_4009354686)*step(x_4009354686,e2),mix(v2,v3,a2)*step(e2,x_4009354686)*step(x_4009354686,e3)\n  ));\n}\n\nvec4 spring (float x_2270446359) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(1,0,1,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0,1);\n  float a0 = smoothstep(e0,e1,x_2270446359);\n  return mix(v0,v1,a0)*step(e0,x_2270446359)*step(x_2270446359,e1);\n}\n\nvec4 summer (float x_1101081466) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0.5019607843137255,0.4,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0.4,1);\n  float a0 = smoothstep(e0,e1,x_1101081466);\n  return mix(v0,v1,a0)*step(e0,x_1101081466)*step(x_1101081466,e1);\n}\n\nvec4 autumn (float x_3652770500) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(1,0,0,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0,1);\n  float a0 = smoothstep(e0,e1,x_3652770500);\n  return mix(v0,v1,a0)*step(e0,x_3652770500)*step(x_3652770500,e1);\n}\n\nvec4 winter (float x_1155565894) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,1,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(0,1,0.5019607843137255,1);\n  float a0 = smoothstep(e0,e1,x_1155565894);\n  return mix(v0,v1,a0)*step(e0,x_1155565894)*step(x_1155565894,e1);\n}\n\n// The texture (GL.LUMINANCE & Uint8Array).\nuniform sampler2D uBitmapTexture;\n\n// What are the dimensions of the texture (width, height)?\nuniform vec2 uTextureSize;\n\n// How many consecutive pixels should be aggregated together along each axis?\nuniform vec2 uAggSize;\n\n// What are the values of the color scale sliders?\nuniform vec2 uColorScaleRange;\n\n// The texture coordinate, varying (interpolated between values set by the vertex shader).\nvarying vec2 vTexCoord;\n\nvoid main(void) {\n  // Compute 1 pixel in texture coordinates\n  vec2 onePixel = vec2(1.0, 1.0) / uTextureSize;\n  \n  vec2 viewCoord = vec2(floor(vTexCoord.x * uTextureSize.x), floor(vTexCoord.y * uTextureSize.y));\n\n  // Compute (x % aggSizeX, y % aggSizeY).\n  // These values will be the number of values to the left / above the current position to consider.\n  vec2 modAggSize = vec2(-1.0 * mod(viewCoord.x, uAggSize.x), -1.0 * mod(viewCoord.y, uAggSize.y));\n\n  // Take the sum of values along each axis.\n  float intensitySum = 0.0;\n  vec2 offsetPixels = vec2(0.0, 0.0);\n\n  for(int i = 0; i < 16; i++) {\n    // Check to break outer loop early.\n    // Uniforms cannot be used as conditions in GLSL for loops.\n    if(float(i) >= uAggSize.y) {\n      // Done in the y direction.\n      break;\n    }\n\n    offsetPixels = vec2(offsetPixels.x, (modAggSize.y + float(i)) * onePixel.y);\n\n    for(int j = 0; j < 16; j++) {\n      // Check to break inner loop early.\n      // Uniforms cannot be used as conditions in GLSL for loops.\n      if(float(j) >= uAggSize.x) {\n        // Done in the x direction.\n        break;\n      }\n\n      offsetPixels = vec2((modAggSize.x + float(j)) * onePixel.x, offsetPixels.y);\n      intensitySum += texture2D(uBitmapTexture, vTexCoord + offsetPixels).r;\n    }\n  }\n  \n  // Compute the mean value.\n  float intensityMean = intensitySum / (uAggSize.x * uAggSize.y);\n  \n  // Re-scale using the color scale slider values.\n  float scaledIntensityMean = (intensityMean - uColorScaleRange[0]) / max(0.005, (uColorScaleRange[1] - uColorScaleRange[0]));\n\n  gl_FragColor = COLORMAP_FUNC(clamp(scaledIntensityMean, 0.0, 1.0));\n\n  geometry.uv = vTexCoord;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n";

// src/layers/HeatmapBitmapLayer.js
var defaultProps3 = {
  image: { type: "object", value: null, async: true },
  colormap: { type: "string", value: GLSL_COLORMAP_DEFAULT, compare: true },
  bounds: { type: "array", value: [1, 0, 0, 1], compare: true },
  aggSizeX: { type: "number", value: 8, compare: true },
  aggSizeY: { type: "number", value: 8, compare: true },
  colorScaleLo: { type: "number", value: 0, compare: true },
  colorScaleHi: { type: "number", value: 1, compare: true }
};
var HeatmapBitmapLayer = class extends _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["BitmapLayer"] {
  _getShaders(shaders) {
    this.props.extensions.forEach((extension) => {
      shaders = Object(_deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["_mergeShaders"])(shaders, extension.getShaders.call(this, extension));
    });
    return shaders;
  }
  getShaders() {
    const { colormap } = this.props;
    const fragmentShaderWithColormap = GLSL_COLORMAPS.includes(colormap) ? fragmentShader.replace(COLORMAP_SHADER_PLACEHOLDER, colormap) : fragmentShader.replace(COLORMAP_SHADER_PLACEHOLDER, GLSL_COLORMAP_DEFAULT);
    return this._getShaders({
      vs: vertexShader,
      fs: fragmentShaderWithColormap,
      modules: [_deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["project32"], _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["picking"]]
    });
  }
  updateState(args) {
    var _a2;
    super.updateState(args);
    this.loadTexture(this.props.image);
    const { props, oldProps } = args;
    if (props.colormap !== oldProps.colormap) {
      const { gl } = this.context;
      (_a2 = this.state.model) == null ? void 0 : _a2.delete();
      this.state.model = this._getModel(gl);
      this.getAttributeManager().invalidateAll();
    }
  }
  draw(opts) {
    const { uniforms } = opts;
    const { bitmapTexture, model } = this.state;
    const {
      aggSizeX,
      aggSizeY,
      colorScaleLo,
      colorScaleHi
    } = this.props;
    if (bitmapTexture && model) {
      model.setUniforms(Object.assign({}, uniforms, {
        uBitmapTexture: bitmapTexture,
        uTextureSize: [TILE_SIZE, TILE_SIZE],
        uAggSize: [aggSizeX, aggSizeY],
        uColorScaleRange: [colorScaleLo, colorScaleHi]
      })).draw();
    }
  }
  loadTexture(image) {
    const { gl } = this.context;
    if (this.state.bitmapTexture) {
      this.state.bitmapTexture.delete();
    }
    if (image instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_26__["Texture2D"]) {
      this.setState({
        bitmapTexture: image
      });
    } else if (image) {
      this.setState({
        bitmapTexture: new _luma_gl_core__WEBPACK_IMPORTED_MODULE_26__["Texture2D"](gl, {
          data: image,
          mipmaps: false,
          parameters: PIXELATED_TEXTURE_PARAMETERS,
          format: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].LUMINANCE,
          dataFormat: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].LUMINANCE,
          type: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].UNSIGNED_BYTE,
          width: TILE_SIZE,
          height: TILE_SIZE
        })
      });
    }
  }
};
HeatmapBitmapLayer.layerName = "HeatmapBitmapLayer";
HeatmapBitmapLayer.defaultProps = defaultProps3;

// src/components/heatmap/utils.js


function layerFilter({ layer, viewport }) {
  if (viewport.id === "axisLeft") {
    return layer.id.startsWith("axisLeft");
  }
  if (viewport.id === "axisTop") {
    return layer.id.startsWith("axisTop");
  }
  if (viewport.id === "heatmap") {
    return layer.id.startsWith("heatmap");
  }
  if (viewport.id === "colorsLeft") {
    return layer.id.startsWith("colorsLeft");
  }
  if (viewport.id === "colorsTop") {
    return layer.id.startsWith("colorsTop");
  }
  return false;
}
function getAxisSizes(transpose, geneLabelMaxLength, cellLabelMaxLength) {
  const axisOffsetLeft = lodash_clamp__WEBPACK_IMPORTED_MODULE_46___default()((transpose ? geneLabelMaxLength : cellLabelMaxLength) * AXIS_LABEL_TEXT_SIZE, AXIS_MIN_SIZE, AXIS_MAX_SIZE);
  const axisOffsetTop = lodash_clamp__WEBPACK_IMPORTED_MODULE_46___default()((transpose ? cellLabelMaxLength : geneLabelMaxLength) * AXIS_LABEL_TEXT_SIZE, AXIS_MIN_SIZE, AXIS_MAX_SIZE);
  return [axisOffsetLeft, axisOffsetTop];
}
function mouseToHeatmapPosition(mouseX, mouseY, {
  offsetLeft,
  offsetTop,
  targetX,
  targetY,
  scaleFactor,
  matrixWidth,
  matrixHeight,
  numRows,
  numCols
}) {
  const viewMouseX = mouseX - offsetLeft;
  const viewMouseY = mouseY - offsetTop;
  if (viewMouseX < 0 || viewMouseY < 0) {
    return [null, null];
  }
  const bboxTargetX = targetX * scaleFactor + matrixWidth * scaleFactor / 2;
  const bboxTargetY = targetY * scaleFactor + matrixHeight * scaleFactor / 2;
  const bboxLeft = bboxTargetX - matrixWidth / 2;
  const bboxTop = bboxTargetY - matrixHeight / 2;
  const zoomedOffsetLeft = bboxLeft / (matrixWidth * scaleFactor);
  const zoomedOffsetTop = bboxTop / (matrixHeight * scaleFactor);
  const zoomedViewMouseX = viewMouseX / (matrixWidth * scaleFactor);
  const zoomedViewMouseY = viewMouseY / (matrixHeight * scaleFactor);
  const zoomedMouseX = zoomedOffsetLeft + zoomedViewMouseX;
  const zoomedMouseY = zoomedOffsetTop + zoomedViewMouseY;
  const rowI = Math.floor(zoomedMouseY * numRows);
  const colI = Math.floor(zoomedMouseX * numCols);
  return [colI, rowI];
}
function heatmapToMousePosition(colI, rowI, {
  offsetLeft,
  offsetTop,
  targetX,
  targetY,
  scaleFactor,
  matrixWidth,
  matrixHeight,
  numRows,
  numCols
}) {
  let zoomedMouseY = null;
  let zoomedMouseX = null;
  if (rowI !== null) {
    const minY = -matrixHeight * scaleFactor / 2;
    const maxY = matrixHeight * scaleFactor / 2;
    const totalHeight = maxY - minY;
    const minInViewY = targetY * scaleFactor - matrixHeight / 2;
    const maxInViewY = targetY * scaleFactor + matrixHeight / 2;
    const inViewHeight = maxInViewY - minInViewY;
    const normalizedRowY = (rowI + 0.5) / numRows;
    const globalRowY = minY + normalizedRowY * totalHeight;
    if (minInViewY <= globalRowY && globalRowY <= maxInViewY) {
      zoomedMouseY = offsetTop + (globalRowY - minInViewY) / inViewHeight * matrixHeight;
    }
  }
  if (colI !== null) {
    const minX = -matrixWidth * scaleFactor / 2;
    const maxX = matrixWidth * scaleFactor / 2;
    const totalWidth = maxX - minX;
    const minInViewX = targetX * scaleFactor - matrixWidth / 2;
    const maxInViewX = targetX * scaleFactor + matrixWidth / 2;
    const inViewWidth = maxInViewX - minInViewX;
    const normalizedRowX = (colI + 0.5) / numCols;
    const globalRowX = minX + normalizedRowX * totalWidth;
    if (minInViewX <= globalRowX && globalRowX <= maxInViewX) {
      zoomedMouseX = offsetLeft + (globalRowX - minInViewX) / inViewWidth * matrixWidth;
    }
  }
  return [zoomedMouseX, zoomedMouseY];
}

// inline-worker:/Users/mkeller/research/dbmi/vitessce/vitessce/src/components/heatmap/heatmap.worker
var encodedJs2 = "";
var blob2 = typeof window !== "undefined" && window.Blob && new Blob([atob(encodedJs2)], { type: "text/javascript;charset=utf-8" });
function heatmap_default() {
  const objURL = blob2 && (window.URL || window.webkitURL).createObjectURL(blob2);
  try {
    return objURL ? new Worker(objURL) : new Worker("data:application/javascript;base64," + encodedJs2, { type: "module" });
  } finally {
    objURL && (window.URL || window.webkitURL).revokeObjectURL(objURL);
  }
}

// src/Pool.js
var defaultPoolSize2 = typeof navigator !== "undefined" ? navigator.hardwareConcurrency || 4 : null;
var Pool2 = class {
  constructor(Worker2) {
    this.workers = [];
    this.idleWorkers = [];
    this.waitQueue = [];
    this.decoder = null;
    for (let i = 0; i < defaultPoolSize2; ++i) {
      const w = new Worker2();
      this.workers.push(w);
      this.idleWorkers.push(w);
    }
  }
  process() {
    return __async(this, null, function* () {
      throw new Error('Pool needs to implement "process" method');
    });
  }
  waitForWorker() {
    return __async(this, null, function* () {
      const idleWorker = this.idleWorkers.pop();
      if (idleWorker) {
        return idleWorker;
      }
      const waiter = {};
      const promise = new Promise((resolve) => {
        waiter.resolve = resolve;
      });
      this.waitQueue.push(waiter);
      return promise;
    });
  }
  finishTask(currentWorker) {
    return __async(this, null, function* () {
      const waiter = this.waitQueue.pop();
      if (waiter) {
        waiter.resolve(currentWorker);
      } else {
        this.idleWorkers.push(currentWorker);
      }
    });
  }
  destroy() {
    for (let i = 0; i < this.workers.length; ++i) {
      this.workers[i].terminate();
    }
  }
};

// src/components/heatmap/HeatmapWorkerPool.js
var HeatmapPool = class extends Pool2 {
  constructor() {
    super(heatmap_default);
  }
  process(args) {
    return __async(this, null, function* () {
      const currentWorker = yield this.waitForWorker();
      return new Promise((resolve, reject) => {
        currentWorker.onmessage = (event) => {
          this.finishTask(currentWorker);
          resolve(event.data);
        };
        currentWorker.onerror = (error) => {
          this.finishTask(currentWorker);
          reject(error);
        };
        currentWorker.postMessage(["getTile", args], [args.data]);
      });
    });
  }
};

// src/components/heatmap/Heatmap.js
var Heatmap = Object(react__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((props, deckRef) => {
  const {
    uuid,
    theme,
    viewState: rawViewState,
    setViewState,
    width: viewWidth,
    height: viewHeight,
    expressionMatrix: expression,
    cellColors,
    colormap,
    colormapRange,
    clearPleaseWait,
    setComponentHover,
    setCellHighlight = createDefaultUpdateCellsHover("Heatmap"),
    setGeneHighlight = createDefaultUpdateGenesHover("Heatmap"),
    updateViewInfo = createDefaultUpdateViewInfo("Heatmap"),
    setIsRendering = () => {
    },
    transpose = false,
    variablesTitle = "Genes",
    observationsTitle = "Cells"
  } = props;
  const viewState = __spreadProps(__spreadValues({}, rawViewState), {
    target: transpose ? [rawViewState.target[1], rawViewState.target[0]] : rawViewState.target,
    minZoom: 0
  });
  const axisLeftTitle = transpose ? variablesTitle : observationsTitle;
  const axisTopTitle = transpose ? observationsTitle : variablesTitle;
  const workerPool = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => new HeatmapPool(), []);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (clearPleaseWait && expression) {
      clearPleaseWait("expression-matrix");
    }
  }, [clearPleaseWait, expression]);
  const tilesRef = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])();
  const dataRef = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])();
  const [axisLeftLabels, setAxisLeftLabels] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  const [axisTopLabels, setAxisTopLabels] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  const [tileIteration, incTileIteration] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useReducer"])((i) => i + 1, 0);
  const [backlog, setBacklog] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (expression && expression.matrix) {
      dataRef.current = copyUint8Array(expression.matrix);
    }
  }, [dataRef, expression]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (!expression) {
      return;
    }
    const newCellOrdering = !cellColors || cellColors.size === 0 ? expression.rows : Array.from(cellColors.keys());
    const oldCellOrdering = transpose ? axisTopLabels : axisLeftLabels;
    if (!lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(oldCellOrdering, newCellOrdering)) {
      if (transpose) {
        setAxisTopLabels(newCellOrdering);
      } else {
        setAxisLeftLabels(newCellOrdering);
      }
    }
  }, [expression, cellColors, axisTopLabels, axisLeftLabels, transpose]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (!expression) {
      return;
    }
    if (transpose) {
      setAxisLeftLabels(expression.cols);
    } else {
      setAxisTopLabels(expression.cols);
    }
  }, [expression, transpose]);
  const [cellLabelMaxLength, geneLabelMaxLength] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => {
    if (!expression) {
      return [0, 0];
    }
    return [
      Object(d3_array__WEBPACK_IMPORTED_MODULE_47__["max"])(expression.rows.map((cellId) => cellId.length)),
      Object(d3_array__WEBPACK_IMPORTED_MODULE_47__["max"])(expression.cols.map((geneId) => geneId.length))
    ];
  }, [expression]);
  const width = axisTopLabels.length;
  const height = axisLeftLabels.length;
  const [axisOffsetLeft, axisOffsetTop] = getAxisSizes(transpose, geneLabelMaxLength, cellLabelMaxLength);
  const offsetTop = axisOffsetTop + COLOR_BAR_SIZE;
  const offsetLeft = axisOffsetLeft + COLOR_BAR_SIZE;
  const matrixWidth = viewWidth - offsetLeft;
  const matrixHeight = viewHeight - offsetTop;
  const matrixLeft = -matrixWidth / 2;
  const matrixRight = matrixWidth / 2;
  const matrixTop = -matrixHeight / 2;
  const matrixBottom = matrixHeight / 2;
  const xTiles = Math.ceil(width / TILE_SIZE);
  const yTiles = Math.ceil(height / TILE_SIZE);
  const widthRatio = 1 - (TILE_SIZE - width % TILE_SIZE) / (xTiles * TILE_SIZE);
  const heightRatio = 1 - (TILE_SIZE - height % TILE_SIZE) / (yTiles * TILE_SIZE);
  const tileWidth = matrixWidth / widthRatio / xTiles;
  const tileHeight = matrixHeight / heightRatio / yTiles;
  const scaleFactor = __pow(2, viewState.zoom);
  const cellHeight = matrixHeight * scaleFactor / height;
  const cellWidth = matrixWidth * scaleFactor / width;
  const aggSizeX = lodash_clamp__WEBPACK_IMPORTED_MODULE_46___default()(__pow(2, Math.ceil(Math.log2(1 / cellWidth))), MIN_ROW_AGG, MAX_ROW_AGG);
  const aggSizeY = lodash_clamp__WEBPACK_IMPORTED_MODULE_46___default()(__pow(2, Math.ceil(Math.log2(1 / cellHeight))), MIN_ROW_AGG, MAX_ROW_AGG);
  const [targetX, targetY] = viewState.target;
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    updateViewInfo({
      uuid,
      project: (cellId, geneId) => {
        const colI = transpose ? axisTopLabels.indexOf(cellId) : axisTopLabels.indexOf(geneId);
        const rowI = transpose ? axisLeftLabels.indexOf(geneId) : axisLeftLabels.indexOf(cellId);
        return heatmapToMousePosition(colI, rowI, {
          offsetLeft,
          offsetTop,
          targetX: viewState.target[0],
          targetY: viewState.target[1],
          scaleFactor,
          matrixWidth,
          matrixHeight,
          numRows: height,
          numCols: width
        });
      }
    });
  }, [
    uuid,
    updateViewInfo,
    transpose,
    axisTopLabels,
    axisLeftLabels,
    offsetLeft,
    offsetTop,
    viewState,
    scaleFactor,
    matrixWidth,
    matrixHeight,
    height,
    width
  ]);
  const onViewStateChange = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])(({ viewState: nextViewState }) => {
    const { zoom: nextZoom } = nextViewState;
    const nextScaleFactor = __pow(2, nextZoom);
    const minTargetX = nextZoom === 0 ? 0 : -(matrixRight - matrixRight / nextScaleFactor);
    const maxTargetX = -1 * minTargetX;
    const minTargetY = nextZoom === 0 ? 0 : -(matrixBottom - matrixBottom / nextScaleFactor);
    const maxTargetY = -1 * minTargetY;
    const nextTarget = [
      lodash_clamp__WEBPACK_IMPORTED_MODULE_46___default()(nextViewState.target[0], minTargetX, maxTargetX),
      lodash_clamp__WEBPACK_IMPORTED_MODULE_46___default()(nextViewState.target[1], minTargetY, maxTargetY)
    ];
    setViewState({
      zoom: nextZoom,
      target: transpose ? [nextTarget[1], nextTarget[0]] : nextTarget
    });
  }, [matrixRight, matrixBottom, transpose, setViewState]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (!expression) {
      return;
    }
    if (axisTopLabels && axisLeftLabels && xTiles && yTiles) {
      setBacklog((prev) => [...prev, uuid_v4__WEBPACK_IMPORTED_MODULE_37___default()()]);
    }
  }, [dataRef, expression, axisTopLabels, axisLeftLabels, xTiles, yTiles]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (backlog.length < 1) {
      return;
    }
    const curr = backlog[backlog.length - 1];
    if (dataRef.current && dataRef.current.buffer.byteLength) {
      const { rows, cols, matrix } = expression;
      const promises = lodash_range__WEBPACK_IMPORTED_MODULE_40___default()(yTiles).map((i) => lodash_range__WEBPACK_IMPORTED_MODULE_40___default()(xTiles).map((j) => __async(void 0, null, function* () {
        return workerPool.process({
          curr,
          tileI: i,
          tileJ: j,
          tileSize: TILE_SIZE,
          cellOrdering: transpose ? axisTopLabels : axisLeftLabels,
          rows,
          cols,
          transpose,
          data: matrix.buffer.slice()
        });
      })));
      const process2 = () => __async(void 0, null, function* () {
        const tiles = yield Promise.all(promises.flat());
        tilesRef.current = tiles.map((i) => i.tile);
        incTileIteration();
        dataRef.current = new Uint8Array(tiles[0].buffer);
        const { curr: currWork } = tiles[0];
        setBacklog((prev) => {
          const currIndex = prev.indexOf(currWork);
          return prev.slice(currIndex + 1, prev.length);
        });
      });
      process2();
    }
  }, [axisLeftLabels, axisTopLabels, backlog, expression, transpose, xTiles, yTiles, workerPool]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    setIsRendering(backlog.length > 0);
  }, [backlog, setIsRendering]);
  const heatmapLayers = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => {
    if (!tilesRef.current || backlog.length) {
      return [];
    }
    function getLayer(i, j, tile) {
      return new HeatmapBitmapLayer({
        id: `heatmapLayer-${tileIteration}-${i}-${j}`,
        image: tile,
        bounds: [
          matrixLeft + j * tileWidth,
          matrixTop + i * tileHeight,
          matrixLeft + (j + 1) * tileWidth,
          matrixTop + (i + 1) * tileHeight
        ],
        aggSizeX,
        aggSizeY,
        colormap,
        colorScaleLo: colormapRange[0],
        colorScaleHi: colormapRange[1],
        updateTriggers: {
          image: [axisLeftLabels, axisTopLabels],
          bounds: [tileHeight, tileWidth]
        }
      });
    }
    const layers2 = tilesRef.current.map((tile, index) => getLayer(Math.floor(index / xTiles), index % xTiles, tile));
    return layers2;
  }, [
    backlog,
    tileIteration,
    matrixLeft,
    tileWidth,
    matrixTop,
    tileHeight,
    aggSizeX,
    aggSizeY,
    colormap,
    colormapRange,
    axisLeftLabels,
    axisTopLabels,
    xTiles
  ]);
  const axisTopLabelData = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => axisTopLabels.map((d, i) => [i, d]), [axisTopLabels]);
  const axisLeftLabelData = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => axisLeftLabels.map((d, i) => [i, d]), [axisLeftLabels]);
  const textLayers = [
    new HeatmapCompositeTextLayer({
      targetX,
      targetY,
      scaleFactor,
      axisLeftLabelData,
      matrixTop,
      height,
      matrixHeight,
      cellHeight,
      cellWidth,
      axisTopLabelData,
      matrixLeft,
      width,
      matrixWidth,
      viewHeight,
      viewWidth,
      theme,
      axisLeftTitle,
      axisTopTitle,
      axisOffsetLeft,
      axisOffsetTop
    })
  ];
  const cellColorsTiles = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => {
    if (!cellColors) {
      return null;
    }
    let cellId;
    let offset;
    let color;
    let rowI;
    const cellOrdering = transpose ? axisTopLabels : axisLeftLabels;
    const colorBarTileWidthPx = transpose ? TILE_SIZE : 1;
    const colorBarTileHeightPx = transpose ? 1 : TILE_SIZE;
    const result = lodash_range__WEBPACK_IMPORTED_MODULE_40___default()(transpose ? xTiles : yTiles).map((i) => {
      const tileData = new Uint8ClampedArray(TILE_SIZE * 1 * 4);
      lodash_range__WEBPACK_IMPORTED_MODULE_40___default()(TILE_SIZE).forEach((tileY) => {
        rowI = i * TILE_SIZE + tileY;
        if (rowI < cellOrdering.length) {
          cellId = cellOrdering[rowI];
          color = cellColors.get(cellId);
          offset = (transpose ? tileY : TILE_SIZE - tileY - 1) * 4;
          if (color) {
            const [rValue, gValue, bValue] = color;
            tileData[offset + 0] = rValue;
            tileData[offset + 1] = gValue;
            tileData[offset + 2] = bValue;
            tileData[offset + 3] = 255;
          }
        }
      });
      return new ImageData(tileData, colorBarTileWidthPx, colorBarTileHeightPx);
    });
    return result;
  }, [cellColors, transpose, axisTopLabels, axisLeftLabels, xTiles, yTiles]);
  const cellColorsLayers = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => cellColorsTiles ? cellColorsTiles.map((tile, i) => new PixelatedBitmapLayer({
    id: `${transpose ? "colorsTopLayer" : "colorsLeftLayer"}-${i}-${uuid_v4__WEBPACK_IMPORTED_MODULE_37___default()()}`,
    image: tile,
    bounds: transpose ? [
      matrixLeft + i * tileWidth,
      -matrixHeight / 2,
      matrixLeft + (i + 1) * tileWidth,
      matrixHeight / 2
    ] : [
      -matrixWidth / 2,
      matrixTop + i * tileHeight,
      matrixWidth / 2,
      matrixTop + (i + 1) * tileHeight
    ]
  })) : [], [
    cellColorsTiles,
    matrixTop,
    matrixLeft,
    matrixHeight,
    matrixWidth,
    tileWidth,
    tileHeight,
    transpose
  ]);
  const layers = heatmapLayers.concat(textLayers).concat(cellColorsLayers);
  function onHover(info, event) {
    if (!expression) {
      return;
    }
    const { x: mouseX, y: mouseY } = event.offsetCenter;
    const [colI, rowI] = mouseToHeatmapPosition(mouseX, mouseY, {
      offsetLeft,
      offsetTop,
      targetX,
      targetY,
      scaleFactor,
      matrixWidth,
      matrixHeight,
      numRows: height,
      numCols: width
    });
    if (colI === null) {
      if (transpose) {
        setCellHighlight(null);
      } else {
        setGeneHighlight(null);
      }
    }
    if (rowI === null) {
      if (transpose) {
        setGeneHighlight(null);
      } else {
        setCellHighlight(null);
      }
    }
    const obsI = expression.rows.indexOf(transpose ? axisTopLabels[colI] : axisLeftLabels[rowI]);
    const varI = expression.cols.indexOf(transpose ? axisLeftLabels[rowI] : axisTopLabels[colI]);
    const obsId = expression.rows[obsI];
    const varId = expression.cols[varI];
    if (setComponentHover) {
      setComponentHover();
    }
    setCellHighlight(obsId || null);
    setGeneHighlight(varId || null);
  }
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deck_gl__WEBPACK_IMPORTED_MODULE_45__["default"], {
    id: `deckgl-overlay-${uuid}`,
    ref: deckRef,
    views: [
      new _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["OrthographicView"]({
        id: "heatmap",
        controller: true,
        x: offsetLeft,
        y: offsetTop,
        width: matrixWidth,
        height: matrixHeight
      }),
      new _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["OrthographicView"]({
        id: "axisLeft",
        controller: false,
        x: transpose ? COLOR_BAR_SIZE : 0,
        y: offsetTop,
        width: axisOffsetLeft,
        height: matrixHeight
      }),
      new _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["OrthographicView"]({
        id: "axisTop",
        controller: false,
        x: offsetLeft,
        y: transpose ? 0 : COLOR_BAR_SIZE,
        width: matrixWidth,
        height: axisOffsetTop
      }),
      new _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["OrthographicView"]({
        id: "colorsLeft",
        controller: false,
        x: axisOffsetLeft,
        y: offsetTop,
        width: COLOR_BAR_SIZE - AXIS_MARGIN,
        height: matrixHeight
      }),
      new _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["OrthographicView"]({
        id: "colorsTop",
        controller: false,
        x: offsetLeft,
        y: axisOffsetTop,
        width: matrixWidth,
        height: COLOR_BAR_SIZE - AXIS_MARGIN
      })
    ],
    layers,
    layerFilter,
    getCursor: (interactionState) => interactionState.isDragging ? "grabbing" : "default",
    glOptions: DEFAULT_GL_OPTIONS,
    onViewStateChange,
    viewState,
    onHover
  });
});
var Heatmap_default = Heatmap;

// src/components/heatmap/HeatmapTooltipSubscriber.js


// src/components/tooltip/Tooltip2D.js


// src/components/tooltip/Tooltip.js




// src/components/tooltip/styles.js

var styles2 = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["makeStyles"])(() => ({
  tooltipAnchor: {
    position: "relative",
    width: "0px",
    height: "0px",
    pointerEvents: "none",
    userSelect: "none"
  },
  tooltipContent: {
    opacity: 0.9,
    padding: "5px",
    pointerEvents: "none",
    "& table > tbody > tr > th, & table > tbody > tr > td": {
      fontSize: "80%",
      opacity: 0.8,
      outline: 0,
      padding: "0 2px"
    },
    "& table": {
      borderCollapse: "collapse"
    }
  }
}));

// src/components/tooltip/Tooltip.js
function Tooltip(props) {
  const {
    x,
    y,
    parentWidth,
    parentHeight,
    children
  } = props;
  const ref = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])();
  const classes = styles2();
  const [placementX, setPlacementX] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])("start");
  const [placementY, setPlacementY] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])("bottom");
  const getTooltipContainer = useVitessceContainer(ref);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (ref && ref.current) {
      const flipX = x > parentWidth / 2;
      const flipY = y > parentHeight / 2;
      setPlacementX(flipX ? "end" : "start");
      setPlacementY(flipY ? "top" : "bottom");
      ref.current.style.left = `${x + (flipX ? -20 : 5)}px`;
      ref.current.style.top = `${y + (flipY ? -20 : 5)}px`;
    }
  }, [x, y, parentWidth, parentHeight]);
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    ref,
    className: classes.tooltipAnchor
  }, ref && ref.current ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Popper__WEBPACK_IMPORTED_MODULE_12__["default"], {
    open: true,
    anchorEl: ref.current,
    container: getTooltipContainer,
    transition: true,
    placement: `${placementY}-${placementX}`
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_11__["default"], {
    elevation: 4,
    className: classes.tooltipContent
  }, children)) : null);
}

// src/components/tooltip/Tooltip2D.js
function Tooltip2D(props) {
  const {
    parentUuid,
    sourceUuid,
    x,
    y,
    parentWidth,
    parentHeight,
    children
  } = props;
  if (x < 0 || x > parentWidth || y < 0 || y > parentHeight) {
    return null;
  }
  const isTooltipVisible = parentUuid === sourceUuid;
  const crosshairWidth = 1;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, isTooltipVisible ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Tooltip, {
    x,
    y,
    parentWidth,
    parentHeight
  }, children) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, x !== null ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "cell-emphasis-crosshair",
    style: {
      left: `${x - crosshairWidth / 2}px`,
      top: 0,
      width: `${crosshairWidth}px`,
      height: `${parentHeight}px`
    }
  }) : null, y !== null ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "cell-emphasis-crosshair",
    style: {
      left: 0,
      top: `${y - crosshairWidth / 2}px`,
      width: `${parentWidth}px`,
      height: `${crosshairWidth}px`
    }
  }) : null));
}

// src/components/tooltip/TooltipContent.js

function TooltipContent(props) {
  const {
    info
  } = props;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("table", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tbody", null, Object.entries(info).map(([key, value]) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", {
    key
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null, key), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", null, value)))));
}

// src/components/heatmap/HeatmapTooltipSubscriber.js
function HeatmapTooltipSubscriber(props) {
  const {
    parentUuid,
    width,
    height,
    transpose,
    getCellInfo,
    getGeneInfo,
    cellHighlight,
    geneHighlight
  } = props;
  const sourceUuid = useComponentHover();
  const viewInfo = useComponentViewInfo(parentUuid);
  const [cellInfo, cellCoord] = cellHighlight && getCellInfo ? [
    getCellInfo(cellHighlight),
    viewInfo && viewInfo.project ? viewInfo.project(cellHighlight, null)[transpose ? 0 : 1] : null
  ] : [null, null];
  const [geneInfo, geneCoord] = geneHighlight && getGeneInfo ? [
    getGeneInfo(geneHighlight),
    viewInfo && viewInfo.project ? viewInfo.project(null, geneHighlight)[transpose ? 1 : 0] : null
  ] : [null, null];
  const x = transpose ? cellCoord : geneCoord;
  const y = transpose ? geneCoord : cellCoord;
  return cellInfo || geneInfo ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Tooltip2D, {
    x,
    y,
    parentUuid,
    parentWidth: width,
    parentHeight: height,
    sourceUuid
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TooltipContent, {
    info: __spreadValues(__spreadValues({}, geneInfo), cellInfo)
  })) : null;
}

// src/components/heatmap/HeatmapOptions.js






// src/components/shared-plot-options/styles.js

var useStyles2 = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["makeStyles"])((theme) => ({
  box: {
    boxSizing: "border-box"
  },
  checkbox: {
    padding: "3px",
    color: theme.palette.primaryForeground,
    "&:checked": {
      color: theme.palette.primaryForeground
    },
    "& input": {
      height: "100%"
    }
  },
  slider: {
    color: theme.palette.primaryForeground,
    minWidth: "60px",
    padding: "10px 0 10px 0"
  },
  sliderValueLabel: {
    "& span": {
      "& span": {
        color: theme.palette.primaryBackground
      }
    }
  },
  tableContainer: {
    overflow: "hidden",
    overflowX: "hidden !important"
  },
  labelCell: {
    padding: "2px 8px 2px 16px"
  },
  inputCell: {
    padding: "2px 16px 2px 8px",
    overflow: "visible"
  },
  select: {
    "& select": {
      fontSize: ".875rem"
    }
  },
  selectRoot: {
    padding: 0,
    height: "auto"
  }
}));

// src/components/shared-plot-options/OptionsContainer.js





function OptionsContainer(props) {
  const {
    children
  } = props;
  const classes = useStyles2();
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Box__WEBPACK_IMPORTED_MODULE_51__["default"], {
    className: classes.box
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableContainer__WEBPACK_IMPORTED_MODULE_54__["default"], {
    className: classes.tableContainer
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Table__WEBPACK_IMPORTED_MODULE_52__["default"], {
    className: classes.table,
    size: "small"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableBody__WEBPACK_IMPORTED_MODULE_53__["default"], null, children))));
}

// src/components/shared-plot-options/OptionSelect.js


function OptionSelect(props) {
  const { classes: classesProp = {} } = props;
  const classes = useStyles2();
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Select__WEBPACK_IMPORTED_MODULE_55__["default"], __spreadProps(__spreadValues({
    native: true,
    disableUnderline: true
  }, props), {
    classes: __spreadValues({
      root: classes.selectRoot
    }, classesProp)
  }));
}

// src/components/heatmap/HeatmapOptions.js
function HeatmapOptions(props) {
  const {
    geneExpressionColormap,
    setGeneExpressionColormap,
    geneExpressionColormapRange,
    setGeneExpressionColormapRange
  } = props;
  const classes = useStyles2();
  function handleGeneExpressionColormapChange(event) {
    setGeneExpressionColormap(event.target.value);
  }
  function handleColormapRangeChange(event, value) {
    setGeneExpressionColormapRange(value);
  }
  const handleColormapRangeChangeDebounced = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])(lodash_debounce__WEBPACK_IMPORTED_MODULE_16___default()(handleColormapRangeChange, 5, { trailing: true }), [handleColormapRangeChange]);
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(OptionsContainer, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_50__["default"], null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.labelCell,
    htmlFor: "gene-expression-colormap-select"
  }, "Gene Expression Colormap"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.inputCell
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(OptionSelect, {
    className: classes.select,
    value: geneExpressionColormap,
    onChange: handleGeneExpressionColormapChange,
    inputProps: {
      id: "gene-expression-colormap-select"
    }
  }, GLSL_COLORMAPS.map((cmap) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
    key: cmap,
    value: cmap
  }, cmap))))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_50__["default"], null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.labelCell
  }, "Gene Expression Colormap Range"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.inputCell
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_48__["default"], {
    classes: { root: classes.slider, valueLabel: classes.sliderValueLabel },
    value: geneExpressionColormapRange,
    onChange: handleColormapRangeChangeDebounced,
    "aria-labelledby": "gene-expression-colormap-range-slider",
    valueLabelDisplay: "auto",
    step: 5e-3,
    min: 0,
    max: 1
  }))));
}

// src/components/heatmap/HeatmapSubscriber.js
var HEATMAP_DATA_TYPES = ["cells", "cell-sets", "expression-matrix"];
function HeatmapSubscriber(props) {
  const {
    uuid,
    coordinationScopes,
    removeGridComponent,
    theme,
    transpose,
    observationsLabelOverride: observationsLabel = "cell",
    observationsPluralLabelOverride: observationsPluralLabel = `${observationsLabel}s`,
    variablesLabelOverride: variablesLabel = "gene",
    variablesPluralLabelOverride: variablesPluralLabel = `${variablesLabel}s`,
    disableTooltip = false,
    title: title17 = "Heatmap"
  } = props;
  const loaders = useLoaders();
  const setComponentHover = useSetComponentHover();
  const setComponentViewInfo = useSetComponentViewInfo(uuid);
  const [{
    dataset,
    heatmapZoomX: zoomX,
    heatmapTargetX: targetX,
    heatmapTargetY: targetY,
    geneSelection,
    cellHighlight,
    geneHighlight,
    cellSetSelection,
    cellSetColor,
    additionalCellSets,
    geneExpressionColormap,
    geneExpressionColormapRange
  }, {
    setHeatmapZoomX: setZoomX,
    setHeatmapZoomY: setZoomY,
    setHeatmapTargetX: setTargetX,
    setHeatmapTargetY: setTargetY,
    setCellHighlight,
    setGeneHighlight,
    setCellSetSelection,
    setCellSetColor,
    setGeneExpressionColormapRange,
    setGeneExpressionColormap
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.heatmap, coordinationScopes);
  const observationsTitle = capitalize(observationsPluralLabel);
  const variablesTitle = capitalize(variablesPluralLabel);
  const [isRendering, setIsRendering] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(HEATMAP_DATA_TYPES);
  const [urls, addUrl, resetUrls] = useUrls();
  const [width, height, deckRef] = useDeckCanvasSize();
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    resetUrls();
    resetReadyItems();
  }, [loaders, dataset]);
  const [cells] = useCellsData(loaders, dataset, setItemIsReady, addUrl, true);
  const [expressionMatrix] = useExpressionMatrixData(loaders, dataset, setItemIsReady, addUrl, true);
  const [cellSets] = useCellSetsData(loaders, dataset, setItemIsReady, addUrl, false, { setCellSetSelection, setCellSetColor }, { cellSetSelection, cellSetColor });
  const mergedCellSets = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => mergeCellSets(cellSets, additionalCellSets), [cellSets, additionalCellSets]);
  const cellColors = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => getCellColors({
    cellColorEncoding: "cellSetSelection",
    geneSelection,
    cellSets: mergedCellSets,
    cellSetSelection,
    cellSetColor,
    expressionDataAttrs: expressionMatrix,
    theme
  }), [
    mergedCellSets,
    geneSelection,
    theme,
    cellSetColor,
    cellSetSelection,
    expressionMatrix
  ]);
  const getCellInfo = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])((cellId) => {
    if (cellId) {
      const cellInfo = cells[cellId];
      return __spreadValues({
        [`${capitalize(observationsLabel)} ID`]: cellId
      }, cellInfo ? cellInfo.factors : {});
    }
    return null;
  }, [cells, observationsLabel]);
  const getGeneInfo = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])((geneId) => {
    if (geneId) {
      return { [`${capitalize(variablesLabel)} ID`]: geneId };
    }
    return null;
  }, [variablesLabel]);
  const cellsCount = expressionMatrix && expressionMatrix.rows ? expressionMatrix.rows.length : 0;
  const genesCount = expressionMatrix && expressionMatrix.cols ? expressionMatrix.cols.length : 0;
  const selectedCount = cellColors.size;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TitleInfo, {
    title: title17,
    info: `${cellsCount} ${pluralize(observationsLabel, observationsPluralLabel, cellsCount)} \xD7 ${genesCount} ${pluralize(variablesLabel, variablesPluralLabel, genesCount)},
             with ${selectedCount} ${pluralize(observationsLabel, observationsPluralLabel, selectedCount)} selected`,
    urls,
    theme,
    removeGridComponent,
    isReady: isReady && !isRendering,
    options: /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(HeatmapOptions, {
      geneExpressionColormap,
      setGeneExpressionColormap,
      geneExpressionColormapRange,
      setGeneExpressionColormapRange
    })
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Heatmap_default, {
    ref: deckRef,
    transpose,
    viewState: { zoom: zoomX, target: [targetX, targetY] },
    setViewState: ({ zoom, target }) => {
      setZoomX(zoom);
      setZoomY(zoom);
      setTargetX(target[0]);
      setTargetY(target[1]);
    },
    colormapRange: geneExpressionColormapRange,
    setColormapRange: setGeneExpressionColormapRange,
    height,
    width,
    theme,
    uuid,
    expressionMatrix,
    cellColors,
    colormap: geneExpressionColormap,
    setIsRendering,
    setCellHighlight,
    setGeneHighlight,
    setComponentHover: () => {
      setComponentHover(uuid);
    },
    updateViewInfo: setComponentViewInfo,
    observationsTitle,
    variablesTitle
  }), !disableTooltip && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(HeatmapTooltipSubscriber, {
    parentUuid: uuid,
    width,
    height,
    transpose,
    getCellInfo,
    getGeneInfo,
    cellHighlight,
    geneHighlight
  }));
}

// src/components/spatial/SpatialSubscriber.js


// src/components/spatial/Spatial.js






// src/layers/selection-utils.js



// src/layers/SelectionLayer.js










var EDIT_TYPE_ADD = "addFeature";
var EDIT_TYPE_CLEAR = "clearFeatures";
var ClickableDrawRectangleMode = class extends _nebula_gl_edit_modes__WEBPACK_IMPORTED_MODULE_63__["DrawRectangleMode"] {
  handleClick(event, props) {
    props.onEdit({ editType: EDIT_TYPE_CLEAR });
  }
};
var ClickableDrawPolygonByDraggingMode = class extends _nebula_gl_edit_modes__WEBPACK_IMPORTED_MODULE_63__["DrawPolygonByDraggingMode"] {
  handleClick(event, props) {
    props.onEdit({ editType: EDIT_TYPE_CLEAR });
  }
};
var MODE_MAP = {
  [nebula_gl__WEBPACK_IMPORTED_MODULE_61__["SELECTION_TYPE"].RECTANGLE]: ClickableDrawRectangleMode,
  [nebula_gl__WEBPACK_IMPORTED_MODULE_61__["SELECTION_TYPE"].POLYGON]: ClickableDrawPolygonByDraggingMode
};
var defaultProps4 = {
  selectionType: nebula_gl__WEBPACK_IMPORTED_MODULE_61__["SELECTION_TYPE"].RECTANGLE,
  layerIds: [],
  onSelect: () => {
  }
};
var EMPTY_DATA = {
  type: "FeatureCollection",
  features: []
};
var LAYER_ID_GEOJSON = "selection-geojson";
var PASS_THROUGH_PROPS = [
  "lineWidthScale",
  "lineWidthMinPixels",
  "lineWidthMaxPixels",
  "lineWidthUnits",
  "lineJointRounded",
  "lineMiterLimit",
  "pointRadiusScale",
  "pointRadiusMinPixels",
  "pointRadiusMaxPixels",
  "lineDashJustified",
  "getLineColor",
  "getFillColor",
  "getRadius",
  "getLineWidth",
  "getLineDashArray",
  "getTentativeLineDashArray",
  "getTentativeLineColor",
  "getTentativeFillColor",
  "getTentativeLineWidth",
  "editHandlePointRadiusScale",
  "editHandlePointRadiusMinPixels",
  "editHandlePointRadiusMaxPixels",
  "getEditHandlePointColor",
  "getEditHandlePointRadius",
  "modeHandlers"
];
var SelectionLayer = class extends deck_gl__WEBPACK_IMPORTED_MODULE_45__["CompositeLayer"] {
  _selectPolygonObjects(coordinates) {
    const {
      onSelect,
      getCellCoords,
      cellsQuadTree,
      flipY
    } = this.props;
    const flippedCoordinates = flipY ? coordinates.map((poly) => poly.map((p) => [p[0], -p[1]])) : coordinates;
    const selectedPolygon = Object(_turf_helpers__WEBPACK_IMPORTED_MODULE_41__["polygon"])(flippedCoordinates);
    const pickingInfos = [];
    cellsQuadTree.visit((node, x0, y0, x1, y1) => {
      const nodePoints = [[[x0, y0], [x1, y0], [x1, y1], [x0, y1], [x0, y0]]];
      const nodePolygon = Object(_turf_helpers__WEBPACK_IMPORTED_MODULE_41__["polygon"])(nodePoints);
      const nodePolygonContainsSelectedPolygon = Object(_turf_boolean_contains__WEBPACK_IMPORTED_MODULE_58__["default"])(nodePolygon, selectedPolygon);
      const nodePolygonWithinSelectedPolygon = Object(_turf_boolean_within__WEBPACK_IMPORTED_MODULE_57__["default"])(nodePolygon, selectedPolygon);
      const nodePolygonOverlapsSelectedPolgyon = Object(_turf_boolean_overlap__WEBPACK_IMPORTED_MODULE_59__["default"])(nodePolygon, selectedPolygon);
      if (!nodePolygonContainsSelectedPolygon && !nodePolygonWithinSelectedPolygon && !nodePolygonOverlapsSelectedPolgyon) {
        return true;
      }
      if (node.data && Object(_turf_boolean_point_in_polygon__WEBPACK_IMPORTED_MODULE_60__["default"])(Object(_turf_helpers__WEBPACK_IMPORTED_MODULE_41__["point"])([].slice.call(getCellCoords(node.data[1]))), selectedPolygon)) {
        pickingInfos.push(node.data);
      }
      return false;
    });
    onSelect({ pickingInfos });
  }
  renderLayers() {
    const { onSelect } = this.props;
    const mode = MODE_MAP[this.props.selectionType] || _nebula_gl_edit_modes__WEBPACK_IMPORTED_MODULE_63__["ViewMode"];
    const inheritedProps = {};
    PASS_THROUGH_PROPS.forEach((p) => {
      if (this.props[p] !== void 0)
        inheritedProps[p] = this.props[p];
    });
    const layers = [
      new _nebula_gl_layers__WEBPACK_IMPORTED_MODULE_62__["EditableGeoJsonLayer"](this.getSubLayerProps(__spreadValues({
        id: LAYER_ID_GEOJSON,
        pickable: true,
        mode,
        modeConfig: {
          dragToDraw: true
        },
        selectedFeatureIndexes: [],
        data: EMPTY_DATA,
        onEdit: ({ updatedData, editType }) => {
          if (editType === EDIT_TYPE_ADD) {
            const { coordinates } = updatedData.features[0].geometry;
            this._selectPolygonObjects(coordinates);
          } else if (editType === EDIT_TYPE_CLEAR) {
            onSelect({ pickingInfos: [] });
          }
        },
        _subLayerProps: {
          guides: {
            pointType: "circle",
            _subLayerProps: {
              "points-circle": {
                type: _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["ScatterplotLayer"],
                radiusScale: 1,
                stroked: true,
                getLineWidth: 1,
                radiusMinPixels: 1,
                radiusMaxPixels: 3,
                getRadius: 2
              }
            }
          }
        }
      }, inheritedProps)))
    ];
    return layers;
  }
};
SelectionLayer.layerName = "SelectionLayer";
SelectionLayer.defaultProps = defaultProps4;

// src/layers/selection-utils.js
function getBaseLayerId(layerId) {
  return `base-${layerId}`;
}
function getSelectionLayers(tool, zoom, layerId, getCellCoords, updateCellsSelection, cellsQuadTree, flipY = false) {
  if (!tool) {
    return [];
  }
  const cellBaseLayerId = getBaseLayerId(layerId);
  const editHandlePointRadius = 5 / (zoom + 16);
  return [new SelectionLayer({
    id: "selection",
    flipY,
    cellsQuadTree,
    getCellCoords,
    coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["COORDINATE_SYSTEM"].CARTESIAN,
    selectionType: tool,
    onSelect: ({ pickingInfos }) => {
      const cellIds = pickingInfos.map((cellObj) => cellObj[0]);
      if (updateCellsSelection) {
        updateCellsSelection(cellIds);
      }
    },
    layerIds: [cellBaseLayerId],
    getTentativeFillColor: () => [255, 255, 255, 95],
    getTentativeLineColor: () => [143, 143, 143, 255],
    getTentativeLineDashArray: () => [7, 4],
    lineWidthMinPixels: 2,
    lineWidthMaxPixels: 2,
    getEditHandlePointColor: () => [255, 255, 255, 255],
    getEditHandlePointRadius: () => editHandlePointRadius,
    editHandlePointRadiusScale: 1,
    editHandlePointRadiusMinPixels: editHandlePointRadius,
    editHandlePointRadiusMaxPixels: 2 * editHandlePointRadius
  })];
}

// src/components/spatial/utils.js






// src/layers/BitmaskLayer.js




// src/layers/bitmask-layer-shaders.js
var vs2 = "\n#define SHADER_NAME bitmask-layer-vertex-shader\n\nattribute vec2 texCoords;\nattribute vec3 positions;\nattribute vec3 positions64Low;\nattribute vec3 instancePickingColors;\n\nvarying vec2 vTexCoord;\n\nvoid main(void) {\n  geometry.worldPosition = positions;\n  geometry.uv = texCoords;\n  geometry.pickingColor = instancePickingColors;\n  gl_Position = project_position_to_clipspace(positions, positions64Low, vec3(0.0), geometry.position);\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  vTexCoord = texCoords;\n  vec4 color = vec4(0.0);\n  DECKGL_FILTER_COLOR(color, geometry);\n}\n";
var fs2 = "\n#define SHADER_NAME bitmask-layer-fragment-shader\nprecision highp float;\n\nvec4 plasma (float x_1306414511) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.050980392156862744,0.03137254901960784,0.5294117647058824,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.29411764705882354,0.011764705882352941,0.6313725490196078,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.49019607843137253,0.011764705882352941,0.6588235294117647,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.6588235294117647,0.13333333333333333,0.5882352941176471,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.796078431372549,0.27450980392156865,0.4745098039215686,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8980392156862745,0.4196078431372549,0.36470588235294116,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.9725490196078431,0.5803921568627451,0.2549019607843137,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.9921568627450981,0.7647058823529411,0.1568627450980392,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9411764705882353,0.9764705882352941,0.12941176470588237,1);\n  float a0 = smoothstep(e0,e1,x_1306414511);\n  float a1 = smoothstep(e1,e2,x_1306414511);\n  float a2 = smoothstep(e2,e3,x_1306414511);\n  float a3 = smoothstep(e3,e4,x_1306414511);\n  float a4 = smoothstep(e4,e5,x_1306414511);\n  float a5 = smoothstep(e5,e6,x_1306414511);\n  float a6 = smoothstep(e6,e7,x_1306414511);\n  float a7 = smoothstep(e7,e8,x_1306414511);\n  return max(mix(v0,v1,a0)*step(e0,x_1306414511)*step(x_1306414511,e1),\n    max(mix(v1,v2,a1)*step(e1,x_1306414511)*step(x_1306414511,e2),\n    max(mix(v2,v3,a2)*step(e2,x_1306414511)*step(x_1306414511,e3),\n    max(mix(v3,v4,a3)*step(e3,x_1306414511)*step(x_1306414511,e4),\n    max(mix(v4,v5,a4)*step(e4,x_1306414511)*step(x_1306414511,e5),\n    max(mix(v5,v6,a5)*step(e5,x_1306414511)*step(x_1306414511,e6),\n    max(mix(v6,v7,a6)*step(e6,x_1306414511)*step(x_1306414511,e7),mix(v7,v8,a7)*step(e7,x_1306414511)*step(x_1306414511,e8)\n  )))))));\n}\n\nvec4 viridis (float x_1870111103) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.26666666666666666,0.00392156862745098,0.32941176470588235,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.2784313725490196,0.17254901960784313,0.47843137254901963,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.23137254901960785,0.3176470588235294,0.5450980392156862,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.17254901960784313,0.44313725490196076,0.5568627450980392,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.12941176470588237,0.5647058823529412,0.5529411764705883,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.15294117647058825,0.6784313725490196,0.5058823529411764,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.3607843137254902,0.7843137254901961,0.38823529411764707,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.6666666666666666,0.8627450980392157,0.19607843137254902,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9921568627450981,0.9058823529411765,0.1450980392156863,1);\n  float a0 = smoothstep(e0,e1,x_1870111103);\n  float a1 = smoothstep(e1,e2,x_1870111103);\n  float a2 = smoothstep(e2,e3,x_1870111103);\n  float a3 = smoothstep(e3,e4,x_1870111103);\n  float a4 = smoothstep(e4,e5,x_1870111103);\n  float a5 = smoothstep(e5,e6,x_1870111103);\n  float a6 = smoothstep(e6,e7,x_1870111103);\n  float a7 = smoothstep(e7,e8,x_1870111103);\n  return max(mix(v0,v1,a0)*step(e0,x_1870111103)*step(x_1870111103,e1),\n    max(mix(v1,v2,a1)*step(e1,x_1870111103)*step(x_1870111103,e2),\n    max(mix(v2,v3,a2)*step(e2,x_1870111103)*step(x_1870111103,e3),\n    max(mix(v3,v4,a3)*step(e3,x_1870111103)*step(x_1870111103,e4),\n    max(mix(v4,v5,a4)*step(e4,x_1870111103)*step(x_1870111103,e5),\n    max(mix(v5,v6,a5)*step(e5,x_1870111103)*step(x_1870111103,e6),\n    max(mix(v6,v7,a6)*step(e6,x_1870111103)*step(x_1870111103,e7),mix(v7,v8,a7)*step(e7,x_1870111103)*step(x_1870111103,e8)\n  )))))));\n}\n\nvec4 greys (float x_1268378094) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_1268378094);\n  return mix(v0,v1,a0)*step(e0,x_1268378094)*step(x_1268378094,e1);\n}\n\nvec4 magma (float x_2443053725) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.01568627450980392,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.10980392156862745,0.06274509803921569,0.26666666666666666,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.30980392156862746,0.07058823529411765,0.4823529411764706,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.5058823529411764,0.1450980392156863,0.5058823529411764,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.7098039215686275,0.21176470588235294,0.47843137254901963,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8980392156862745,0.3137254901960784,0.39215686274509803,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.984313725490196,0.5294117647058824,0.3803921568627451,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.996078431372549,0.7607843137254902,0.5294117647058824,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9882352941176471,0.9921568627450981,0.7490196078431373,1);\n  float a0 = smoothstep(e0,e1,x_2443053725);\n  float a1 = smoothstep(e1,e2,x_2443053725);\n  float a2 = smoothstep(e2,e3,x_2443053725);\n  float a3 = smoothstep(e3,e4,x_2443053725);\n  float a4 = smoothstep(e4,e5,x_2443053725);\n  float a5 = smoothstep(e5,e6,x_2443053725);\n  float a6 = smoothstep(e6,e7,x_2443053725);\n  float a7 = smoothstep(e7,e8,x_2443053725);\n  return max(mix(v0,v1,a0)*step(e0,x_2443053725)*step(x_2443053725,e1),\n    max(mix(v1,v2,a1)*step(e1,x_2443053725)*step(x_2443053725,e2),\n    max(mix(v2,v3,a2)*step(e2,x_2443053725)*step(x_2443053725,e3),\n    max(mix(v3,v4,a3)*step(e3,x_2443053725)*step(x_2443053725,e4),\n    max(mix(v4,v5,a4)*step(e4,x_2443053725)*step(x_2443053725,e5),\n    max(mix(v5,v6,a5)*step(e5,x_2443053725)*step(x_2443053725,e6),\n    max(mix(v6,v7,a6)*step(e6,x_2443053725)*step(x_2443053725,e7),mix(v7,v8,a7)*step(e7,x_2443053725)*step(x_2443053725,e8)\n  )))))));\n}\n\nvec4 jet (float x_623120303) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.5137254901960784,1);\n  const float e1 = 0.125;\n  const vec4 v1 = vec4(0,0.23529411764705882,0.6666666666666666,1);\n  const float e2 = 0.375;\n  const vec4 v2 = vec4(0.0196078431372549,1,1,1);\n  const float e3 = 0.625;\n  const vec4 v3 = vec4(1,1,0,1);\n  const float e4 = 0.875;\n  const vec4 v4 = vec4(0.9803921568627451,0,0,1);\n  const float e5 = 1.0;\n  const vec4 v5 = vec4(0.5019607843137255,0,0,1);\n  float a0 = smoothstep(e0,e1,x_623120303);\n  float a1 = smoothstep(e1,e2,x_623120303);\n  float a2 = smoothstep(e2,e3,x_623120303);\n  float a3 = smoothstep(e3,e4,x_623120303);\n  float a4 = smoothstep(e4,e5,x_623120303);\n  return max(mix(v0,v1,a0)*step(e0,x_623120303)*step(x_623120303,e1),\n    max(mix(v1,v2,a1)*step(e1,x_623120303)*step(x_623120303,e2),\n    max(mix(v2,v3,a2)*step(e2,x_623120303)*step(x_623120303,e3),\n    max(mix(v3,v4,a3)*step(e3,x_623120303)*step(x_623120303,e4),mix(v4,v5,a4)*step(e4,x_623120303)*step(x_623120303,e5)\n  ))));\n}\n\nvec4 bone (float x_783795047) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.376;\n  const vec4 v1 = vec4(0.32941176470588235,0.32941176470588235,0.4549019607843137,1);\n  const float e2 = 0.753;\n  const vec4 v2 = vec4(0.6627450980392157,0.7843137254901961,0.7843137254901961,1);\n  const float e3 = 1.0;\n  const vec4 v3 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_783795047);\n  float a1 = smoothstep(e1,e2,x_783795047);\n  float a2 = smoothstep(e2,e3,x_783795047);\n  return max(mix(v0,v1,a0)*step(e0,x_783795047)*step(x_783795047,e1),\n    max(mix(v1,v2,a1)*step(e1,x_783795047)*step(x_783795047,e2),mix(v2,v3,a2)*step(e2,x_783795047)*step(x_783795047,e3)\n  ));\n}\n\nvec4 copper (float x_3932431844) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.804;\n  const vec4 v1 = vec4(1,0.6274509803921569,0.4,1);\n  const float e2 = 1.0;\n  const vec4 v2 = vec4(1,0.7803921568627451,0.4980392156862745,1);\n  float a0 = smoothstep(e0,e1,x_3932431844);\n  float a1 = smoothstep(e1,e2,x_3932431844);\n  return max(mix(v0,v1,a0)*step(e0,x_3932431844)*step(x_3932431844,e1),mix(v1,v2,a1)*step(e1,x_3932431844)*step(x_3932431844,e2)\n  );\n}\n\nvec4 density (float x_2921433544) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.21176470588235294,0.054901960784313725,0.1411764705882353,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.34901960784313724,0.09019607843137255,0.3137254901960784,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.43137254901960786,0.17647058823529413,0.5176470588235295,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.47058823529411764,0.30196078431372547,0.6980392156862745,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.47058823529411764,0.44313725490196076,0.8352941176470589,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.45098039215686275,0.592156862745098,0.8941176470588236,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.5254901960784314,0.7254901960784313,0.8901960784313725,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.6941176470588235,0.8392156862745098,0.8901960784313725,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9019607843137255,0.9450980392156862,0.9450980392156862,1);\n  float a0 = smoothstep(e0,e1,x_2921433544);\n  float a1 = smoothstep(e1,e2,x_2921433544);\n  float a2 = smoothstep(e2,e3,x_2921433544);\n  float a3 = smoothstep(e3,e4,x_2921433544);\n  float a4 = smoothstep(e4,e5,x_2921433544);\n  float a5 = smoothstep(e5,e6,x_2921433544);\n  float a6 = smoothstep(e6,e7,x_2921433544);\n  float a7 = smoothstep(e7,e8,x_2921433544);\n  return max(mix(v0,v1,a0)*step(e0,x_2921433544)*step(x_2921433544,e1),\n    max(mix(v1,v2,a1)*step(e1,x_2921433544)*step(x_2921433544,e2),\n    max(mix(v2,v3,a2)*step(e2,x_2921433544)*step(x_2921433544,e3),\n    max(mix(v3,v4,a3)*step(e3,x_2921433544)*step(x_2921433544,e4),\n    max(mix(v4,v5,a4)*step(e4,x_2921433544)*step(x_2921433544,e5),\n    max(mix(v5,v6,a5)*step(e5,x_2921433544)*step(x_2921433544,e6),\n    max(mix(v6,v7,a6)*step(e6,x_2921433544)*step(x_2921433544,e7),mix(v7,v8,a7)*step(e7,x_2921433544)*step(x_2921433544,e8)\n  )))))));\n}\n\nvec4 inferno (float x_1987546174) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.01568627450980392,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.12156862745098039,0.047058823529411764,0.2823529411764706,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.3333333333333333,0.058823529411764705,0.42745098039215684,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.5333333333333333,0.13333333333333333,0.41568627450980394,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.7294117647058823,0.21176470588235294,0.3333333333333333,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8901960784313725,0.34901960784313724,0.2,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.9764705882352941,0.5490196078431373,0.0392156862745098,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.9764705882352941,0.788235294117647,0.19607843137254902,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9882352941176471,1,0.6431372549019608,1);\n  float a0 = smoothstep(e0,e1,x_1987546174);\n  float a1 = smoothstep(e1,e2,x_1987546174);\n  float a2 = smoothstep(e2,e3,x_1987546174);\n  float a3 = smoothstep(e3,e4,x_1987546174);\n  float a4 = smoothstep(e4,e5,x_1987546174);\n  float a5 = smoothstep(e5,e6,x_1987546174);\n  float a6 = smoothstep(e6,e7,x_1987546174);\n  float a7 = smoothstep(e7,e8,x_1987546174);\n  return max(mix(v0,v1,a0)*step(e0,x_1987546174)*step(x_1987546174,e1),\n    max(mix(v1,v2,a1)*step(e1,x_1987546174)*step(x_1987546174,e2),\n    max(mix(v2,v3,a2)*step(e2,x_1987546174)*step(x_1987546174,e3),\n    max(mix(v3,v4,a3)*step(e3,x_1987546174)*step(x_1987546174,e4),\n    max(mix(v4,v5,a4)*step(e4,x_1987546174)*step(x_1987546174,e5),\n    max(mix(v5,v6,a5)*step(e5,x_1987546174)*step(x_1987546174,e6),\n    max(mix(v6,v7,a6)*step(e6,x_1987546174)*step(x_1987546174,e7),mix(v7,v8,a7)*step(e7,x_1987546174)*step(x_1987546174,e8)\n  )))))));\n}\n\nvec4 cool (float x_761030515) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.49019607843137253,0,0.7019607843137254,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.4549019607843137,0,0.8549019607843137,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.3843137254901961,0.2901960784313726,0.9294117647058824,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.26666666666666666,0.5725490196078431,0.9058823529411765,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0,0.8,0.7725490196078432,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0,0.9686274509803922,0.5725490196078431,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0,1,0.34509803921568627,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.1568627450980392,1,0.03137254901960784,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.5764705882352941,1,0,1);\n  float a0 = smoothstep(e0,e1,x_761030515);\n  float a1 = smoothstep(e1,e2,x_761030515);\n  float a2 = smoothstep(e2,e3,x_761030515);\n  float a3 = smoothstep(e3,e4,x_761030515);\n  float a4 = smoothstep(e4,e5,x_761030515);\n  float a5 = smoothstep(e5,e6,x_761030515);\n  float a6 = smoothstep(e6,e7,x_761030515);\n  float a7 = smoothstep(e7,e8,x_761030515);\n  return max(mix(v0,v1,a0)*step(e0,x_761030515)*step(x_761030515,e1),\n    max(mix(v1,v2,a1)*step(e1,x_761030515)*step(x_761030515,e2),\n    max(mix(v2,v3,a2)*step(e2,x_761030515)*step(x_761030515,e3),\n    max(mix(v3,v4,a3)*step(e3,x_761030515)*step(x_761030515,e4),\n    max(mix(v4,v5,a4)*step(e4,x_761030515)*step(x_761030515,e5),\n    max(mix(v5,v6,a5)*step(e5,x_761030515)*step(x_761030515,e6),\n    max(mix(v6,v7,a6)*step(e6,x_761030515)*step(x_761030515,e7),mix(v7,v8,a7)*step(e7,x_761030515)*step(x_761030515,e8)\n  )))))));\n}\n\nvec4 hot (float x_180130041) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.3;\n  const vec4 v1 = vec4(0.9019607843137255,0,0,1);\n  const float e2 = 0.6;\n  const vec4 v2 = vec4(1,0.8235294117647058,0,1);\n  const float e3 = 1.0;\n  const vec4 v3 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_180130041);\n  float a1 = smoothstep(e1,e2,x_180130041);\n  float a2 = smoothstep(e2,e3,x_180130041);\n  return max(mix(v0,v1,a0)*step(e0,x_180130041)*step(x_180130041,e1),\n    max(mix(v1,v2,a1)*step(e1,x_180130041)*step(x_180130041,e2),mix(v2,v3,a2)*step(e2,x_180130041)*step(x_180130041,e3)\n  ));\n}\n\nvec4 spring (float x_755571360) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(1,0,1,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0,1);\n  float a0 = smoothstep(e0,e1,x_755571360);\n  return mix(v0,v1,a0)*step(e0,x_755571360)*step(x_755571360,e1);\n}\n\nvec4 summer (float x_2651158874) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0.5019607843137255,0.4,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0.4,1);\n  float a0 = smoothstep(e0,e1,x_2651158874);\n  return mix(v0,v1,a0)*step(e0,x_2651158874)*step(x_2651158874,e1);\n}\n\nvec4 autumn (float x_626866098) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(1,0,0,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0,1);\n  float a0 = smoothstep(e0,e1,x_626866098);\n  return mix(v0,v1,a0)*step(e0,x_626866098)*step(x_626866098,e1);\n}\n\nvec4 winter (float x_2098958741) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,1,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(0,1,0.5019607843137255,1);\n  float a0 = smoothstep(e0,e1,x_2098958741);\n  return mix(v0,v1,a0)*step(e0,x_2098958741)*step(x_2098958741,e1);\n}\n\n// Data (mask) texture\nuniform sampler2D channel0;\nuniform sampler2D channel1;\nuniform sampler2D channel2;\nuniform sampler2D channel3;\nuniform sampler2D channel4;\nuniform sampler2D channel5;\n\n// Color texture\nuniform sampler2D colorTex;\nuniform float colorTexHeight;\nuniform float colorTexWidth;\nuniform float hovered;\n// range\nuniform bool channelsVisible[6];\n\n// Expression mapping\nuniform vec2 uColorScaleRange;\nuniform bool uIsExpressionMode;\nuniform sampler2D expressionTex;\n\n// opacity\nuniform float opacity;\n\nvarying vec2 vTexCoord;\n\nvec4 sampleAndGetColor(sampler2D dataTex, vec2 coord, bool isOn){\n  float sampledData = texture(dataTex, coord).r;\n  vec4 hoveredColor = float(sampledData == hovered && sampledData > 0. && hovered > 0.) * vec4(0., 0., 1., 1.);\n  // Colors are laid out corresponding to ids in row-major order in the texture.  So if width of the texture is 10, and you want ID 25,\n  // you need coordinate (1, 4) (i.e 2 rows down, and 5 columns over indexed from 0 for a total of 25 units covered in row major order).\n  vec2 colorTexCoord = vec2(mod(sampledData, colorTexWidth) / colorTexWidth, floor(sampledData / colorTexWidth) / (colorTexHeight - 1.));\n  float expressionValue = texture(expressionTex, colorTexCoord).r / 255.;\n  float scaledExpressionValue = (expressionValue - uColorScaleRange[0]) / max(0.005, (uColorScaleRange[1] - uColorScaleRange[0]));\n  vec4 sampledColor = float(uIsExpressionMode) * COLORMAP_FUNC(clamp(scaledExpressionValue, 0.0, 1.0)) +  (1. - float(uIsExpressionMode)) * vec4(texture(colorTex, colorTexCoord).rgb, 1.);\n  // Only return a color if the data is non-zero.\n  return max(0., min(sampledData, 1.)) * float(isOn) * (sampledColor + hoveredColor);\n}\n\nvoid main() {\n\n  gl_FragColor = sampleAndGetColor(channel0, vTexCoord, channelsVisible[0]);\n\n  // If the sampled color and the currently stored color (gl_FragColor) are identical, don't blend and use the sampled color,\n  // otherwise just use the currently stored color.  Repeat this for all channels.\n  vec4 sampledColor = sampleAndGetColor(channel1, vTexCoord, channelsVisible[1]);\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\n  sampledColor = sampleAndGetColor(channel2, vTexCoord, channelsVisible[2]);\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\n  sampledColor = sampleAndGetColor(channel3, vTexCoord, channelsVisible[3]);\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\n  sampledColor = sampleAndGetColor(channel4, vTexCoord, channelsVisible[4]);\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\n  sampledColor = sampleAndGetColor(channel5, vTexCoord, channelsVisible[5]);\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\n  // Apply the opacity if there is pixel data, and if the pixel data is empty i.e no segmentation, use 0 opacity.\n  gl_FragColor = vec4(gl_FragColor.rgb, (gl_FragColor.rgb == vec3(0., 0., 0.)) ? 0.0 : opacity);\n\n  geometry.uv = vTexCoord;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n";

// src/layers/BitmaskLayer.js
function padWithDefault2(arr, defaultValue, padWidth) {
  const newArr = [...arr];
  for (let i = 0; i < padWidth; i += 1) {
    newArr.push(defaultValue);
  }
  return newArr;
}
var defaultProps5 = {
  hoveredCell: { type: "number", value: null, compare: true },
  cellColorData: { type: "object", value: null, compare: true },
  colormap: { type: "string", value: GLSL_COLORMAP_DEFAULT, compare: true },
  expressionData: { type: "object", value: null, compare: true }
};
var BitmaskLayer = class extends XRLayer {
  getShaders() {
    const { colormap } = this.props;
    return {
      fs: fs2,
      vs: vs2,
      modules: [_deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["project32"], _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["picking"]],
      defines: {
        [COLORMAP_SHADER_PLACEHOLDER]: GLSL_COLORMAPS.includes(colormap) ? colormap : GLSL_COLORMAP_DEFAULT
      }
    };
  }
  updateState({ props, oldProps, changeFlags }) {
    super.updateState({ props, oldProps, changeFlags });
    if (props.cellColorData !== oldProps.cellColorData) {
      this.setColorTexture();
    }
    if (props.expressionData !== oldProps.expressionData) {
      const { expressionData, cellTexHeight, cellTexWidth } = this.props;
      const expressionTex = this.dataToTexture(expressionData, cellTexWidth, cellTexHeight);
      this.setState({ expressionTex });
    }
    if (props.colormap !== oldProps.colormap) {
      const { gl } = this.context;
      if (this.state.model) {
        this.state.model.delete();
      }
      this.setState({ model: this._getModel(gl) });
      this.getAttributeManager().invalidateAll();
    }
  }
  setColorTexture() {
    const {
      cellColorData: data,
      cellTexHeight: height,
      cellTexWidth: width
    } = this.props;
    const colorTex = new _luma_gl_core__WEBPACK_IMPORTED_MODULE_26__["Texture2D"](this.context.gl, {
      width,
      height,
      data,
      mipmaps: false,
      parameters: {
        [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].TEXTURE_MIN_FILTER]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].NEAREST,
        [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].TEXTURE_MAG_FILTER]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].NEAREST,
        [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].TEXTURE_WRAP_S]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].CLAMP_TO_EDGE,
        [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].TEXTURE_WRAP_T]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].CLAMP_TO_EDGE
      },
      format: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].RGB,
      dataFormat: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].RGB,
      type: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].UNSIGNED_BYTE
    });
    this.setState({ colorTex });
  }
  draw(opts) {
    const { uniforms } = opts;
    const {
      channelsVisible,
      hoveredCell,
      colorScaleLo,
      colorScaleHi,
      isExpressionMode
    } = this.props;
    const {
      textures,
      model,
      colorTex,
      expressionTex
    } = this.state;
    if (textures && model && colorTex) {
      model.setUniforms(Object.assign({}, uniforms, __spreadValues({
        hovered: hoveredCell || 0,
        colorTex,
        expressionTex,
        colorTexHeight: colorTex.height,
        colorTexWidth: colorTex.width,
        channelsVisible: padWithDefault2(channelsVisible, false, 6 - channelsVisible.length),
        uColorScaleRange: [colorScaleLo, colorScaleHi],
        uIsExpressionMode: isExpressionMode
      }, textures))).draw();
    }
  }
  dataToTexture(data, width, height) {
    const isWebGL2On = Object(_luma_gl_core__WEBPACK_IMPORTED_MODULE_26__["isWebGL2"])(this.context.gl);
    return new _luma_gl_core__WEBPACK_IMPORTED_MODULE_26__["Texture2D"](this.context.gl, {
      width,
      height,
      data: new Float32Array(data),
      mipmaps: false,
      parameters: {
        [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].TEXTURE_MIN_FILTER]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].NEAREST,
        [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].TEXTURE_MAG_FILTER]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].NEAREST,
        [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].TEXTURE_WRAP_S]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].CLAMP_TO_EDGE,
        [_luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].TEXTURE_WRAP_T]: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].CLAMP_TO_EDGE
      },
      format: isWebGL2On ? _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].R32F : _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].LUMINANCE,
      dataFormat: isWebGL2On ? _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].RED : _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].LUMINANCE,
      type: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].FLOAT
    });
  }
};
BitmaskLayer.layerName = "BitmaskLayer";
BitmaskLayer.defaultProps = defaultProps5;

// src/components/layer-controller/utils.js

function getSingleSelectionStats2D(_0) {
  return __async(this, arguments, function* ({ loader, selection }) {
    const data = Array.isArray(loader) ? loader[loader.length - 1] : loader;
    const raster = yield data.getRaster({ selection });
    const selectionStats = getChannelStats(raster.data);
    const { domain, contrastLimits: slider } = selectionStats;
    return { domain, slider };
  });
}
function getSingleSelectionStats3D(_0) {
  return __async(this, arguments, function* ({ loader, selection }) {
    const lowResSource = loader[loader.length - 1];
    const { shape, labels } = lowResSource;
    const sizeZ = shape[labels.indexOf("z")] >> loader.length - 1;
    const raster0 = yield lowResSource.getRaster({
      selection: __spreadProps(__spreadValues({}, selection), { z: 0 })
    });
    const rasterMid = yield lowResSource.getRaster({
      selection: __spreadProps(__spreadValues({}, selection), { z: Math.floor(sizeZ / 2) })
    });
    const rasterTop = yield lowResSource.getRaster({
      selection: __spreadProps(__spreadValues({}, selection), { z: Math.max(0, sizeZ - 1) })
    });
    const stats0 = getChannelStats(raster0.data);
    const statsMid = getChannelStats(rasterMid.data);
    const statsTop = getChannelStats(rasterTop.data);
    return {
      domain: [
        Math.min(stats0.domain[0], statsMid.domain[0], statsTop.domain[0]),
        Math.max(stats0.domain[1], statsMid.domain[1], statsTop.domain[1])
      ],
      slider: [
        Math.min(stats0.contrastLimits[0], statsMid.contrastLimits[0], statsTop.contrastLimits[0]),
        Math.max(stats0.contrastLimits[1], statsMid.contrastLimits[1], statsTop.contrastLimits[1])
      ]
    };
  });
}
var getSingleSelectionStats = (_0) => __async(void 0, [_0], function* ({ loader, selection, use3d }) {
  const getStats = use3d ? getSingleSelectionStats3D : getSingleSelectionStats2D;
  return getStats({ loader, selection });
});
var getMultiSelectionStats = (_0) => __async(void 0, [_0], function* ({ loader, selections, use3d }) {
  const stats = yield Promise.all(selections.map((selection) => getSingleSelectionStats({ loader, selection, use3d })));
  const domains = stats.map((stat) => stat.domain);
  const sliders = stats.map((stat) => stat.slider);
  return { domains, sliders };
});
function getPhysicalSizeScalingMatrix2(loader) {
  var _a2, _b2;
  const { x, y, z } = (_b2 = (_a2 = loader == null ? void 0 : loader.meta) == null ? void 0 : _a2.physicalSizes) != null ? _b2 : {};
  if ((x == null ? void 0 : x.size) && (y == null ? void 0 : y.size) && (z == null ? void 0 : z.size)) {
    const min = Math.min(z.size, x.size, y.size);
    const ratio = [x.size / min, y.size / min, z.size / min];
    return new math_gl__WEBPACK_IMPORTED_MODULE_23__["Matrix4"]().scale(ratio);
  }
  return new math_gl__WEBPACK_IMPORTED_MODULE_23__["Matrix4"]().identity();
}
function getBoundingCube(loader) {
  const source = Array.isArray(loader) ? loader[0] : loader;
  const { shape, labels } = source;
  const physicalSizeScalingMatrix = getPhysicalSizeScalingMatrix2(source);
  const xSlice = [0, physicalSizeScalingMatrix[0] * shape[labels.indexOf("x")]];
  const ySlice = [0, physicalSizeScalingMatrix[5] * shape[labels.indexOf("y")]];
  const zSlice = [
    0,
    physicalSizeScalingMatrix[10] * shape[labels.indexOf("z")]
  ];
  return [xSlice, ySlice, zSlice];
}
function abbreviateNumber(value) {
  const maxLength = 5;
  let maxNaiveDigits = maxLength;
  if (!Number.isInteger(value)) {
    --maxNaiveDigits;
  }
  if (value < 1) {
    --maxNaiveDigits;
  }
  const naive = Intl.NumberFormat("en-US", {
    maximumSignificantDigits: maxNaiveDigits,
    useGrouping: false
  }).format(value);
  if (naive.length <= maxLength)
    return naive;
  return value.toExponential(0);
}

// src/components/spatial/utils.js
function square(x, y, r) {
  return [[x, y + r], [x + r, y], [x, y - r], [x - r, y]];
}
function getDefaultGlobalSelection(source) {
  const globalIndices = source.labels.filter((dim) => GLOBAL_LABELS.includes(dim));
  const selection = {};
  globalIndices.forEach((dim) => {
    selection[dim] = Math.floor((source.shape[source.labels.indexOf(dim)] || 0) / 2);
  });
  return selection;
}
function buildDefaultSelection(source) {
  const selection = [];
  const globalSelection = getDefaultGlobalSelection(source);
  const firstNonGlobalDimension = source.labels.filter((dim) => !GLOBAL_LABELS.includes(dim) && source.shape[source.labels.indexOf(dim)])[0];
  for (let i = 0; i < Math.min(4, source.shape[source.labels.indexOf(firstNonGlobalDimension)]); i += 1) {
    selection.push(__spreadValues({
      [firstNonGlobalDimension]: i
    }, globalSelection));
  }
  return selection;
}
function isInterleaved2(shape) {
  const lastDimSize = shape[shape.length - 1];
  return lastDimSize === 3 || lastDimSize === 4;
}
function initializeLayerChannels(loader, use3d) {
  return __async(this, null, function* () {
    const result = [];
    const source = getSourceFromLoader(loader);
    let defaultSelection = buildDefaultSelection(source);
    defaultSelection = isInterleaved2(source.shape) ? [__spreadProps(__spreadValues({}, defaultSelection[0]), { c: 0 })] : defaultSelection;
    const stats = yield getMultiSelectionStats({
      loader: loader.data,
      selections: defaultSelection,
      use3d
    });
    const domains = isRgb(loader) ? [[0, 255], [0, 255], [0, 255]] : stats.domains;
    const colors = isRgb(loader) ? [[255, 0, 0], [0, 255, 0], [0, 0, 255]] : null;
    const sliders = isRgb(loader) ? [[0, 255], [0, 255], [0, 255]] : stats.sliders;
    defaultSelection.forEach((selection, i) => {
      const domain = domains[i];
      const slider = sliders[i];
      const channel = {
        selection,
        color: colors ? colors[i] : defaultSelection.length !== 1 ? VIEWER_PALETTE[i] : [255, 255, 255],
        visible: true,
        slider: slider || domain
      };
      result.push(channel);
    });
    return result;
  });
}
function getMetaWithTransformMatrices(imageMeta, imageLoaders) {
  const sources = imageLoaders.map((loader) => getSourceFromLoader(loader));
  if (imageMeta.map((meta) => {
    var _a2, _b2, _c, _d, _e, _f;
    return ((_b2 = (_a2 = meta == null ? void 0 : meta.metadata) == null ? void 0 : _a2.transform) == null ? void 0 : _b2.matrix) || ((_d = (_c = meta == null ? void 0 : meta.metadata) == null ? void 0 : _c.transform) == null ? void 0 : _d.scale) || ((_f = (_e = meta == null ? void 0 : meta.metadata) == null ? void 0 : _e.transform) == null ? void 0 : _f.translate);
  }).some(Boolean) || sources.every((source) => {
    var _a2, _b2, _c, _d;
    return !((_b2 = (_a2 = source.meta) == null ? void 0 : _a2.physicalSizes) == null ? void 0 : _b2.x) || !((_d = (_c = source.meta) == null ? void 0 : _c.physicalSizes) == null ? void 0 : _d.y);
  })) {
    return imageMeta;
  }
  const minPhysicalSize = sources.reduce((acc, source) => {
    var _a2, _b2, _c, _d, _e, _f, _g, _h, _i;
    const hasZPhyscialSize = (_c = (_b2 = (_a2 = source.meta) == null ? void 0 : _a2.physicalSizes) == null ? void 0 : _b2.z) == null ? void 0 : _c.size;
    const sizes = [
      Object(mathjs__WEBPACK_IMPORTED_MODULE_65__["unit"])(`${(_d = source.meta) == null ? void 0 : _d.physicalSizes.x.size} ${(_e = source.meta) == null ? void 0 : _e.physicalSizes.x.unit}`.replace("\xB5", "u")),
      Object(mathjs__WEBPACK_IMPORTED_MODULE_65__["unit"])(`${(_f = source.meta) == null ? void 0 : _f.physicalSizes.y.size} ${(_g = source.meta) == null ? void 0 : _g.physicalSizes.y.unit}`.replace("\xB5", "u"))
    ];
    if (hasZPhyscialSize) {
      sizes.push(Object(mathjs__WEBPACK_IMPORTED_MODULE_65__["unit"])(`${(_h = source.meta) == null ? void 0 : _h.physicalSizes.z.size} ${(_i = source.meta) == null ? void 0 : _i.physicalSizes.z.unit}`.replace("\xB5", "u")));
    }
    acc[0] = acc[0] === void 0 || Object(mathjs__WEBPACK_IMPORTED_MODULE_65__["compare"])(sizes[0], acc[0]) === -1 ? sizes[0] : acc[0];
    acc[1] = acc[1] === void 0 || Object(mathjs__WEBPACK_IMPORTED_MODULE_65__["compare"])(sizes[1], acc[1]) === -1 ? sizes[1] : acc[1];
    acc[2] = acc[2] === void 0 || Object(mathjs__WEBPACK_IMPORTED_MODULE_65__["compare"])(sizes[2], acc[2]) === -1 ? sizes[2] : acc[2];
    return acc;
  }, []);
  const imageMetaWithTransform = imageMeta.map((meta, j) => {
    var _a2, _b2, _c, _d, _e, _f, _g, _h, _i;
    const source = sources[j];
    const hasZPhyscialSize = (_c = (_b2 = (_a2 = source.meta) == null ? void 0 : _a2.physicalSizes) == null ? void 0 : _b2.z) == null ? void 0 : _c.size;
    const sizes = [
      Object(mathjs__WEBPACK_IMPORTED_MODULE_65__["unit"])(`${(_d = source.meta) == null ? void 0 : _d.physicalSizes.x.size} ${(_e = source.meta) == null ? void 0 : _e.physicalSizes.x.unit}`.replace("\xB5", "u")),
      Object(mathjs__WEBPACK_IMPORTED_MODULE_65__["unit"])(`${(_f = source.meta) == null ? void 0 : _f.physicalSizes.y.size} ${(_g = source.meta) == null ? void 0 : _g.physicalSizes.y.unit}`.replace("\xB5", "u"))
    ];
    if (hasZPhyscialSize) {
      sizes.push(Object(mathjs__WEBPACK_IMPORTED_MODULE_65__["unit"])(`${(_h = source.meta) == null ? void 0 : _h.physicalSizes.z.size} ${(_i = source.meta) == null ? void 0 : _i.physicalSizes.z.unit}`.replace("\xB5", "u")));
    }
    const scale = sizes.map((i, k) => Object(mathjs__WEBPACK_IMPORTED_MODULE_65__["divide"])(i, minPhysicalSize[k]));
    if (!scale[2]) {
      scale[2] = 1;
    }
    if (lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(scale, [1, 1, 1])) {
      return meta;
    }
    const matrix = new math_gl__WEBPACK_IMPORTED_MODULE_23__["Matrix4"]().scale([...scale]);
    const newMeta = __spreadValues({}, meta);
    newMeta.metadata = __spreadProps(__spreadValues({}, newMeta.metadata), {
      transform: { matrix: matrix.toArray() }
    });
    return newMeta;
  });
  return imageMetaWithTransform;
}
function initializeRasterLayersAndChannels(rasterLayers, rasterRenderLayers, usePhysicalSizeScaling) {
  return __async(this, null, function* () {
    const nextImageLoaders = [];
    let nextImageMetaAndLayers = [];
    const autoImageLayerDefPromises = [];
    const loaders = yield Promise.all(rasterLayers.map((layer) => layer.loaderCreator()));
    for (let i = 0; i < rasterLayers.length; i++) {
      const layer = rasterLayers[i];
      const loader = loaders[i];
      nextImageLoaders[i] = loader;
      nextImageMetaAndLayers[i] = layer;
    }
    if (usePhysicalSizeScaling) {
      nextImageMetaAndLayers = getMetaWithTransformMatrices(nextImageMetaAndLayers, nextImageLoaders);
    }
    if (!rasterRenderLayers) {
      const layerIndex = Math.floor(rasterLayers.length / 2);
      const loader = nextImageLoaders[layerIndex];
      const autoImageLayerDefPromise = initializeLayerChannels(loader).then((channels2) => {
        var _a2, _b2, _c, _d, _e;
        return Promise.resolve(__spreadProps(__spreadValues({
          type: ((_b2 = (_a2 = nextImageMetaAndLayers[layerIndex]) == null ? void 0 : _a2.metadata) == null ? void 0 : _b2.isBitmask) ? "bitmask" : "raster",
          index: layerIndex
        }, DEFAULT_RASTER_LAYER_PROPS), {
          channels: channels2.map((channel, j) => __spreadValues(__spreadValues({}, channel), nextImageMetaAndLayers[layerIndex].channels ? nextImageMetaAndLayers[layerIndex].channels[j] : [])),
          modelMatrix: (_e = (_d = (_c = nextImageMetaAndLayers[layerIndex]) == null ? void 0 : _c.metadata) == null ? void 0 : _d.transform) == null ? void 0 : _e.matrix,
          transparentColor: layerIndex > 0 ? [0, 0, 0] : null
        }));
      });
      autoImageLayerDefPromises.push(autoImageLayerDefPromise);
    } else {
      const globalIndicesOfRenderLayers = rasterRenderLayers.map((imageName) => rasterLayers.findIndex((image) => image.name === imageName));
      for (let i = 0; i < globalIndicesOfRenderLayers.length; i++) {
        const layerIndex = globalIndicesOfRenderLayers[i];
        const loader = nextImageLoaders[layerIndex];
        const autoImageLayerDefPromise = initializeLayerChannels(loader).then((channels2) => {
          var _a2, _b2, _c, _d, _e;
          return Promise.resolve(__spreadProps(__spreadValues({
            type: ((_b2 = (_a2 = nextImageMetaAndLayers[layerIndex]) == null ? void 0 : _a2.metadata) == null ? void 0 : _b2.isBitmask) ? "bitmask" : "raster",
            index: layerIndex
          }, DEFAULT_RASTER_LAYER_PROPS), {
            channels: channels2.map((channel, j) => __spreadValues(__spreadValues({}, channel), nextImageMetaAndLayers[layerIndex].channels ? nextImageMetaAndLayers[layerIndex].channels[j] : [])),
            domainType: "Min/Max",
            modelMatrix: (_e = (_d = (_c = nextImageMetaAndLayers[layerIndex]) == null ? void 0 : _c.metadata) == null ? void 0 : _d.transform) == null ? void 0 : _e.matrix,
            transparentColor: i > 0 ? [0, 0, 0] : null
          }));
        });
        autoImageLayerDefPromises.push(autoImageLayerDefPromise);
      }
    }
    const autoImageLayerDefs = yield Promise.all(autoImageLayerDefPromises);
    return [autoImageLayerDefs, nextImageLoaders, nextImageMetaAndLayers];
  });
}
function makeSpatialSubtitle({
  observationsCount,
  observationsLabel,
  observationsPluralLabel,
  subobservationsCount,
  subobservationsLabel,
  subobservationsPluralLabel,
  locationsCount
}) {
  const parts = [];
  if (subobservationsCount > 0) {
    let part = `${subobservationsCount} ${pluralize(subobservationsLabel, subobservationsPluralLabel, subobservationsCount)}`;
    if (locationsCount > 0) {
      part += ` at ${short_number__WEBPACK_IMPORTED_MODULE_64___default()(locationsCount)} locations`;
    }
    parts.push(part);
  }
  if (observationsCount > 0) {
    parts.push(`${observationsCount} ${pluralize(observationsLabel, observationsPluralLabel, observationsCount)}`);
  }
  return parts.join(", ");
}
function getInitialSpatialTargets({
  width,
  height,
  cells,
  imageLayerLoaders,
  useRaster,
  use3d
}) {
  let initialTargetX = -Infinity;
  let initialTargetY = -Infinity;
  let initialTargetZ = -Infinity;
  let initialZoom = -Infinity;
  const zoomBackoff = use3d ? 1.5 : 0.1;
  const cellValues = Object.values(cells);
  if (imageLayerLoaders.length > 0 && useRaster) {
    for (let i = 0; i < imageLayerLoaders.length; i += 1) {
      const viewSize = { height, width };
      const { target, zoom: newViewStateZoom } = getDefaultInitialViewState(imageLayerLoaders[i].data, viewSize, zoomBackoff, use3d);
      if (target[0] > initialTargetX) {
        initialTargetX = target[0];
        initialZoom = newViewStateZoom;
      }
      if (target[1] > initialTargetY) {
        initialTargetY = target[1];
        initialZoom = newViewStateZoom;
      }
      if (target[2] > initialTargetZ) {
        initialTargetZ = target[2];
        initialZoom = newViewStateZoom;
      } else {
        initialTargetZ = null;
      }
    }
  } else if (cellValues.length > 0 && cellValues[0].xy && !useRaster) {
    const cellCoordinates = cellValues.map((c) => c.xy);
    let xExtent = Object(d3_array__WEBPACK_IMPORTED_MODULE_47__["extent"])(cellCoordinates, (c) => c[0]);
    let yExtent = Object(d3_array__WEBPACK_IMPORTED_MODULE_47__["extent"])(cellCoordinates, (c) => c[1]);
    let xRange = xExtent[1] - xExtent[0];
    let yRange = yExtent[1] - yExtent[0];
    const getViewExtentFromPolygonExtents = (extents) => [
      Math.min(...extents.map((i) => i[0])),
      Math.max(...extents.map((i) => i[1]))
    ];
    if (xRange === 0) {
      const polygonExtentsX = cellValues.map((cell) => Object(d3_array__WEBPACK_IMPORTED_MODULE_47__["extent"])(cell.poly, (i) => i[0]));
      xExtent = getViewExtentFromPolygonExtents(polygonExtentsX);
      xRange = xExtent[1] - xExtent[0];
    }
    if (yRange === 0) {
      const polygonExtentsY = cellValues.map((cell) => Object(d3_array__WEBPACK_IMPORTED_MODULE_47__["extent"])(cell.poly, (i) => i[1]));
      yExtent = getViewExtentFromPolygonExtents(polygonExtentsY);
      yRange = yExtent[1] - yExtent[0];
    }
    initialTargetX = xExtent[0] + xRange / 2;
    initialTargetY = yExtent[0] + yRange / 2;
    initialTargetZ = null;
    initialZoom = Math.log2(Math.min(width / xRange, height / yRange)) - zoomBackoff;
  } else {
    return {
      initialTargetX: null,
      initialTargetY: null,
      initialTargetZ: null,
      initialZoom: null
    };
  }
  return {
    initialTargetX,
    initialTargetY,
    initialZoom,
    initialTargetZ
  };
}
function getLayerLoaderTuple(data, use3d) {
  const loader = Array.isArray(data) && data.length > 1 || !Array.isArray(data) ? data : data[0];
  if (use3d) {
    return [VolumeLayer, Array.isArray(loader) ? loader : [loader]];
  }
  const Layer2 = Array.isArray(data) && data.length > 1 ? MultiscaleImageLayer : ImageLayer;
  return [Layer2, loader];
}
function renderSubBitmaskLayers(props) {
  const {
    bbox: {
      left,
      top,
      right,
      bottom
    },
    x,
    y,
    z
  } = props.tile;
  const {
    data,
    id,
    loader
  } = props;
  if ([left, bottom, right, top].some((v) => v < 0) || !data) {
    return null;
  }
  const base = loader[0];
  const [height, width] = loader[0].shape.slice(-2);
  const bounds = [
    left,
    data.height < base.tileSize ? height : bottom,
    data.width < base.tileSize ? width : right,
    top
  ];
  return new BitmaskLayer(props, {
    channelData: data,
    bounds,
    id: `sub-layer-${bounds}-${id}`,
    tileId: { x, y, z }
  });
}

// src/components/shared-spatial-scatterplot/AbstractSpatialOrScatterplot.js



// src/components/shared-spatial-scatterplot/ToolMenu.js



// src/assets/tools/near_me.svg

function SvgNearMe(props) {
  return /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("svg", __spreadValues({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24"
  }, props), /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("path", {
    fill: "none",
    d: "M0 0h24v24H0V0z"
  }), /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("path", {
    d: "M21 3L3 10.53v.98l6.84 2.65L12.48 21h.98L21 3z"
  }));
}
var ReactComponent = SvgNearMe;

// src/assets/tools/selection_rectangle.svg

function SvgSelectionRectangle(props) {
  return /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("svg", __spreadValues({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24"
  }, props), /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("path", {
    d: "       M19 19h2v2h-2v-2zm0-2h2v-2h-2v2z       M3 13h2v-2H3v2zm0 4h2v-2H3v2z       m0-8h2V7H3v2zm0-4h2V3H3v2z       m4 0h2V3H7v2zm8 16h2v-2h-2v2z       m-4 0h2v-2h-2v2z       m4 0h2v-2h-2v2z       m-8 0h2v-2H7v2z       m-4 0h2v-2H3v2z       M11 5h2v-2h-2v2z       M15 5h2v-2h-2v2z       M19 5h2v-2h-2v2z       M19 9h2v-2h-2v2z       M19 13h2v-2h-2v2z     "
  }));
}
var ReactComponent2 = SvgSelectionRectangle;

// src/assets/tools/selection_lasso.svg

function SvgSelectionLasso(props) {
  return /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("svg", __spreadValues({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24"
  }, props), /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("g", {
    transform: "translate(0,3)"
  }, /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("path", {
    style: {
      strokeWidth: 0.343565
    },
    d: "M 23.942314,4.6958443 C 23.446206,1.8868581 19.727461,0 14.687364,0 13.437819,0 12.150138,0.11543779 10.859708,0.34287772 4.1629423,1.5250844 -0.58168816,5.2884937 0.05768601,8.911385 c 0.25355086,1.439193 1.35605049,2.63583 3.04638949,3.461072 -0.2569865,0.387198 -0.4074679,0.826617 -0.4074679,1.29524 0,1.337498 1.1863293,2.457176 2.7639791,2.728248 l -1.3615475,2.333149 c -0.1576963,0.271073 -0.066308,0.61876 0.2047647,0.776457 0.090014,0.05291 0.1886171,0.07799 0.2858459,0.07799 0.1951448,0 0.3851362,-0.100665 0.4912977,-0.281723 l 1.6803757,-2.88148 C 8.41868,16.20561 9.6895264,15.063601 9.6998333,13.683844 c 6.872e-4,-0.0055 0.00137,-0.01065 0.00137,-0.01615 0,-0.02336 -0.00344,-0.04569 -0.00481,-0.06837 1.1292977,-0.0213 2.2847067,-0.130211 3.4435507,-0.334975 6.69711,-1.181863 11.44174,-4.9456164 10.802366,-8.5685077 z M 3.83312,13.667353 c 0,-0.30749 0.1281497,-0.59849 0.3470005,-0.848261 0.1219655,0.04295 0.2456489,0.08383 0.3717372,0.123339 l 1.2234344,2.352045 C 4.6865351,15.149835 3.83312,14.46408 3.83312,13.667353 Z M 7.0141869,15.216144 6.0223152,13.309702 5.4008064,12.114097 c 0.121622,-0.03161 0.2477103,-0.05634 0.3772342,-0.07387 0.1367388,-0.0189 0.2772568,-0.02886 0.420867,-0.02886 0.5067581,0 0.980534,0.11956 1.3701366,0.317454 0.5696305,0.289968 0.9554538,0.750345 0.9904974,1.262944 0.00137,0.02542 0.0055,0.05016 0.0055,0.07593 0,0.698124 -0.6562089,1.310356 -1.5508518,1.548447 z m 5.9185921,-3.126441 c -1.217251,0.214728 -2.429691,0.323982 -3.6060571,0.324669 -0.5765018,-0.911821 -1.7614569,-1.53917 -3.1278143,-1.53917 -0.4717146,0 -0.921441,0.07593 -1.332001,0.211292 -0.3061162,0.100665 -0.5878394,0.237403 -0.8427645,0.39991 C 2.4598914,10.828133 1.4360682,9.8579062 1.2319907,8.7035283 0.72660678,5.8381974 5.2307418,2.5475333 11.067221,1.5175259 c 1.222061,-0.2161023 2.439998,-0.3246688 3.620143,-0.3246688 4.371863,0 7.694479,1.5250844 8.080645,3.7101568 0.505041,2.8653309 -3.998751,6.1566821 -9.83523,7.1866891 z",
    id: "path10"
  })));
}
var ReactComponent3 = SvgSelectionLasso;

// src/components/shared-spatial-scatterplot/ToolMenu.js
function IconButton3(props) {
  const {
    alt,
    onClick,
    isActive,
    children
  } = props;
  const inactive = "btn btn-outline-secondary mr-2 icon";
  const active = `${inactive} active`;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
    className: isActive ? active : inactive,
    onClick,
    type: "button",
    title: alt
  }, children);
}
function ToolMenu(props) {
  const {
    setActiveTool,
    activeTool,
    visibleTools = { pan: true, selectRectangle: true, selectLasso: true }
  } = props;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "tool"
  }, visibleTools.pan && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(IconButton3, {
    alt: "pointer tool",
    onClick: () => setActiveTool(null),
    isActive: activeTool === null
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ReactComponent, null)), visibleTools.selectRectangle ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(IconButton3, {
    alt: "select rectangle",
    onClick: () => setActiveTool(nebula_gl__WEBPACK_IMPORTED_MODULE_61__["SELECTION_TYPE"].RECTANGLE),
    isActive: activeTool === nebula_gl__WEBPACK_IMPORTED_MODULE_61__["SELECTION_TYPE"].RECTANGLE
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ReactComponent2, null)) : null, visibleTools.selectLasso ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(IconButton3, {
    alt: "select lasso",
    onClick: () => setActiveTool(nebula_gl__WEBPACK_IMPORTED_MODULE_61__["SELECTION_TYPE"].POLYGON),
    isActive: activeTool === nebula_gl__WEBPACK_IMPORTED_MODULE_61__["SELECTION_TYPE"].POLYGON
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ReactComponent3, null)) : null);
}

// src/components/shared-spatial-scatterplot/cursor.js
var getCursorWithTool = () => "crosshair";
var getCursor = (interactionState) => interactionState.isDragging ? "grabbing" : "default";

// src/components/shared-spatial-scatterplot/AbstractSpatialOrScatterplot.js
var AbstractSpatialOrScatterplot = class extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(props) {
    super(props);
    this.state = {
      gl: null,
      tool: null
    };
    this.viewport = null;
    this.onViewStateChange = this.onViewStateChange.bind(this);
    this.onInitializeViewInfo = this.onInitializeViewInfo.bind(this);
    this.onWebGLInitialized = this.onWebGLInitialized.bind(this);
    this.onToolChange = this.onToolChange.bind(this);
    this.onHover = this.onHover.bind(this);
  }
  onViewStateChange({ viewState: nextViewState }) {
    const {
      setViewState,
      viewState,
      layers,
      spatialAxisFixed
    } = this.props;
    const use3d = layers == null ? void 0 : layers.some((l) => l.use3d);
    setViewState(__spreadProps(__spreadValues({}, nextViewState), {
      target: spatialAxisFixed && use3d ? viewState.target : nextViewState.target
    }));
  }
  onInitializeViewInfo({ viewport }) {
    this.viewport = viewport;
  }
  onWebGLInitialized(gl) {
    this.setState({ gl });
  }
  onToolChange(tool) {
    const { onToolChange: onToolChangeProp } = this.props;
    this.setState({ tool });
    if (onToolChangeProp) {
      onToolChangeProp(tool);
    }
  }
  getLayers() {
    return [];
  }
  onHover(info) {
    const {
      coordinate,
      sourceLayer: layer,
      tile
    } = info;
    const {
      setCellHighlight,
      cellHighlight,
      setComponentHover,
      layers
    } = this.props;
    const hasBitmask = (layers || []).some((l) => l.type === "bitmask");
    if (!setCellHighlight || !tile) {
      return null;
    }
    if (!layer || !coordinate) {
      if (cellHighlight && hasBitmask) {
        setCellHighlight(null);
      }
      return null;
    }
    const { content, bbox, z } = tile;
    if (!content) {
      if (cellHighlight && hasBitmask) {
        setCellHighlight(null);
      }
      return null;
    }
    const { data, width, height } = content;
    const {
      left,
      right,
      top,
      bottom
    } = bbox;
    const bounds = [
      left,
      data.height < layer.tileSize ? height : bottom,
      data.width < layer.tileSize ? width : right,
      top
    ];
    if (!data) {
      if (cellHighlight && hasBitmask) {
        setCellHighlight(null);
      }
      return null;
    }
    if (layer.id.includes("bitmask")) {
      const layerZoomScale = Math.max(1, __pow(2, Math.round(-z)));
      const dataCoords = [
        Math.floor((coordinate[0] - bounds[0]) / layerZoomScale),
        Math.floor((coordinate[1] - bounds[3]) / layerZoomScale)
      ];
      const coords = dataCoords[1] * width + dataCoords[0];
      const hoverData = data.map((d) => d[coords]);
      const cellId = hoverData.find((i) => i > 0);
      if (cellId !== Number(cellHighlight)) {
        if (setComponentHover) {
          setComponentHover();
        }
        setCellHighlight(cellId ? String(cellId) : null);
      }
    }
  }
  viewInfoDidUpdate(getCellCoords) {
    const { updateViewInfo, cells, uuid } = this.props;
    const { viewport } = this;
    if (updateViewInfo && viewport) {
      updateViewInfo({
        uuid,
        project: (cellId) => {
          const cell = cells[cellId];
          try {
            const [positionX, positionY] = getCellCoords(cell);
            return viewport.project([positionX, positionY]);
          } catch (e) {
            return [null, null];
          }
        }
      });
    }
  }
  componentDidUpdate() {
  }
  render() {
    const {
      deckRef,
      viewState,
      uuid,
      layers: layerProps
    } = this.props;
    const { gl, tool } = this.state;
    const layers = this.getLayers();
    const use3d = (layerProps || []).some((l) => l.use3d);
    const showCellSelectionTools = this.cellsLayer !== null || this.cellsEntries.length && this.cellsEntries[0][1].xy;
    const showPanTool = this.cellsLayer !== null || layerProps.findIndex((l) => l.type === "bitmask" || l.type === "raster") >= 0;
    const useDevicePixels = this.cellsEntries.length < 1e5 && !use3d;
    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ToolMenu, {
      activeTool: tool,
      setActiveTool: this.onToolChange,
      visibleTools: {
        pan: showPanTool,
        selectRectangle: showCellSelectionTools,
        selectLasso: showCellSelectionTools
      }
    }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(deck_gl__WEBPACK_IMPORTED_MODULE_45__["default"], {
      id: `deckgl-overlay-${uuid}`,
      ref: deckRef,
      views: [
        use3d ? new deck_gl__WEBPACK_IMPORTED_MODULE_45__["OrbitView"]({ id: "orbit", controller: true, orbitAxis: "Y" }) : new deck_gl__WEBPACK_IMPORTED_MODULE_45__["OrthographicView"]({
          id: "ortho"
        })
      ],
      layers: gl && viewState.target.slice(0, 2).every((i) => typeof i === "number") ? layers : [],
      glOptions: DEFAULT_GL_OPTIONS,
      onWebGLInitialized: this.onWebGLInitialized,
      onViewStateChange: this.onViewStateChange,
      viewState,
      useDevicePixels,
      controller: tool ? { dragPan: false } : true,
      getCursor: tool ? getCursorWithTool : getCursor,
      onHover: this.onHover
    }, this.onInitializeViewInfo));
  }
};

// src/components/shared-spatial-scatterplot/quadtree.js

function createCellsQuadTree(cellsEntries, getCellCoords) {
  if (!cellsEntries || !cellsEntries.length || !getCellCoords(cellsEntries[0][1])) {
    return null;
  }
  const tree = Object(d3_quadtree__WEBPACK_IMPORTED_MODULE_66__["quadtree"])().x((d) => getCellCoords(d[1])[0]).y((d) => getCellCoords(d[1])[1]).addAll(cellsEntries);
  return tree;
}

// src/layer-extensions/ScaledExpressionExtension/ScaledExpressionExtension.js



// src/layer-extensions/ScaledExpressionExtension/shader-module.js
var vs3 = "\nvec4 plasma (float x_1648624884) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.050980392156862744,0.03137254901960784,0.5294117647058824,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.29411764705882354,0.011764705882352941,0.6313725490196078,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.49019607843137253,0.011764705882352941,0.6588235294117647,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.6588235294117647,0.13333333333333333,0.5882352941176471,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.796078431372549,0.27450980392156865,0.4745098039215686,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8980392156862745,0.4196078431372549,0.36470588235294116,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.9725490196078431,0.5803921568627451,0.2549019607843137,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.9921568627450981,0.7647058823529411,0.1568627450980392,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9411764705882353,0.9764705882352941,0.12941176470588237,1);\n  float a0 = smoothstep(e0,e1,x_1648624884);\n  float a1 = smoothstep(e1,e2,x_1648624884);\n  float a2 = smoothstep(e2,e3,x_1648624884);\n  float a3 = smoothstep(e3,e4,x_1648624884);\n  float a4 = smoothstep(e4,e5,x_1648624884);\n  float a5 = smoothstep(e5,e6,x_1648624884);\n  float a6 = smoothstep(e6,e7,x_1648624884);\n  float a7 = smoothstep(e7,e8,x_1648624884);\n  return max(mix(v0,v1,a0)*step(e0,x_1648624884)*step(x_1648624884,e1),\n    max(mix(v1,v2,a1)*step(e1,x_1648624884)*step(x_1648624884,e2),\n    max(mix(v2,v3,a2)*step(e2,x_1648624884)*step(x_1648624884,e3),\n    max(mix(v3,v4,a3)*step(e3,x_1648624884)*step(x_1648624884,e4),\n    max(mix(v4,v5,a4)*step(e4,x_1648624884)*step(x_1648624884,e5),\n    max(mix(v5,v6,a5)*step(e5,x_1648624884)*step(x_1648624884,e6),\n    max(mix(v6,v7,a6)*step(e6,x_1648624884)*step(x_1648624884,e7),mix(v7,v8,a7)*step(e7,x_1648624884)*step(x_1648624884,e8)\n  )))))));\n}\n\nvec4 viridis (float x_686877309) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.26666666666666666,0.00392156862745098,0.32941176470588235,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.2784313725490196,0.17254901960784313,0.47843137254901963,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.23137254901960785,0.3176470588235294,0.5450980392156862,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.17254901960784313,0.44313725490196076,0.5568627450980392,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.12941176470588237,0.5647058823529412,0.5529411764705883,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.15294117647058825,0.6784313725490196,0.5058823529411764,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.3607843137254902,0.7843137254901961,0.38823529411764707,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.6666666666666666,0.8627450980392157,0.19607843137254902,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9921568627450981,0.9058823529411765,0.1450980392156863,1);\n  float a0 = smoothstep(e0,e1,x_686877309);\n  float a1 = smoothstep(e1,e2,x_686877309);\n  float a2 = smoothstep(e2,e3,x_686877309);\n  float a3 = smoothstep(e3,e4,x_686877309);\n  float a4 = smoothstep(e4,e5,x_686877309);\n  float a5 = smoothstep(e5,e6,x_686877309);\n  float a6 = smoothstep(e6,e7,x_686877309);\n  float a7 = smoothstep(e7,e8,x_686877309);\n  return max(mix(v0,v1,a0)*step(e0,x_686877309)*step(x_686877309,e1),\n    max(mix(v1,v2,a1)*step(e1,x_686877309)*step(x_686877309,e2),\n    max(mix(v2,v3,a2)*step(e2,x_686877309)*step(x_686877309,e3),\n    max(mix(v3,v4,a3)*step(e3,x_686877309)*step(x_686877309,e4),\n    max(mix(v4,v5,a4)*step(e4,x_686877309)*step(x_686877309,e5),\n    max(mix(v5,v6,a5)*step(e5,x_686877309)*step(x_686877309,e6),\n    max(mix(v6,v7,a6)*step(e6,x_686877309)*step(x_686877309,e7),mix(v7,v8,a7)*step(e7,x_686877309)*step(x_686877309,e8)\n  )))))));\n}\n\nvec4 greys (float x_3692066534) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_3692066534);\n  return mix(v0,v1,a0)*step(e0,x_3692066534)*step(x_3692066534,e1);\n}\n\nvec4 magma (float x_652973032) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.01568627450980392,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.10980392156862745,0.06274509803921569,0.26666666666666666,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.30980392156862746,0.07058823529411765,0.4823529411764706,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.5058823529411764,0.1450980392156863,0.5058823529411764,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.7098039215686275,0.21176470588235294,0.47843137254901963,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8980392156862745,0.3137254901960784,0.39215686274509803,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.984313725490196,0.5294117647058824,0.3803921568627451,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.996078431372549,0.7607843137254902,0.5294117647058824,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9882352941176471,0.9921568627450981,0.7490196078431373,1);\n  float a0 = smoothstep(e0,e1,x_652973032);\n  float a1 = smoothstep(e1,e2,x_652973032);\n  float a2 = smoothstep(e2,e3,x_652973032);\n  float a3 = smoothstep(e3,e4,x_652973032);\n  float a4 = smoothstep(e4,e5,x_652973032);\n  float a5 = smoothstep(e5,e6,x_652973032);\n  float a6 = smoothstep(e6,e7,x_652973032);\n  float a7 = smoothstep(e7,e8,x_652973032);\n  return max(mix(v0,v1,a0)*step(e0,x_652973032)*step(x_652973032,e1),\n    max(mix(v1,v2,a1)*step(e1,x_652973032)*step(x_652973032,e2),\n    max(mix(v2,v3,a2)*step(e2,x_652973032)*step(x_652973032,e3),\n    max(mix(v3,v4,a3)*step(e3,x_652973032)*step(x_652973032,e4),\n    max(mix(v4,v5,a4)*step(e4,x_652973032)*step(x_652973032,e5),\n    max(mix(v5,v6,a5)*step(e5,x_652973032)*step(x_652973032,e6),\n    max(mix(v6,v7,a6)*step(e6,x_652973032)*step(x_652973032,e7),mix(v7,v8,a7)*step(e7,x_652973032)*step(x_652973032,e8)\n  )))))));\n}\n\nvec4 jet (float x_799389509) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.5137254901960784,1);\n  const float e1 = 0.125;\n  const vec4 v1 = vec4(0,0.23529411764705882,0.6666666666666666,1);\n  const float e2 = 0.375;\n  const vec4 v2 = vec4(0.0196078431372549,1,1,1);\n  const float e3 = 0.625;\n  const vec4 v3 = vec4(1,1,0,1);\n  const float e4 = 0.875;\n  const vec4 v4 = vec4(0.9803921568627451,0,0,1);\n  const float e5 = 1.0;\n  const vec4 v5 = vec4(0.5019607843137255,0,0,1);\n  float a0 = smoothstep(e0,e1,x_799389509);\n  float a1 = smoothstep(e1,e2,x_799389509);\n  float a2 = smoothstep(e2,e3,x_799389509);\n  float a3 = smoothstep(e3,e4,x_799389509);\n  float a4 = smoothstep(e4,e5,x_799389509);\n  return max(mix(v0,v1,a0)*step(e0,x_799389509)*step(x_799389509,e1),\n    max(mix(v1,v2,a1)*step(e1,x_799389509)*step(x_799389509,e2),\n    max(mix(v2,v3,a2)*step(e2,x_799389509)*step(x_799389509,e3),\n    max(mix(v3,v4,a3)*step(e3,x_799389509)*step(x_799389509,e4),mix(v4,v5,a4)*step(e4,x_799389509)*step(x_799389509,e5)\n  ))));\n}\n\nvec4 bone (float x_1404936397) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.376;\n  const vec4 v1 = vec4(0.32941176470588235,0.32941176470588235,0.4549019607843137,1);\n  const float e2 = 0.753;\n  const vec4 v2 = vec4(0.6627450980392157,0.7843137254901961,0.7843137254901961,1);\n  const float e3 = 1.0;\n  const vec4 v3 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_1404936397);\n  float a1 = smoothstep(e1,e2,x_1404936397);\n  float a2 = smoothstep(e2,e3,x_1404936397);\n  return max(mix(v0,v1,a0)*step(e0,x_1404936397)*step(x_1404936397,e1),\n    max(mix(v1,v2,a1)*step(e1,x_1404936397)*step(x_1404936397,e2),mix(v2,v3,a2)*step(e2,x_1404936397)*step(x_1404936397,e3)\n  ));\n}\n\nvec4 copper (float x_41650866) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.804;\n  const vec4 v1 = vec4(1,0.6274509803921569,0.4,1);\n  const float e2 = 1.0;\n  const vec4 v2 = vec4(1,0.7803921568627451,0.4980392156862745,1);\n  float a0 = smoothstep(e0,e1,x_41650866);\n  float a1 = smoothstep(e1,e2,x_41650866);\n  return max(mix(v0,v1,a0)*step(e0,x_41650866)*step(x_41650866,e1),mix(v1,v2,a1)*step(e1,x_41650866)*step(x_41650866,e2)\n  );\n}\n\nvec4 density (float x_681601952) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.21176470588235294,0.054901960784313725,0.1411764705882353,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.34901960784313724,0.09019607843137255,0.3137254901960784,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.43137254901960786,0.17647058823529413,0.5176470588235295,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.47058823529411764,0.30196078431372547,0.6980392156862745,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.47058823529411764,0.44313725490196076,0.8352941176470589,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.45098039215686275,0.592156862745098,0.8941176470588236,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.5254901960784314,0.7254901960784313,0.8901960784313725,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.6941176470588235,0.8392156862745098,0.8901960784313725,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9019607843137255,0.9450980392156862,0.9450980392156862,1);\n  float a0 = smoothstep(e0,e1,x_681601952);\n  float a1 = smoothstep(e1,e2,x_681601952);\n  float a2 = smoothstep(e2,e3,x_681601952);\n  float a3 = smoothstep(e3,e4,x_681601952);\n  float a4 = smoothstep(e4,e5,x_681601952);\n  float a5 = smoothstep(e5,e6,x_681601952);\n  float a6 = smoothstep(e6,e7,x_681601952);\n  float a7 = smoothstep(e7,e8,x_681601952);\n  return max(mix(v0,v1,a0)*step(e0,x_681601952)*step(x_681601952,e1),\n    max(mix(v1,v2,a1)*step(e1,x_681601952)*step(x_681601952,e2),\n    max(mix(v2,v3,a2)*step(e2,x_681601952)*step(x_681601952,e3),\n    max(mix(v3,v4,a3)*step(e3,x_681601952)*step(x_681601952,e4),\n    max(mix(v4,v5,a4)*step(e4,x_681601952)*step(x_681601952,e5),\n    max(mix(v5,v6,a5)*step(e5,x_681601952)*step(x_681601952,e6),\n    max(mix(v6,v7,a6)*step(e6,x_681601952)*step(x_681601952,e7),mix(v7,v8,a7)*step(e7,x_681601952)*step(x_681601952,e8)\n  )))))));\n}\n\nvec4 inferno (float x_902288871) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.01568627450980392,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.12156862745098039,0.047058823529411764,0.2823529411764706,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.3333333333333333,0.058823529411764705,0.42745098039215684,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.5333333333333333,0.13333333333333333,0.41568627450980394,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.7294117647058823,0.21176470588235294,0.3333333333333333,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8901960784313725,0.34901960784313724,0.2,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.9764705882352941,0.5490196078431373,0.0392156862745098,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.9764705882352941,0.788235294117647,0.19607843137254902,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9882352941176471,1,0.6431372549019608,1);\n  float a0 = smoothstep(e0,e1,x_902288871);\n  float a1 = smoothstep(e1,e2,x_902288871);\n  float a2 = smoothstep(e2,e3,x_902288871);\n  float a3 = smoothstep(e3,e4,x_902288871);\n  float a4 = smoothstep(e4,e5,x_902288871);\n  float a5 = smoothstep(e5,e6,x_902288871);\n  float a6 = smoothstep(e6,e7,x_902288871);\n  float a7 = smoothstep(e7,e8,x_902288871);\n  return max(mix(v0,v1,a0)*step(e0,x_902288871)*step(x_902288871,e1),\n    max(mix(v1,v2,a1)*step(e1,x_902288871)*step(x_902288871,e2),\n    max(mix(v2,v3,a2)*step(e2,x_902288871)*step(x_902288871,e3),\n    max(mix(v3,v4,a3)*step(e3,x_902288871)*step(x_902288871,e4),\n    max(mix(v4,v5,a4)*step(e4,x_902288871)*step(x_902288871,e5),\n    max(mix(v5,v6,a5)*step(e5,x_902288871)*step(x_902288871,e6),\n    max(mix(v6,v7,a6)*step(e6,x_902288871)*step(x_902288871,e7),mix(v7,v8,a7)*step(e7,x_902288871)*step(x_902288871,e8)\n  )))))));\n}\n\nvec4 cool (float x_2444426143) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.49019607843137253,0,0.7019607843137254,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.4549019607843137,0,0.8549019607843137,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.3843137254901961,0.2901960784313726,0.9294117647058824,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.26666666666666666,0.5725490196078431,0.9058823529411765,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0,0.8,0.7725490196078432,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0,0.9686274509803922,0.5725490196078431,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0,1,0.34509803921568627,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.1568627450980392,1,0.03137254901960784,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.5764705882352941,1,0,1);\n  float a0 = smoothstep(e0,e1,x_2444426143);\n  float a1 = smoothstep(e1,e2,x_2444426143);\n  float a2 = smoothstep(e2,e3,x_2444426143);\n  float a3 = smoothstep(e3,e4,x_2444426143);\n  float a4 = smoothstep(e4,e5,x_2444426143);\n  float a5 = smoothstep(e5,e6,x_2444426143);\n  float a6 = smoothstep(e6,e7,x_2444426143);\n  float a7 = smoothstep(e7,e8,x_2444426143);\n  return max(mix(v0,v1,a0)*step(e0,x_2444426143)*step(x_2444426143,e1),\n    max(mix(v1,v2,a1)*step(e1,x_2444426143)*step(x_2444426143,e2),\n    max(mix(v2,v3,a2)*step(e2,x_2444426143)*step(x_2444426143,e3),\n    max(mix(v3,v4,a3)*step(e3,x_2444426143)*step(x_2444426143,e4),\n    max(mix(v4,v5,a4)*step(e4,x_2444426143)*step(x_2444426143,e5),\n    max(mix(v5,v6,a5)*step(e5,x_2444426143)*step(x_2444426143,e6),\n    max(mix(v6,v7,a6)*step(e6,x_2444426143)*step(x_2444426143,e7),mix(v7,v8,a7)*step(e7,x_2444426143)*step(x_2444426143,e8)\n  )))))));\n}\n\nvec4 hot (float x_1123650753) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.3;\n  const vec4 v1 = vec4(0.9019607843137255,0,0,1);\n  const float e2 = 0.6;\n  const vec4 v2 = vec4(1,0.8235294117647058,0,1);\n  const float e3 = 1.0;\n  const vec4 v3 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_1123650753);\n  float a1 = smoothstep(e1,e2,x_1123650753);\n  float a2 = smoothstep(e2,e3,x_1123650753);\n  return max(mix(v0,v1,a0)*step(e0,x_1123650753)*step(x_1123650753,e1),\n    max(mix(v1,v2,a1)*step(e1,x_1123650753)*step(x_1123650753,e2),mix(v2,v3,a2)*step(e2,x_1123650753)*step(x_1123650753,e3)\n  ));\n}\n\nvec4 spring (float x_3460271019) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(1,0,1,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0,1);\n  float a0 = smoothstep(e0,e1,x_3460271019);\n  return mix(v0,v1,a0)*step(e0,x_3460271019)*step(x_3460271019,e1);\n}\n\nvec4 summer (float x_1787574999) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0.5019607843137255,0.4,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0.4,1);\n  float a0 = smoothstep(e0,e1,x_1787574999);\n  return mix(v0,v1,a0)*step(e0,x_1787574999)*step(x_1787574999,e1);\n}\n\nvec4 autumn (float x_204634793) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(1,0,0,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0,1);\n  float a0 = smoothstep(e0,e1,x_204634793);\n  return mix(v0,v1,a0)*step(e0,x_204634793)*step(x_204634793,e1);\n}\n\nvec4 winter (float x_4071283602) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,1,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(0,1,0.5019607843137255,1);\n  float a0 = smoothstep(e0,e1,x_4071283602);\n  return mix(v0,v1,a0)*step(e0,x_4071283602)*step(x_4071283602,e1);\n}\n\n// Custom attributes for Vitessce:\nattribute float expressionValue;\n\n// Custom uniforms for Vitessce:\nuniform vec2 uColorScaleRange;\nuniform bool uIsExpressionMode;\n\n";
var inject = {
  "vs:DECKGL_FILTER_COLOR": "\n    if(uIsExpressionMode) {\n      float normalizedExpressionValue = expressionValue / 255.0;\n      float scaledExpressionValue = (normalizedExpressionValue - uColorScaleRange[0]) / max(0.005, (uColorScaleRange[1] - uColorScaleRange[0]));\n      color.rgb = COLORMAP_FUNC(clamp(scaledExpressionValue, 0.0, 1.0)).rgb;\n    }\n  "
};
var shader_module_default = {
  name: "scaled-expression",
  vs: vs3,
  inject
};

// src/layer-extensions/ScaledExpressionExtension/ScaledExpressionExtension.js
var defaultProps6 = {
  colormap: { type: "string", value: GLSL_COLORMAP_DEFAULT, compare: true },
  colorScaleLo: { type: "number", value: 0, compare: true },
  colorScaleHi: { type: "number", value: 1, compare: true },
  isExpressionMode: false,
  getExpressionValue: { type: "accessor", value: 0 },
  getSelectionState: { type: "accessor", value: 0 }
};
var ScaledExpressionExtension = class extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["LayerExtension"] {
  getShaders() {
    const { colormap } = this.props;
    return {
      modules: [shader_module_default],
      defines: {
        [COLORMAP_SHADER_PLACEHOLDER]: GLSL_COLORMAPS.includes(colormap) ? colormap : GLSL_COLORMAP_DEFAULT
      }
    };
  }
  updateState({ props, oldProps }) {
    var _a2, _b2, _c, _d;
    if (props.colormap !== oldProps.colormap) {
      const { gl } = this.context;
      if (this.state.model) {
        (_a2 = this.state.model) == null ? void 0 : _a2.delete();
        this.state.model = this._getModel(gl);
      } else {
        if (this.state.models) {
          (_b2 = this.state.models) == null ? void 0 : _b2.forEach((model) => model == null ? void 0 : model.delete());
        }
        if (this.state.topModel) {
          (_c = this.state.topModel) == null ? void 0 : _c.delete();
        }
        if (this.state.sideModel) {
          (_d = this.state.sideModel) == null ? void 0 : _d.delete();
        }
        if (this._getModels) {
          this.setState(this._getModels(this.context.gl));
        }
      }
      const attributeManager = this.getAttributeManager();
      if (attributeManager) {
        this.getAttributeManager().invalidateAll();
      }
    }
  }
  initializeState() {
    const layer = this.getCurrentLayer();
    if (layer.isComposite) {
      return;
    }
    const attributeManager = this.getAttributeManager();
    if (attributeManager) {
      attributeManager.add({
        expressionValue: {
          type: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].FLOAT,
          size: 1,
          transition: true,
          accessor: "getExpressionValue",
          defaultValue: 1,
          divisor: Object.values(attributeManager.attributes)[0].settings.divisor
        }
      });
    }
  }
  draw() {
    const {
      colorScaleLo,
      colorScaleHi,
      isExpressionMode
    } = this.props;
    const {
      topModel,
      sideModel,
      models,
      model
    } = this.state;
    const uniforms = {
      uColorScaleRange: [colorScaleLo, colorScaleHi],
      uIsExpressionMode: isExpressionMode
    };
    model == null ? void 0 : model.setUniforms(uniforms);
    models == null ? void 0 : models.forEach((m) => m.setUniforms(uniforms));
    topModel == null ? void 0 : topModel.setUniforms(uniforms);
    sideModel == null ? void 0 : sideModel.setUniforms(uniforms);
  }
};
ScaledExpressionExtension.extensionName = "ScaledExpressionExtension";
ScaledExpressionExtension.defaultProps = defaultProps6;

// src/layer-extensions/ScaledExpressionExtension/index.js
var ScaledExpressionExtension_default = ScaledExpressionExtension;

// src/layer-extensions/SelectionExtension/SelectionExtension.js



// src/layer-extensions/SelectionExtension/shader-module.js
var vs4 = "\nattribute float isSelected;\n";
var inject2 = {
  "vs:DECKGL_FILTER_GL_POSITION": "\n    position.z += (1. - isSelected) * .00005; // Add a small z offset for unselected points in the positive direction i.e into the screen.\n  ",
  "fs:#main-start": " // Gets rid of bad border effects (active after deck.gl 8.5): https://github.com/visgl/deck.gl/pull/6081\n    float distToCenterNew = length(unitPosition) * outerRadiusPixels;\n    float inCircleNew = step(distToCenterNew, outerRadiusPixels);\n    if (inCircleNew == 0.0) {\n      discard;\n    }\n  "
};
var shader_module_default2 = {
  name: "selection",
  vs: vs4,
  inject: inject2
};

// src/layer-extensions/SelectionExtension/SelectionExtension.js
var SelectionExtension = class extends _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["LayerExtension"] {
  getShaders() {
    return {
      modules: [shader_module_default2]
    };
  }
  initializeState(context, extension) {
    const attributeManager = this.getAttributeManager();
    if (attributeManager) {
      attributeManager.add({
        isSelected: {
          type: _luma_gl_constants__WEBPACK_IMPORTED_MODULE_24__["default"].FLOAT,
          size: 1,
          transition: true,
          accessor: "getCellIsSelected",
          defaultValue: 1,
          divisor: Number(extension.opts.instanced)
        }
      });
    }
  }
};
SelectionExtension.extensionName = "SelectionExtension";

// src/layer-extensions/SelectionExtension/index.js
var SelectionExtension_default = SelectionExtension;

// src/components/spatial/Spatial.js
var CELLS_LAYER_ID = "cells-layer";
var MOLECULES_LAYER_ID = "molecules-layer";
var NEIGHBORHOODS_LAYER_ID = "neighborhoods-layer";
var defaultGetCellCoords = (cell) => cell.xy;
var makeDefaultGetCellPolygon = (radius) => (cellEntry) => {
  var _a2;
  const cell = cellEntry[1];
  return ((_a2 = cell.poly) == null ? void 0 : _a2.length) ? cell.poly : square(cell.xy[0], cell.xy[1], radius);
};
var makeDefaultGetCellColors = (cellColors, theme) => (cellEntry) => {
  const [r, g, b, a] = cellColors && cellColors.get(cellEntry[0]) || getDefaultColor(theme);
  return [r, g, b, 255 * (a || 1)];
};
var makeDefaultGetCellIsSelected = (cellSelection) => {
  if (cellSelection) {
    const cellSelectionSet = new Set(cellSelection);
    return (cellEntry) => cellSelectionSet.has(cellEntry[0]) ? 1 : 0;
  }
  return () => 0;
};
var Spatial = class extends AbstractSpatialOrScatterplot {
  constructor(props) {
    super(props);
    this.cellsEntries = [];
    this.moleculesEntries = [];
    this.cellsQuadTree = null;
    this.cellsLayer = null;
    this.moleculesLayer = null;
    this.neighborhoodsLayer = null;
    this.imageLayers = [];
    this.layerLoaderSelections = {};
    this.randomColorData = {
      data: new Uint8Array(2048 * 2048 * 3).map((_, j) => j < 4 ? 0 : Math.round(255 * Math.random())),
      height: 2048,
      width: 2048
    };
    this.color = __spreadValues({}, this.randomColorData);
    this.expression = {
      data: new Uint8Array(2048 * 2048),
      height: 2048,
      width: 2048
    };
    this.onUpdateCellsData();
    this.onUpdateCellsLayer();
    this.onUpdateMoleculesData();
    this.onUpdateMoleculesLayer();
    this.onUpdateNeighborhoodsData();
    this.onUpdateNeighborhoodsLayer();
    this.onUpdateImages();
  }
  createCellsLayer(layerDef) {
    const {
      radius,
      stroked,
      visible,
      opacity
    } = layerDef;
    const { cellsEntries } = this;
    const {
      theme,
      cellFilter,
      cellSelection,
      setCellHighlight,
      setComponentHover,
      getCellIsSelected = makeDefaultGetCellIsSelected(cellsEntries.length === cellSelection.length ? null : cellSelection),
      cellColors,
      getCellColor = makeDefaultGetCellColors(cellColors, theme),
      getCellPolygon = makeDefaultGetCellPolygon(radius),
      onCellClick,
      lineWidthScale = 10,
      lineWidthMaxPixels = 2,
      geneExpressionColormapRange,
      cellColorEncoding,
      getExpressionValue,
      geneExpressionColormap
    } = this.props;
    const filteredCellsEntries = cellFilter ? cellsEntries.filter((cellEntry) => cellFilter.includes(cellEntry[0])) : cellsEntries;
    const flipYTooltip = true;
    return new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["PolygonLayer"](__spreadValues({
      id: CELLS_LAYER_ID,
      backgroundColor: [0, 0, 0],
      isSelected: getCellIsSelected,
      getPolygon: getCellPolygon,
      updateTriggers: {
        getLineWidth: [stroked],
        isSelected: cellSelection,
        getExpressionValue,
        getFillColor: [opacity, cellColorEncoding, cellSelection, cellColors],
        getLineColor: [cellColorEncoding, cellSelection, cellColors]
      },
      getFillColor: (cellEntry) => {
        const color = getCellColor(cellEntry);
        color[3] = opacity * 255;
        return color;
      },
      getLineColor: (cellEntry) => {
        const color = getCellColor(cellEntry);
        color[3] = 255;
        return color;
      },
      onClick: (info) => {
        if (onCellClick) {
          onCellClick(info);
        }
      },
      visible,
      getLineWidth: stroked ? 1 : 0,
      lineWidthScale,
      lineWidthMaxPixels,
      getExpressionValue,
      extensions: [new ScaledExpressionExtension_default()],
      colorScaleLo: geneExpressionColormapRange[0],
      colorScaleHi: geneExpressionColormapRange[1],
      isExpressionMode: cellColorEncoding === "geneSelection",
      colormap: geneExpressionColormap
    }, cellLayerDefaultProps(filteredCellsEntries, void 0, setCellHighlight, setComponentHover, flipYTooltip)));
  }
  createMoleculesLayer(layerDef) {
    const {
      setMoleculeHighlight,
      getMoleculeColor = (d) => PALETTE[d[2] % PALETTE.length],
      getMoleculePosition = (d) => [d[0], d[1], 0]
    } = this.props;
    const { moleculesEntries } = this;
    return new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["ScatterplotLayer"]({
      id: MOLECULES_LAYER_ID,
      coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["COORDINATE_SYSTEM"].CARTESIAN,
      data: moleculesEntries,
      pickable: true,
      autoHighlight: true,
      radiusMaxPixels: 3,
      opacity: layerDef.opacity,
      visible: layerDef.visible,
      getRadius: layerDef.radius,
      getPosition: getMoleculePosition,
      getLineColor: getMoleculeColor,
      getFillColor: getMoleculeColor,
      onHover: (info) => {
        if (setMoleculeHighlight) {
          if (info.object) {
            setMoleculeHighlight(info.object[3]);
          } else {
            setMoleculeHighlight(null);
          }
        }
      }
    });
  }
  createNeighborhoodsLayer(layerDef) {
    const {
      getNeighborhoodPolygon = (neighborhoodsEntry) => {
        const neighborhood = neighborhoodsEntry[1];
        return neighborhood.poly;
      }
    } = this.props;
    const { neighborhoodsEntries } = this;
    return new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["PolygonLayer"]({
      id: NEIGHBORHOODS_LAYER_ID,
      getPolygon: getNeighborhoodPolygon,
      coordinateSystem: _deck_gl_core__WEBPACK_IMPORTED_MODULE_21__["COORDINATE_SYSTEM"].CARTESIAN,
      data: neighborhoodsEntries,
      pickable: true,
      autoHighlight: true,
      stroked: true,
      filled: false,
      getElevation: 0,
      getLineWidth: 10,
      visible: layerDef.visible
    });
  }
  createSelectionLayers() {
    const {
      viewState,
      getCellCoords = defaultGetCellCoords,
      setCellSelection: setCellSelection2
    } = this.props;
    const { tool } = this.state;
    const { cellsQuadTree } = this;
    return getSelectionLayers(tool, viewState.zoom, CELLS_LAYER_ID, getCellCoords, setCellSelection2, cellsQuadTree);
  }
  createScaleBarLayer() {
    const {
      viewState,
      width,
      height,
      imageLayerLoaders = {},
      layers
    } = this.props;
    const use3d = (layers || []).some((i) => i.use3d);
    const loaders = Object.values(imageLayerLoaders);
    if (!viewState || !width || !height || loaders.length < 1)
      return null;
    const loader = loaders[0];
    if (!loader)
      return null;
    const source = getSourceFromLoader(loader);
    if (!source.meta)
      return null;
    const { physicalSizes } = source.meta;
    if (physicalSizes && !use3d) {
      const { x } = physicalSizes;
      const { unit: unit2, size } = x;
      if (unit2 && size) {
        return new ScaleBarLayer({
          id: "scalebar-layer",
          unit: unit2,
          size,
          viewState: __spreadProps(__spreadValues({}, viewState), { width, height })
        });
      }
      return null;
    }
    return null;
  }
  createImageLayer(rawLayerDef, loader, i) {
    const layerDef = __spreadProps(__spreadValues({}, rawLayerDef), {
      channels: rawLayerDef.channels.filter((channel) => channel.selection && channel.color && channel.slider)
    });
    let selections;
    const nextLoaderSelection = layerDef.channels.map((c) => c.selection);
    const prevLoaderSelection = this.layerLoaderSelections[layerDef.index];
    if (lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(prevLoaderSelection, nextLoaderSelection)) {
      selections = prevLoaderSelection;
    } else {
      selections = nextLoaderSelection;
      this.layerLoaderSelections[layerDef.index] = nextLoaderSelection;
    }
    const useTransparentColor = !layerDef.visible && typeof layerDef.visible === "boolean" || Boolean(layerDef.transparentColor);
    const transparentColor = useTransparentColor ? [0, 0, 0] : null;
    const layerProps = {
      colormap: layerDef.colormap,
      opacity: layerDef.opacity,
      useTransparentColor,
      transparentColor,
      colors: layerDef.channels.map((c) => c.color),
      sliders: layerDef.channels.map((c) => c.slider),
      resolution: layerDef.resolution,
      renderingMode: layerDef.renderingMode,
      xSlice: layerDef.xSlice,
      ySlice: layerDef.ySlice,
      zSlice: layerDef.zSlice,
      callback: layerDef.callback,
      visibilities: layerDef.channels.map((c) => !layerDef.visible && typeof layerDef.visible === "boolean" ? false : c.visible)
    };
    if (!loader || !layerProps)
      return null;
    const {
      metadata: { transform },
      data
    } = loader;
    let modelMatrix;
    if (transform) {
      const { scale, translate } = transform;
      modelMatrix = new math_gl__WEBPACK_IMPORTED_MODULE_23__["Matrix4"]().translate([translate.x, translate.y, 0]).scale(scale);
    } else if (layerDef.modelMatrix) {
      modelMatrix = new math_gl__WEBPACK_IMPORTED_MODULE_23__["Matrix4"](layerDef.modelMatrix);
    }
    if (rawLayerDef.type === "bitmask") {
      const {
        geneExpressionColormap,
        geneExpressionColormapRange = [0, 1],
        cellColorEncoding
      } = this.props;
      return new MultiscaleImageLayer({
        id: `bitmask-layer-${layerDef.index}-${i}`,
        channelsVisible: layerProps.visibilities,
        opacity: layerProps.opacity,
        modelMatrix,
        hoveredCell: Number(this.props.cellHighlight),
        renderSubLayers: renderSubBitmaskLayers,
        loader: data,
        selections,
        cellColorData: this.color.data,
        cellTexHeight: this.color.height,
        cellTexWidth: this.color.width,
        excludeBackground: true,
        onViewportLoad: layerProps.callback,
        colorScaleLo: geneExpressionColormapRange[0],
        colorScaleHi: geneExpressionColormapRange[1],
        isExpressionMode: cellColorEncoding === "geneSelection",
        colormap: geneExpressionColormap,
        expressionData: this.expression.data
      });
    }
    const [Layer2, layerLoader] = getLayerLoaderTuple(data, layerDef.use3d);
    const extensions = layerDef.use3d ? [] : [
      ...layerProps.colormap ? [
        new AdditiveColormapExtension()
      ] : [
        new ColorPaletteExtension()
      ]
    ];
    return new Layer2({
      loader: layerLoader,
      id: `${layerDef.use3d ? "volume" : "image"}-layer-${layerDef.index}-${i}`,
      colors: layerProps.colors,
      contrastLimits: layerProps.sliders,
      selections,
      channelsVisible: layerProps.visibilities,
      opacity: layerProps.opacity,
      colormap: layerProps.colormap,
      modelMatrix,
      transparentColor: layerProps.transparentColor,
      useTransparentColor: layerProps.useTransparentColor,
      resolution: layerProps.resolution,
      renderingMode: layerProps.renderingMode,
      pickable: false,
      xSlice: layerProps.xSlice,
      ySlice: layerProps.ySlice,
      zSlice: layerProps.zSlice,
      onViewportLoad: layerProps.callback,
      extensions
    });
  }
  createImageLayers() {
    const {
      layers,
      imageLayerLoaders = {},
      rasterLayersCallbacks = []
    } = this.props;
    const use3d = (layers || []).some((i) => i.use3d);
    const use3dIndex = (layers || []).findIndex((i) => i.use3d);
    return (layers || []).filter((layer) => layer.type === "raster" || layer.type === "bitmask").filter((layer) => use3d ? layer.use3d === use3d : true).map((layer, i) => this.createImageLayer(__spreadProps(__spreadValues({}, layer), { callback: rasterLayersCallbacks[use3d ? use3dIndex : i] }), imageLayerLoaders[layer.index], i));
  }
  getLayers() {
    const {
      imageLayers,
      cellsLayer,
      neighborhoodsLayer,
      moleculesLayer
    } = this;
    return [
      ...imageLayers,
      cellsLayer,
      neighborhoodsLayer,
      moleculesLayer,
      this.createScaleBarLayer(),
      ...this.createSelectionLayers()
    ];
  }
  onUpdateCellsData() {
    const { cells = {}, getCellCoords = defaultGetCellCoords } = this.props;
    const cellsEntries = Object.entries(cells);
    this.cellsEntries = cellsEntries;
    this.cellsQuadTree = createCellsQuadTree(cellsEntries, getCellCoords);
  }
  onUpdateCellsLayer() {
    const { layers } = this.props;
    const layerDef = (layers || []).find((layer) => layer.type === "cells");
    if (layerDef) {
      this.cellsLayer = this.createCellsLayer(layerDef);
    } else {
      this.cellsLayer = null;
    }
  }
  onUpdateCellColors() {
    const color = this.randomColorData;
    const { size } = this.props.cellColors;
    if (typeof size === "number") {
      const cellIds = this.props.cellColors.keys();
      color.data = new Uint8Array(color.height * color.width * 3).fill(getDefaultColor(this.props.theme)[0]);
      color.data[0] = 0;
      color.data[1] = 0;
      color.data[2] = 0;
      for (const id of cellIds) {
        if (id > 0) {
          const cellColor = this.props.cellColors.get(id);
          if (cellColor) {
            color.data.set(cellColor.slice(0, 3), Number(id) * 3);
          }
        }
      }
    }
    this.color = color;
  }
  onUpdateExpressionData() {
    var _a2;
    const { expressionData } = this.props;
    if ((_a2 = expressionData[0]) == null ? void 0 : _a2.length) {
      this.expression.data = new Uint8Array(this.expression.height * this.expression.width);
      this.expression.data.set(expressionData[0]);
    }
  }
  onUpdateMoleculesData() {
    const { molecules = {} } = this.props;
    const moleculesEntries = Object.entries(molecules).flatMap(([molecule, coords], index) => coords.map(([x, y]) => [x, y, index, molecule]));
    this.moleculesEntries = moleculesEntries;
  }
  onUpdateMoleculesLayer() {
    const { layers } = this.props;
    const layerDef = (layers || []).find((layer) => layer.type === "molecules");
    if (layerDef) {
      this.moleculesLayer = this.createMoleculesLayer(layerDef);
    } else {
      this.moleculesLayer = null;
    }
  }
  onUpdateNeighborhoodsData() {
    const { neighborhoods = {} } = this.props;
    const neighborhoodsEntries = Object.entries(neighborhoods);
    this.neighborhoodsEntries = neighborhoodsEntries;
  }
  onUpdateNeighborhoodsLayer() {
    const { layers } = this.props;
    const layerDef = (layers || []).find((layer) => layer.type === "neighborhoods");
    if (layerDef) {
      this.neighborhoodsLayer = this.createNeighborhoodsLayer(layerDef);
    } else {
      this.neighborhoodsLayer = null;
    }
  }
  onUpdateImages() {
    this.imageLayers = this.createImageLayers();
  }
  viewInfoDidUpdate() {
    const { getCellCoords = defaultGetCellCoords } = this.props;
    super.viewInfoDidUpdate(getCellCoords);
  }
  componentDidUpdate(prevProps) {
    this.viewInfoDidUpdate();
    const shallowDiff = (propName) => prevProps[propName] !== this.props[propName];
    if (["cells"].some(shallowDiff)) {
      this.onUpdateCellsData();
      this.forceUpdate();
    }
    if ([
      "layers",
      "cells",
      "cellFilter",
      "cellSelection",
      "cellColors",
      "geneExpressionColormapRange",
      "cellColorEncoding",
      "geneExpressionColormap"
    ].some(shallowDiff)) {
      this.onUpdateCellsLayer();
      this.forceUpdate();
    }
    if (["cellColors"].some(shallowDiff)) {
      this.onUpdateCellColors();
      this.forceUpdate();
    }
    if (["expressionData"].some(shallowDiff)) {
      this.onUpdateExpressionData();
      this.forceUpdate();
    }
    if (["molecules"].some(shallowDiff)) {
      this.onUpdateMoleculesData();
      this.forceUpdate();
    }
    if (["layers", "molecules"].some(shallowDiff)) {
      this.onUpdateMoleculesLayer();
      this.forceUpdate();
    }
    if (["neighborhoods"].some(shallowDiff)) {
      this.onUpdateNeighborhoodsData();
      this.forceUpdate();
    }
    if (["layers", "neighborhoods"].some(shallowDiff)) {
      this.onUpdateNeighborhoodsLayer();
      this.forceUpdate();
    }
    if ([
      "layers",
      "imageLayerLoaders",
      "cellColors",
      "cellHighlight",
      "geneExpressionColormapRange",
      "expressionData",
      "rasterLayersCallbacks",
      "geneExpressionColormap"
    ].some(shallowDiff)) {
      this.onUpdateImages();
      this.forceUpdate();
    }
  }
};
var SpatialWrapper = Object(react__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((props, deckRef) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Spatial, __spreadProps(__spreadValues({}, props), {
  deckRef
})));
var Spatial_default = SpatialWrapper;

// src/components/spatial/SpatialOptions.js








// src/components/shared-plot-options/CellColorEncodingOption.js



function CellColorEncodingOption(props) {
  const {
    observationsLabel,
    cellColorEncoding,
    setCellColorEncoding
  } = props;
  const classes = useStyles2();
  const observationsLabelNice = capitalize(observationsLabel);
  function handleColorEncodingChange(event) {
    setCellColorEncoding(event.target.value);
  }
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_50__["default"], null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.labelCell,
    htmlFor: "cell-color-encoding-select"
  }, observationsLabelNice, " Color Encoding"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.inputCell
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(OptionSelect, {
    className: classes.select,
    value: cellColorEncoding,
    onChange: handleColorEncodingChange,
    inputProps: {
      id: "cell-color-encoding-select"
    }
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
    value: "cellSetSelection"
  }, "Cell Sets"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
    value: "geneSelection"
  }, "Gene Expression"))));
}

// src/components/spatial/SpatialOptions.js
var useToggleStyles = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["makeStyles"])(() => Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["createStyles"])({
  cameraLabel: {
    padding: "0px 0px 0px 16px"
  },
  box: {
    padding: "0px"
  },
  button: {
    padding: "0px 0px 0px 8px"
  }
}));
var ToggleFixedAxisButton = ({
  setSpatialAxisFixed,
  spatialAxisFixed,
  use3d
}) => {
  const classes = useToggleStyles();
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_50__["default"], null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.cameraLabel
  }, "Fix Camera Axis"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.box
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Checkbox__WEBPACK_IMPORTED_MODULE_67__["default"], {
    onClick: () => setSpatialAxisFixed(!spatialAxisFixed),
    disabled: !use3d,
    checked: Boolean(spatialAxisFixed)
  })));
};
function SpatialOptions(props) {
  const {
    observationsLabel,
    cellColorEncoding,
    setCellColorEncoding,
    setSpatialAxisFixed,
    spatialAxisFixed,
    use3d,
    geneExpressionColormap,
    setGeneExpressionColormap,
    geneExpressionColormapRange,
    setGeneExpressionColormapRange,
    canShowExpressionOptions,
    canShowColorEncodingOption,
    canShow3DOptions
  } = props;
  function handleGeneExpressionColormapChange(event) {
    setGeneExpressionColormap(event.target.value);
  }
  function handleColormapRangeChange(event, value) {
    setGeneExpressionColormapRange(value);
  }
  const handleColormapRangeChangeDebounced = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])(lodash_debounce__WEBPACK_IMPORTED_MODULE_16___default()(handleColormapRangeChange, 5, { trailing: true }), [handleColormapRangeChange]);
  const classes = useStyles2();
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(OptionsContainer, null, canShowColorEncodingOption ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(CellColorEncodingOption, {
    observationsLabel,
    cellColorEncoding,
    setCellColorEncoding
  }) : null, canShow3DOptions ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ToggleFixedAxisButton, {
    setSpatialAxisFixed,
    spatialAxisFixed,
    use3d
  }) : null, canShowExpressionOptions ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_50__["default"], null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.labelCell,
    htmlFor: "gene-expression-colormap-select"
  }, "Gene Expression Colormap"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.inputCell
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(OptionSelect, {
    className: classes.select,
    value: geneExpressionColormap,
    onChange: handleGeneExpressionColormapChange,
    inputProps: {
      id: "gene-expression-colormap-select"
    }
  }, GLSL_COLORMAPS.map((cmap) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
    key: cmap,
    value: cmap
  }, cmap))))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_50__["default"], null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.labelCell
  }, "Gene Expression Colormap Range"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.inputCell
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_48__["default"], {
    classes: { root: classes.slider, valueLabel: classes.sliderValueLabel },
    value: geneExpressionColormapRange,
    onChange: handleColormapRangeChangeDebounced,
    "aria-labelledby": "gene-expression-colormap-range-slider",
    valueLabelDisplay: "auto",
    step: 5e-3,
    min: 0,
    max: 1
  })))) : null);
}

// src/components/spatial/SpatialTooltipSubscriber.js

function SpatialTooltipSubscriber(props) {
  const {
    parentUuid,
    cellHighlight,
    width,
    height,
    getCellInfo
  } = props;
  const sourceUuid = useComponentHover();
  const viewInfo = useComponentViewInfo(parentUuid);
  const [cellInfo, x, y] = cellHighlight && getCellInfo ? [
    getCellInfo(cellHighlight),
    ...viewInfo && viewInfo.project ? viewInfo.project(cellHighlight) : [null, null]
  ] : [null, null, null];
  return cellInfo ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Tooltip2D, {
    x,
    y,
    parentUuid,
    sourceUuid,
    parentWidth: width,
    parentHeight: height
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TooltipContent, {
    info: cellInfo
  })) : null;
}

// src/components/spatial/SpatialSubscriber.js
var SPATIAL_DATA_TYPES = [
  "cells",
  "molecules",
  "raster",
  "cell-sets",
  "expression-matrix"
];
function SpatialSubscriber(props) {
  const {
    uuid,
    coordinationScopes,
    removeGridComponent,
    observationsLabelOverride: observationsLabel = "cell",
    observationsPluralLabelOverride: observationsPluralLabel = `${observationsLabel}s`,
    subobservationsLabelOverride: subobservationsLabel = "molecule",
    subobservationsPluralLabelOverride: subobservationsPluralLabel = `${subobservationsLabel}s`,
    theme,
    disableTooltip = false,
    title: title17 = "Spatial",
    disable3d,
    globalDisable3d
  } = props;
  const loaders = useLoaders();
  const setComponentHover = useSetComponentHover();
  const setComponentViewInfo = useSetComponentViewInfo(uuid);
  const [{
    dataset,
    spatialZoom: zoom,
    spatialTargetX: targetX,
    spatialTargetY: targetY,
    spatialTargetZ: targetZ,
    spatialRotationX: rotationX,
    spatialRotationY: rotationY,
    spatialRotationZ: rotationZ,
    spatialRotationOrbit: rotationOrbit,
    spatialOrbitAxis: orbitAxis,
    spatialRasterLayers: rasterLayers,
    spatialCellsLayer: cellsLayer,
    spatialMoleculesLayer: moleculesLayer,
    spatialNeighborhoodsLayer: neighborhoodsLayer,
    cellFilter,
    cellHighlight,
    geneSelection,
    cellSetSelection,
    cellSetColor,
    cellColorEncoding,
    additionalCellSets,
    spatialAxisFixed,
    geneExpressionColormap,
    geneExpressionColormapRange
  }, {
    setSpatialZoom: setZoom,
    setSpatialTargetX: setTargetX,
    setSpatialTargetY: setTargetY,
    setSpatialTargetZ: setTargetZ,
    setSpatialRotationX: setRotationX,
    setSpatialRotationOrbit: setRotationOrbit,
    setSpatialOrbitAxis: setOrbitAxis,
    setSpatialRasterLayers: setRasterLayers,
    setSpatialCellsLayer: setCellsLayer,
    setSpatialMoleculesLayer: setMoleculesLayer,
    setSpatialNeighborhoodsLayer: setNeighborhoodsLayer,
    setCellFilter,
    setCellSetSelection,
    setCellHighlight,
    setCellSetColor,
    setCellColorEncoding,
    setAdditionalCellSets,
    setMoleculeHighlight,
    setSpatialAxisFixed,
    setGeneExpressionColormap,
    setGeneExpressionColormapRange
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.spatial, coordinationScopes);
  const [
    {
      rasterLayersCallbacks
    }
  ] = useAuxiliaryCoordination(COMPONENT_COORDINATION_TYPES.layerController, coordinationScopes);
  const use3d = rasterLayers == null ? void 0 : rasterLayers.some((l) => l.use3d);
  const [urls, addUrl, resetUrls] = useUrls();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(SPATIAL_DATA_TYPES);
  const [width, height, deckRef] = useDeckCanvasSize();
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    resetUrls();
    resetReadyItems();
  }, [loaders, dataset]);
  const [cells, cellsCount] = useCellsData(loaders, dataset, setItemIsReady, addUrl, false, { setSpatialCellsLayer: setCellsLayer }, { spatialCellsLayer: cellsLayer });
  const [molecules, moleculesCount, locationsCount] = useMoleculesData(loaders, dataset, setItemIsReady, addUrl, false, { setSpatialMoleculesLayer: setMoleculesLayer }, { spatialMoleculesLayer: moleculesLayer });
  const [neighborhoods] = useNeighborhoodsData(loaders, dataset, setItemIsReady, addUrl, false, { setSpatialNeighborhoodsLayer: setNeighborhoodsLayer }, { spatialNeighborhoodsLayer: neighborhoodsLayer });
  const [cellSets] = useCellSetsData(loaders, dataset, setItemIsReady, addUrl, false, { setCellSetSelection, setCellSetColor }, { cellSetSelection, cellSetColor });
  const [expressionData] = useGeneSelection(loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady);
  const [attrs] = useExpressionAttrs(loaders, dataset, setItemIsReady, addUrl, false);
  const [raster, imageLayerLoaders, imageLayerMeta] = useRasterData(loaders, dataset, setItemIsReady, addUrl, false, { setSpatialRasterLayers: setRasterLayers }, { spatialRasterLayers: rasterLayers });
  const layers = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => {
    const canPassInCellsLayer = !imageLayerMeta.some((l) => {
      var _a2;
      return (_a2 = l == null ? void 0 : l.metadata) == null ? void 0 : _a2.isBitmask;
    });
    return [
      ...moleculesLayer ? [__spreadProps(__spreadValues({}, moleculesLayer), { type: "molecules" })] : [],
      ...cellsLayer && canPassInCellsLayer ? [__spreadProps(__spreadValues({}, cellsLayer), { type: "cells" })] : [],
      ...neighborhoodsLayer ? [__spreadProps(__spreadValues({}, neighborhoodsLayer), { type: "neighborhoods" })] : [],
      ...rasterLayers ? rasterLayers.map((l) => __spreadProps(__spreadValues({}, l), { type: l.type && ["raster", "bitmask"].includes(l.type) ? l.type : "raster" })) : []
    ];
  }, [cellsLayer, moleculesLayer, neighborhoodsLayer, rasterLayers, imageLayerMeta]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (typeof targetX !== "number" || typeof targetY !== "number") {
      const {
        initialTargetX,
        initialTargetY,
        initialTargetZ,
        initialZoom
      } = getInitialSpatialTargets({
        width,
        height,
        cells,
        imageLayerLoaders,
        useRaster: Boolean(loaders[dataset].loaders.raster),
        use3d
      });
      setTargetX(initialTargetX);
      setTargetY(initialTargetY);
      setTargetZ(initialTargetZ);
      setZoom(initialZoom);
    }
  }, [imageLayerLoaders, cells, targetX, targetY, setTargetX, setTargetY, setZoom, use3d]);
  const mergedCellSets = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => mergeCellSets(cellSets, additionalCellSets), [cellSets, additionalCellSets]);
  const setCellSelectionProp = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])((v) => {
    setCellSelection(v, additionalCellSets, cellSetColor, setCellSetSelection, setAdditionalCellSets, setCellSetColor, setCellColorEncoding);
  }, [
    additionalCellSets,
    cellSetColor,
    setCellColorEncoding,
    setAdditionalCellSets,
    setCellSetColor,
    setCellSetSelection
  ]);
  const cellColors = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => getCellColors({
    cellColorEncoding,
    expressionData: expressionData && expressionData[0],
    geneSelection,
    cellSets: mergedCellSets,
    cellSetSelection,
    cellSetColor,
    expressionDataAttrs: attrs,
    theme
  }), [
    cellColorEncoding,
    geneSelection,
    mergedCellSets,
    theme,
    cellSetColor,
    cellSetSelection,
    expressionData,
    attrs
  ]);
  const shiftedExpressionDataForBitmask = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => {
    const hasBitmask = imageLayerMeta.some((l) => {
      var _a2;
      return (_a2 = l == null ? void 0 : l.metadata) == null ? void 0 : _a2.isBitmask;
    });
    if ((attrs == null ? void 0 : attrs.rows) && expressionData && hasBitmask) {
      const maxId = attrs.rows.reduce((max2, curr) => Math.max(max2, Number(curr)));
      const result = new Uint8Array(maxId + 1);
      for (let i = 0; i < attrs.rows.length; i++) {
        const id = attrs.rows[i];
        result.set(expressionData[0].slice(i, i + 1), Number(id));
      }
      return [result];
    }
    return [new Uint8Array()];
  }, [attrs, expressionData, imageLayerMeta]);
  const cellSelection = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => Array.from(cellColors.keys()), [cellColors]);
  const getCellInfo = (cellId) => {
    const cell = cells[cellId];
    if (cell) {
      return __spreadValues({
        [`${capitalize(observationsLabel)} ID`]: cellId
      }, cell.factors);
    }
    return null;
  };
  const setViewState = ({
    zoom: newZoom,
    target,
    rotationX: newRotationX,
    rotationOrbit: newRotationOrbit,
    orbitAxis: newOrbitAxis
  }) => {
    setZoom(newZoom);
    setTargetX(target[0]);
    setTargetY(target[1]);
    setTargetZ(target[2] || null);
    setRotationX(newRotationX);
    setRotationOrbit(newRotationOrbit);
    setOrbitAxis(newOrbitAxis || null);
  };
  const subtitle = makeSpatialSubtitle({
    observationsCount: cellsCount,
    observationsLabel,
    observationsPluralLabel,
    subobservationsCount: moleculesCount,
    subobservationsLabel,
    subobservationsPluralLabel,
    locationsCount
  });
  const getExpressionValue = useExpressionValueGetter({ attrs, expressionData });
  const hasExpressionData = loaders[dataset].loaders["expression-matrix"];
  const hasCellsData = loaders[dataset].loaders.cells || imageLayerMeta.some((l) => {
    var _a2;
    return (_a2 = l == null ? void 0 : l.metadata) == null ? void 0 : _a2.isBitmask;
  });
  const canLoad3DLayers = imageLayerLoaders.some((loader) => Boolean(Array.from({
    length: loader.data.length
  }).filter((_, res) => canLoadResolution(loader.data, res)).length));
  const canShow3DOptions = canLoad3DLayers && !((disable3d == null ? void 0 : disable3d.length) === imageLayerLoaders.length) && !globalDisable3d;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TitleInfo, {
    title: title17,
    info: subtitle,
    isSpatial: true,
    urls,
    theme,
    removeGridComponent,
    isReady,
    options: canShow3DOptions || hasExpressionData ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(SpatialOptions, {
      observationsLabel,
      cellColorEncoding,
      setCellColorEncoding,
      setSpatialAxisFixed,
      spatialAxisFixed,
      use3d,
      geneExpressionColormap,
      setGeneExpressionColormap,
      geneExpressionColormapRange,
      setGeneExpressionColormapRange,
      canShowExpressionOptions: hasExpressionData,
      canShowColorEncodingOption: hasCellsData && hasExpressionData,
      canShow3DOptions
    }) : null
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Spatial_default, {
    ref: deckRef,
    uuid,
    width,
    height,
    viewState: {
      zoom,
      target: [targetX, targetY, targetZ],
      rotationX,
      rotationY,
      rotationZ,
      rotationOrbit,
      orbitAxis
    },
    setViewState,
    layers,
    cells,
    cellFilter,
    cellSelection,
    cellHighlight,
    cellColors,
    molecules,
    neighborhoods,
    imageLayerLoaders,
    setCellFilter,
    setCellSelection: setCellSelectionProp,
    setCellHighlight,
    setMoleculeHighlight,
    setComponentHover: () => {
      setComponentHover(uuid);
    },
    updateViewInfo: setComponentViewInfo,
    rasterLayersCallbacks,
    spatialAxisFixed,
    geneExpressionColormap,
    geneExpressionColormapRange,
    expressionData: shiftedExpressionDataForBitmask,
    cellColorEncoding,
    getExpressionValue,
    theme
  }), !disableTooltip && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(SpatialTooltipSubscriber, {
    parentUuid: uuid,
    cellHighlight,
    width,
    height,
    getCellInfo
  }));
}

// src/components/scatterplot/ScatterplotSubscriber.js




// src/components/scatterplot/Scatterplot.js




// src/components/shared-spatial-scatterplot/force-collide-rects.js

function constant(v) {
  return () => v;
}
function jiggle(v) {
  return v + (Math.random() - 0.5) * 1e-6;
}
function forceCollideRects() {
  let nodes;
  let masses;
  let strength = 1;
  let iterations = 1;
  let sizes;
  let size = constant([0, 0]);
  function xCenter(d) {
    return d.x + d.vx + sizes[d.index][0] / 2;
  }
  function yCenter(d) {
    return d.y + d.vy + sizes[d.index][1] / 2;
  }
  function prepare(quad) {
    if (quad.data) {
      quad.size = sizes[quad.data.index];
    } else {
      quad.size = [0, 0];
      for (let i = 0; i < 4; i++) {
        if (quad[i] && quad[i].size) {
          quad.size[0] = Math.max(quad.size[0], quad[i].size[0]);
          quad.size[1] = Math.max(quad.size[1], quad[i].size[1]);
        }
      }
    }
  }
  function force() {
    let node;
    let nodeSize;
    let nodeMass;
    let xi;
    let yi;
    const tree = Object(d3_quadtree__WEBPACK_IMPORTED_MODULE_66__["quadtree"])(nodes, xCenter, yCenter).visitAfter(prepare);
    function apply(quad, x0, y0, x1, y1) {
      const { data } = quad;
      const xSize = (nodeSize[0] + quad.size[0]) / 2;
      const ySize = (nodeSize[1] + quad.size[1]) / 2;
      if (data && data.index > node.index) {
        let x = jiggle(xi - xCenter(data));
        let y = jiggle(yi - yCenter(data));
        const xd = Math.abs(x) - xSize;
        const yd = Math.abs(y) - ySize;
        if (xd < 0 && yd < 0) {
          const l = Math.sqrt(x * x + y * y);
          const m = masses[data.index] / (nodeMass + masses[data.index]);
          if (Math.abs(xd) < Math.abs(yd)) {
            node.vx -= (x *= xd / l * strength) * m;
            data.vx += x * (1 - m);
          } else {
            node.vy -= (y *= yd / l * strength) * m;
            data.vy += y * (1 - m);
          }
        }
        return x0 > xi + xSize || x1 < xi - xSize || y0 > yi + ySize || y1 < yi - ySize;
      }
      return false;
    }
    function iterate() {
      for (let j = 0; j < nodes.length; j++) {
        node = nodes[j];
        nodeSize = sizes[j];
        nodeMass = masses[j];
        xi = xCenter(node);
        yi = yCenter(node);
        tree.visit(apply);
      }
    }
    for (let i = 0; i < iterations; i++) {
      iterate();
    }
  }
  force.initialize = (v) => {
    nodes = v;
    sizes = nodes.map(size);
    masses = sizes.map((d) => d[0] + d[1]);
  };
  force.iterations = (...v) => {
    if (v.length) {
      iterations = +v[0];
      return force;
    }
    return iterations;
  };
  force.strength = (...v) => {
    if (v.length) {
      strength = +v[0];
      return force;
    }
    return strength;
  };
  force.size = (...v) => {
    if (v.length) {
      size = typeof v[0] === "function" ? v[0] : constant(v[0]);
      return force;
    }
    return size;
  };
  return force;
}

// src/components/scatterplot/Scatterplot.js
var CELLS_LAYER_ID2 = "scatterplot";
var LABEL_FONT_FAMILY = "-apple-system, 'Helvetica Neue', Arial, sans-serif";
var NUM_FORCE_SIMULATION_TICKS = 100;
var LABEL_UPDATE_ZOOM_DELTA = 0.25;
var makeDefaultGetCellPosition = (mapping) => (cellEntry) => {
  const { mappings } = cellEntry[1];
  if (!(mapping in mappings)) {
    const available = Object.keys(mappings).map((s) => `"${s}"`).join(", ");
    throw new Error(`Expected to find "${mapping}", but available mappings are: ${available}`);
  }
  const mappedCell = mappings[mapping];
  return [mappedCell[0], -mappedCell[1], 0];
};
var makeDefaultGetCellCoords = (mapping) => (cell) => cell.mappings[mapping];
var makeDefaultGetCellColors2 = (cellColors, theme) => (cellEntry) => {
  const [r, g, b, a] = cellColors && cellColors.get(cellEntry[0]) || getDefaultColor(theme);
  return [r, g, b, 255 * (a || 1)];
};
var Scatterplot = class extends AbstractSpatialOrScatterplot {
  constructor(props) {
    super(props);
    this.cellsEntries = [];
    this.cellsQuadTree = null;
    this.cellsLayer = null;
    this.cellSetsForceSimulation = forceCollideRects();
    this.cellSetsLabelPrevZoom = null;
    this.cellSetsLayers = [];
    this.onUpdateCellsData();
    this.onUpdateCellsLayer();
    this.onUpdateCellSetsLayers();
  }
  createCellsLayer() {
    const { cellsEntries } = this;
    const {
      theme,
      mapping,
      getCellPosition = makeDefaultGetCellPosition(mapping),
      cellRadius = 1,
      cellOpacity = 1,
      cellFilter,
      cellSelection,
      setCellHighlight,
      setComponentHover,
      getCellIsSelected,
      cellColors,
      getCellColor = makeDefaultGetCellColors2(cellColors, theme),
      getExpressionValue,
      onCellClick,
      geneExpressionColormap,
      geneExpressionColormapRange = [0, 1],
      cellColorEncoding
    } = this.props;
    const filteredCellsEntries = cellFilter ? cellsEntries.filter((cellEntry) => cellFilter.includes(cellEntry[0])) : cellsEntries;
    return new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["ScatterplotLayer"](__spreadProps(__spreadValues({
      id: CELLS_LAYER_ID2,
      backgroundColor: theme === "dark" ? [0, 0, 0] : [241, 241, 241],
      getCellIsSelected,
      opacity: cellOpacity,
      radiusScale: cellRadius,
      radiusMinPixels: 1,
      radiusMaxPixels: 30,
      radiusUnits: "pixels",
      lineWidthUnits: "pixels",
      getPosition: getCellPosition,
      getFillColor: getCellColor,
      getLineColor: getCellColor,
      getRadius: 1,
      getExpressionValue,
      getLineWidth: 0,
      extensions: [
        new ScaledExpressionExtension_default(),
        new SelectionExtension_default({ instanced: true })
      ],
      colorScaleLo: geneExpressionColormapRange[0],
      colorScaleHi: geneExpressionColormapRange[1],
      isExpressionMode: cellColorEncoding === "geneSelection",
      colormap: geneExpressionColormap,
      onClick: (info) => {
        if (onCellClick) {
          onCellClick(info);
        }
      },
      updateTriggers: {
        getExpressionValue,
        getFillColor: [cellColorEncoding, cellSelection, cellColors],
        getLineColor: [cellColorEncoding, cellSelection, cellColors],
        getCellIsSelected
      }
    }, cellLayerDefaultProps(filteredCellsEntries, void 0, setCellHighlight, setComponentHover)), {
      stroked: 0
    }));
  }
  createCellSetsLayers() {
    const {
      theme,
      cellSetPolygons,
      viewState,
      cellSetPolygonsVisible,
      cellSetLabelsVisible,
      cellSetLabelSize
    } = this.props;
    const result = [];
    if (cellSetPolygonsVisible) {
      result.push(new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["PolygonLayer"]({
        id: "cell-sets-polygon-layer",
        data: cellSetPolygons,
        stroked: true,
        filled: false,
        wireframe: true,
        lineWidthMaxPixels: 1,
        getPolygon: (d) => d.hull,
        getLineColor: (d) => d.color,
        getLineWidth: 1
      }));
    }
    if (cellSetLabelsVisible) {
      const { zoom } = viewState;
      const nodes = cellSetPolygons.map((p) => ({
        x: p.centroid[0],
        y: p.centroid[1],
        label: p.name
      }));
      const collisionForce = this.cellSetsForceSimulation.size((d) => [
        cellSetLabelSize * 1 / __pow(2, zoom) * 4 * d.label.length,
        cellSetLabelSize * 1 / __pow(2, zoom) * 1.5
      ]);
      Object(d3_force__WEBPACK_IMPORTED_MODULE_68__["forceSimulation"])().nodes(nodes).force("collision", collisionForce).tick(NUM_FORCE_SIMULATION_TICKS);
      result.push(new _deck_gl_layers__WEBPACK_IMPORTED_MODULE_29__["TextLayer"]({
        id: "cell-sets-text-layer",
        data: nodes,
        getPosition: (d) => [d.x, d.y],
        getText: (d) => d.label,
        getColor: theme === "dark" ? [255, 255, 255] : [0, 0, 0],
        getSize: cellSetLabelSize,
        getAngle: 0,
        getTextAnchor: "middle",
        getAlignmentBaseline: "center",
        fontFamily: LABEL_FONT_FAMILY,
        fontWeight: "normal"
      }));
    }
    return result;
  }
  createSelectionLayers() {
    const {
      viewState,
      mapping,
      getCellCoords = makeDefaultGetCellCoords(mapping),
      setCellSelection: setCellSelection2
    } = this.props;
    const { tool } = this.state;
    const { cellsQuadTree } = this;
    const flipYTooltip = true;
    return getSelectionLayers(tool, viewState.zoom, CELLS_LAYER_ID2, getCellCoords, setCellSelection2, cellsQuadTree, flipYTooltip);
  }
  getLayers() {
    const {
      cellsLayer,
      cellSetsLayers
    } = this;
    return [
      cellsLayer,
      ...cellSetsLayers,
      ...this.createSelectionLayers()
    ];
  }
  onUpdateCellsData() {
    const {
      cells = {},
      mapping,
      getCellCoords = makeDefaultGetCellCoords(mapping)
    } = this.props;
    const cellsEntries = Object.entries(cells);
    this.cellsEntries = cellsEntries;
    this.cellsQuadTree = createCellsQuadTree(cellsEntries, getCellCoords);
  }
  onUpdateCellsLayer() {
    this.cellsLayer = this.createCellsLayer();
  }
  onUpdateCellSetsLayers(onlyViewStateChange) {
    if (onlyViewStateChange) {
      const { viewState, cellSetLabelsVisible } = this.props;
      const { zoom } = viewState;
      const { cellSetsLabelPrevZoom } = this;
      if (cellSetLabelsVisible && (cellSetsLabelPrevZoom === null || Math.abs(cellSetsLabelPrevZoom - zoom) > LABEL_UPDATE_ZOOM_DELTA)) {
        this.cellSetsLayers = this.createCellSetsLayers();
        this.cellSetsLabelPrevZoom = zoom;
      }
    } else {
      this.cellSetsLayers = this.createCellSetsLayers();
    }
  }
  viewInfoDidUpdate() {
    const {
      mapping,
      getCellPosition = makeDefaultGetCellPosition(mapping)
    } = this.props;
    super.viewInfoDidUpdate((cell) => getCellPosition([null, cell]));
  }
  componentDidUpdate(prevProps) {
    this.viewInfoDidUpdate();
    const shallowDiff = (propName) => prevProps[propName] !== this.props[propName];
    if (["cells"].some(shallowDiff)) {
      this.onUpdateCellsData();
      this.forceUpdate();
    }
    if ([
      "cells",
      "cellFilter",
      "cellSelection",
      "cellColors",
      "cellRadius",
      "cellOpacity",
      "cellRadiusMode",
      "geneExpressionColormap",
      "geneExpressionColormapRange",
      "geneSelection",
      "cellColorEncoding"
    ].some(shallowDiff)) {
      this.onUpdateCellsLayer();
      this.forceUpdate();
    }
    if ([
      "cellSetPolygons",
      "cellSetPolygonsVisible",
      "cellSetLabelsVisible",
      "cellSetLabelSize"
    ].some(shallowDiff)) {
      this.onUpdateCellSetsLayers(false);
      this.forceUpdate();
    }
    if (shallowDiff("viewState")) {
      this.onUpdateCellSetsLayers(true);
      this.forceUpdate();
    }
  }
};
var ScatterplotWrapper = Object(react__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((props, deckRef) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Scatterplot, __spreadProps(__spreadValues({}, props), {
  deckRef
})));
var Scatterplot_default = ScatterplotWrapper;

// src/components/scatterplot/ScatterplotTooltipSubscriber.js

function ScatterplotTooltipSubscriber(props) {
  const {
    parentUuid,
    cellHighlight,
    width,
    height,
    getCellInfo
  } = props;
  const sourceUuid = useComponentHover();
  const viewInfo = useComponentViewInfo(parentUuid);
  const [cellInfo, x, y] = cellHighlight && getCellInfo ? [
    getCellInfo(cellHighlight),
    ...viewInfo && viewInfo.project ? viewInfo.project(cellHighlight) : [null, null]
  ] : [null, null, null];
  return cellInfo ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Tooltip2D, {
    x,
    y,
    parentUuid,
    sourceUuid,
    parentWidth: width,
    parentHeight: height
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TooltipContent, {
    info: cellInfo
  })) : null;
}

// src/components/scatterplot/ScatterplotOptions.js






function ScatterplotOptions(props) {
  const {
    observationsLabel,
    cellRadius,
    setCellRadius,
    cellRadiusMode,
    setCellRadiusMode,
    cellOpacity,
    setCellOpacity,
    cellOpacityMode,
    setCellOpacityMode,
    cellSetLabelsVisible,
    setCellSetLabelsVisible,
    cellSetLabelSize,
    setCellSetLabelSize,
    cellSetPolygonsVisible,
    setCellSetPolygonsVisible,
    cellColorEncoding,
    setCellColorEncoding,
    geneExpressionColormap,
    setGeneExpressionColormap,
    geneExpressionColormapRange,
    setGeneExpressionColormapRange
  } = props;
  const observationsLabelNice = capitalize(observationsLabel);
  const classes = useStyles2();
  function handleCellRadiusModeChange(event) {
    setCellRadiusMode(event.target.value);
  }
  function handleCellOpacityModeChange(event) {
    setCellOpacityMode(event.target.value);
  }
  function handleRadiusChange(event, value) {
    setCellRadius(value);
  }
  function handleOpacityChange(event, value) {
    setCellOpacity(value);
  }
  function handleLabelVisibilityChange(event) {
    setCellSetLabelsVisible(event.target.checked);
  }
  function handleLabelSizeChange(event, value) {
    setCellSetLabelSize(value);
  }
  function handlePolygonVisibilityChange(event) {
    setCellSetPolygonsVisible(event.target.checked);
  }
  function handleGeneExpressionColormapChange(event) {
    setGeneExpressionColormap(event.target.value);
  }
  function handleColormapRangeChange(event, value) {
    setGeneExpressionColormapRange(value);
  }
  const handleColormapRangeChangeDebounced = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])(lodash_debounce__WEBPACK_IMPORTED_MODULE_16___default()(handleColormapRangeChange, 5, { trailing: true }), [handleColormapRangeChange]);
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(OptionsContainer, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(CellColorEncodingOption, {
    observationsLabel,
    cellColorEncoding,
    setCellColorEncoding
  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_50__["default"], null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.labelCell
  }, observationsLabelNice, " Set Labels Visible"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.inputCell
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Checkbox__WEBPACK_IMPORTED_MODULE_67__["default"], {
    className: classes.checkbox,
    checked: cellSetLabelsVisible,
    onChange: handleLabelVisibilityChange,
    name: "scatterplot-option-cell-set-labels",
    color: "default"
  }))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_50__["default"], null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.labelCell
  }, observationsLabelNice, " Set Label Size"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.inputCell
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_48__["default"], {
    disabled: !cellSetLabelsVisible,
    classes: { root: classes.slider, valueLabel: classes.sliderValueLabel },
    value: cellSetLabelSize,
    onChange: handleLabelSizeChange,
    "aria-labelledby": "cell-set-label-size-slider",
    valueLabelDisplay: "auto",
    step: 1,
    min: 8,
    max: 36
  }))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_50__["default"], null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.labelCell
  }, observationsLabelNice, " Set Polygons Visible"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.inputCell
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Checkbox__WEBPACK_IMPORTED_MODULE_67__["default"], {
    className: classes.checkbox,
    checked: cellSetPolygonsVisible,
    onChange: handlePolygonVisibilityChange,
    name: "scatterplot-option-cell-set-polygons",
    color: "default"
  }))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_50__["default"], null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.labelCell,
    htmlFor: "cell-radius-mode-select"
  }, observationsLabelNice, " Radius Mode"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.inputCell
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(OptionSelect, {
    className: classes.select,
    value: cellRadiusMode,
    onChange: handleCellRadiusModeChange,
    inputProps: {
      id: "cell-radius-mode-select"
    }
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
    value: "auto"
  }, "Auto"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
    value: "manual"
  }, "Manual")))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_50__["default"], null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.labelCell
  }, observationsLabelNice, " Radius"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.inputCell
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_48__["default"], {
    disabled: cellRadiusMode !== "manual",
    classes: { root: classes.slider, valueLabel: classes.sliderValueLabel },
    value: cellRadius,
    onChange: handleRadiusChange,
    "aria-labelledby": "cell-radius-slider",
    valueLabelDisplay: "auto",
    step: 0.01,
    min: 0.01,
    max: 10
  }))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_50__["default"], null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.labelCell,
    htmlFor: "cell-opacity-mode-select"
  }, observationsLabelNice, " Opacity Mode"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.inputCell
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(OptionSelect, {
    className: classes.select,
    value: cellOpacityMode,
    onChange: handleCellOpacityModeChange,
    inputProps: {
      id: "cell-opacity-mode-select"
    }
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
    value: "auto"
  }, "Auto"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
    value: "manual"
  }, "Manual")))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_50__["default"], null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.labelCell
  }, observationsLabelNice, " Opacity"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.inputCell
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_48__["default"], {
    disabled: cellOpacityMode !== "manual",
    classes: { root: classes.slider, valueLabel: classes.sliderValueLabel },
    value: cellOpacity,
    onChange: handleOpacityChange,
    "aria-labelledby": "cell-opacity-slider",
    valueLabelDisplay: "auto",
    step: 0.05,
    min: 0,
    max: 1
  }))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_50__["default"], null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.labelCell,
    htmlFor: "gene-expression-colormap-select"
  }, "Gene Expression Colormap"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.inputCell
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(OptionSelect, {
    className: classes.select,
    value: geneExpressionColormap,
    onChange: handleGeneExpressionColormapChange,
    inputProps: {
      id: "gene-expression-colormap-select"
    }
  }, GLSL_COLORMAPS.map((cmap) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
    key: cmap,
    value: cmap
  }, cmap))))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_50__["default"], null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.labelCell
  }, "Gene Expression Colormap Range"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.inputCell
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_48__["default"], {
    classes: { root: classes.slider, valueLabel: classes.sliderValueLabel },
    value: geneExpressionColormapRange,
    onChange: handleColormapRangeChangeDebounced,
    "aria-labelledby": "gene-expression-colormap-range-slider",
    valueLabelDisplay: "auto",
    step: 5e-3,
    min: 0,
    max: 1
  }))));
}

// src/components/shared-spatial-scatterplot/dynamic-opacity.js


function getPointSizeDevicePixels(devicePixelRatio, zoom, xRange, yRange, width, height) {
  const pointSize = 1e-3;
  const pointScreenSizeMax = 10;
  const pointScreenSizeMin = 1 / devicePixelRatio;
  const scaleFactor = __pow(2, zoom);
  const xAxisRange = 2 / (xRange * scaleFactor / width);
  const yAxisRange = 2 / (yRange * scaleFactor / height);
  const diagonalScreenSize = Math.sqrt(__pow(width, 2) + __pow(height, 2));
  const diagonalAxisRange = Math.sqrt(__pow(xAxisRange, 2) + __pow(yAxisRange, 2));
  const diagonalFraction = pointSize / diagonalAxisRange;
  const deviceSize = diagonalFraction * diagonalScreenSize;
  const pointSizeDevicePixels = lodash_clamp__WEBPACK_IMPORTED_MODULE_46___default()(deviceSize, pointScreenSizeMin, pointScreenSizeMax);
  return pointSizeDevicePixels;
}
function getPointOpacity(zoom, xRange, yRange, width, height, numCells, avgFillDensity) {
  const N = numCells;
  const [minX, minY, maxX, maxY] = new deck_gl__WEBPACK_IMPORTED_MODULE_45__["OrthographicView"]({ zoom }).makeViewport({
    height,
    width,
    viewState: { zoom, target: [0, 0, 0] }
  }).getBounds();
  const X = maxY - minY;
  const Y = maxX - minX;
  const X0 = xRange;
  const Y0 = yRange;
  const W = width;
  const H = height;
  let rho = avgFillDensity;
  if (!rho) {
    rho = Math.min(1, 1 / __pow(10, Math.log10(N) - 3));
  }
  const alpha = rho * W * H / N * (Y0 / Y) * (X0 / X);
  const pointOpacity = lodash_clamp__WEBPACK_IMPORTED_MODULE_46___default()(alpha, 1.01 / 255, 1);
  return pointOpacity;
}

// src/components/scatterplot/ScatterplotSubscriber.js
var SCATTERPLOT_DATA_TYPES = ["cells", "expression-matrix", "cell-sets"];
function ScatterplotSubscriber(props) {
  const {
    uuid,
    coordinationScopes,
    removeGridComponent,
    theme,
    disableTooltip = false,
    observationsLabelOverride: observationsLabel = "cell",
    observationsPluralLabelOverride: observationsPluralLabel = `${observationsLabel}s`,
    title: titleOverride,
    averageFillDensity
  } = props;
  const loaders = useLoaders();
  const setComponentHover = useSetComponentHover();
  const setComponentViewInfo = useSetComponentViewInfo(uuid);
  const [{
    dataset,
    embeddingZoom: zoom,
    embeddingTargetX: targetX,
    embeddingTargetY: targetY,
    embeddingTargetZ: targetZ,
    embeddingType: mapping,
    cellFilter,
    cellHighlight,
    geneSelection,
    cellSetSelection,
    cellSetColor,
    cellColorEncoding,
    additionalCellSets,
    embeddingCellSetPolygonsVisible: cellSetPolygonsVisible,
    embeddingCellSetLabelsVisible: cellSetLabelsVisible,
    embeddingCellSetLabelSize: cellSetLabelSize,
    embeddingCellRadius: cellRadiusFixed,
    embeddingCellRadiusMode: cellRadiusMode,
    embeddingCellOpacity: cellOpacityFixed,
    embeddingCellOpacityMode: cellOpacityMode,
    geneExpressionColormap,
    geneExpressionColormapRange
  }, {
    setEmbeddingZoom: setZoom,
    setEmbeddingTargetX: setTargetX,
    setEmbeddingTargetY: setTargetY,
    setEmbeddingTargetZ: setTargetZ,
    setCellFilter,
    setCellSetSelection,
    setCellHighlight,
    setCellSetColor,
    setCellColorEncoding,
    setAdditionalCellSets,
    setEmbeddingCellSetPolygonsVisible: setCellSetPolygonsVisible,
    setEmbeddingCellSetLabelsVisible: setCellSetLabelsVisible,
    setEmbeddingCellSetLabelSize: setCellSetLabelSize,
    setEmbeddingCellRadius: setCellRadiusFixed,
    setEmbeddingCellRadiusMode: setCellRadiusMode,
    setEmbeddingCellOpacity: setCellOpacityFixed,
    setEmbeddingCellOpacityMode: setCellOpacityMode,
    setGeneExpressionColormap,
    setGeneExpressionColormapRange
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.scatterplot, coordinationScopes);
  const [urls, addUrl, resetUrls] = useUrls();
  const [width, height, deckRef] = useDeckCanvasSize();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(SCATTERPLOT_DATA_TYPES);
  const title17 = titleOverride || `Scatterplot (${mapping})`;
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    resetUrls();
    resetReadyItems();
  }, [loaders, dataset]);
  const [cells, cellsCount] = useCellsData(loaders, dataset, setItemIsReady, addUrl, true);
  const [cellSets] = useCellSetsData(loaders, dataset, setItemIsReady, addUrl, false, { setCellSetSelection, setCellSetColor }, { cellSetSelection, cellSetColor });
  const [expressionData] = useGeneSelection(loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady);
  const [attrs] = useExpressionAttrs(loaders, dataset, setItemIsReady, addUrl, false);
  const [dynamicCellRadius, setDynamicCellRadius] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(cellRadiusFixed);
  const [dynamicCellOpacity, setDynamicCellOpacity] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(cellOpacityFixed);
  const mergedCellSets = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => mergeCellSets(cellSets, additionalCellSets), [cellSets, additionalCellSets]);
  const setCellSelectionProp = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])((v) => {
    setCellSelection(v, additionalCellSets, cellSetColor, setCellSetSelection, setAdditionalCellSets, setCellSetColor, setCellColorEncoding);
  }, [
    additionalCellSets,
    cellSetColor,
    setCellColorEncoding,
    setAdditionalCellSets,
    setCellSetColor,
    setCellSetSelection
  ]);
  const cellColors = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => getCellColors({
    cellColorEncoding,
    expressionData: expressionData && expressionData[0],
    geneSelection,
    cellSets: mergedCellSets,
    cellSetSelection,
    cellSetColor,
    expressionDataAttrs: attrs,
    theme
  }), [
    cellColorEncoding,
    geneSelection,
    mergedCellSets,
    theme,
    cellSetSelection,
    cellSetColor,
    expressionData,
    attrs
  ]);
  const [cellSetPolygonCache, setCellSetPolygonCache] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  const cacheHas = (cache, key) => cache.findIndex((el) => lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(el[0], key)) !== -1;
  const cacheGet = (cache, key) => {
    var _a2;
    return (_a2 = cache.find((el) => lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(el[0], key))) == null ? void 0 : _a2[1];
  };
  const cellSetPolygons = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => {
    var _a2;
    if ((cellSetLabelsVisible || cellSetPolygonsVisible) && !cacheHas(cellSetPolygonCache, cellSetSelection) && ((_a2 = mergedCellSets == null ? void 0 : mergedCellSets.tree) == null ? void 0 : _a2.length) && Object.values(cells).length && (cellSetColor == null ? void 0 : cellSetColor.length)) {
      const newCellSetPolygons = getCellSetPolygons({
        cells,
        mapping,
        cellSets: mergedCellSets,
        cellSetSelection,
        cellSetColor,
        theme
      });
      setCellSetPolygonCache((cache) => [...cache, [cellSetSelection, newCellSetPolygons]]);
      return newCellSetPolygons;
    }
    return cacheGet(cellSetPolygonCache, cellSetSelection) || [];
  }, [
    cellSetPolygonsVisible,
    cellSetPolygonCache,
    cellSetLabelsVisible,
    theme,
    cells,
    mapping,
    mergedCellSets,
    cellSetSelection,
    cellSetColor
  ]);
  const cellSelection = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => Array.from(cellColors.keys()), [cellColors]);
  const [xRange, yRange, xExtent, yExtent, numCells] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => {
    const cellValues = cells && Object.values(cells);
    if (cellValues == null ? void 0 : cellValues.length) {
      const cellCoordinates = Object.values(cells).map((c) => c.mappings[mapping]);
      const xE = Object(d3_array__WEBPACK_IMPORTED_MODULE_47__["extent"])(cellCoordinates, (c) => c[0]);
      const yE = Object(d3_array__WEBPACK_IMPORTED_MODULE_47__["extent"])(cellCoordinates, (c) => c[1]);
      const xR = xE[1] - xE[0];
      const yR = yE[1] - yE[0];
      return [xR, yR, xE, yE, cellValues.length];
    }
    return [null, null, null, null, null];
  }, [cells, mapping]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (xRange && yRange) {
      const pointSizeDevicePixels = getPointSizeDevicePixels(window.devicePixelRatio, zoom, xRange, yRange, width, height);
      setDynamicCellRadius(pointSizeDevicePixels);
      const nextCellOpacityScale = getPointOpacity(zoom, xRange, yRange, width, height, numCells, averageFillDensity);
      setDynamicCellOpacity(nextCellOpacityScale);
      if (typeof targetX !== "number" || typeof targetY !== "number") {
        const newTargetX = xExtent[0] + xRange / 2;
        const newTargetY = yExtent[0] + yRange / 2;
        const newZoom = Math.log2(Math.min(width / xRange, height / yRange));
        setTargetX(newTargetX);
        setTargetY(-newTargetY);
        setZoom(newZoom);
      }
    }
  }, [
    xRange,
    yRange,
    xExtent,
    yExtent,
    numCells,
    cells,
    mapping,
    width,
    height,
    zoom,
    averageFillDensity
  ]);
  const getCellInfo = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])((cellId) => {
    const cellInfo = cells[cellId];
    return __spreadValues({
      [`${capitalize(observationsLabel)} ID`]: cellId
    }, cellInfo ? cellInfo.factors : {});
  }, [cells, observationsLabel]);
  const cellSelectionSet = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => new Set(cellSelection), [cellSelection]);
  const getCellIsSelected = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])((cellEntry) => (cellSelectionSet || new Set([])).has(cellEntry[0]) ? 1 : 0, [cellSelectionSet]);
  const cellRadius = cellRadiusMode === "manual" ? cellRadiusFixed : dynamicCellRadius;
  const cellOpacity = cellOpacityMode === "manual" ? cellOpacityFixed : dynamicCellOpacity;
  const getExpressionValue = useExpressionValueGetter({ attrs, expressionData });
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TitleInfo, {
    title: title17,
    info: `${cellsCount} ${pluralize(observationsLabel, observationsPluralLabel, cellsCount)}`,
    removeGridComponent,
    urls,
    theme,
    isReady,
    options: /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ScatterplotOptions, {
      observationsLabel,
      cellRadius: cellRadiusFixed,
      setCellRadius: setCellRadiusFixed,
      cellRadiusMode,
      setCellRadiusMode,
      cellOpacity: cellOpacityFixed,
      setCellOpacity: setCellOpacityFixed,
      cellOpacityMode,
      setCellOpacityMode,
      cellSetLabelsVisible,
      setCellSetLabelsVisible,
      cellSetLabelSize,
      setCellSetLabelSize,
      cellSetPolygonsVisible,
      setCellSetPolygonsVisible,
      cellColorEncoding,
      setCellColorEncoding,
      geneExpressionColormap,
      setGeneExpressionColormap,
      geneExpressionColormapRange,
      setGeneExpressionColormapRange
    })
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Scatterplot_default, {
    ref: deckRef,
    uuid,
    theme,
    viewState: { zoom, target: [targetX, targetY, targetZ] },
    setViewState: ({ zoom: newZoom, target }) => {
      setZoom(newZoom);
      setTargetX(target[0]);
      setTargetY(target[1]);
      setTargetZ(target[2] || 0);
    },
    cells,
    mapping,
    cellFilter,
    cellSelection,
    cellHighlight,
    cellColors,
    cellSetPolygons,
    cellSetLabelSize,
    cellSetLabelsVisible,
    cellSetPolygonsVisible,
    setCellFilter,
    setCellSelection: setCellSelectionProp,
    setCellHighlight,
    cellRadius,
    cellOpacity,
    cellColorEncoding,
    geneExpressionColormap,
    geneExpressionColormapRange,
    setComponentHover: () => {
      setComponentHover(uuid);
    },
    updateViewInfo: setComponentViewInfo,
    getExpressionValue,
    getCellIsSelected
  }), !disableTooltip && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ScatterplotTooltipSubscriber, {
    parentUuid: uuid,
    cellHighlight,
    width,
    height,
    getCellInfo
  }));
}

// src/app/VitessceGrid.js


// src/app/vitessce-grid-layout/VitessceGridLayout.js




// src/app/vitessce-grid-layout/layout-utils.js

var COMPONENT_ID_PREFIX = "i";
function sum(a) {
  return a.reduce((x, y) => x + y, 0);
}
function makeGridLayout(colXs, colLayout) {
  const colWs = [];
  for (let i = 0; i < colXs.length; i++) {
    colWs.push(colXs[i + 1] - colXs[i]);
  }
  return Object.entries(colLayout).map(([id, spec]) => ({
    i: id,
    y: spec.y,
    h: spec.h || 1,
    x: colXs[spec.x],
    w: sum(colWs.slice(spec.x, spec.x + (spec.w || 1)))
  }));
}
function getMaxRows(layouts) {
  return Math.max(...Object.values(layouts).map((layout) => Math.max(...layout.map((xywh) => xywh.y + xywh.h))));
}
function resolveLayout(layout) {
  const cols = {};
  const layouts = {};
  const breakpoints = {};
  const components = {};
  const positions = {};
  ("components" in layout ? layout.components : layout).forEach((def, i) => {
    const id = `${COMPONENT_ID_PREFIX}${i}`;
    components[id] = {
      component: def.component,
      props: def.props || {},
      coordinationScopes: def.coordinationScopes || {}
    };
    positions[id] = {
      id,
      x: def.x,
      y: def.y,
      w: def.w,
      h: def.h
    };
  });
  if ("components" in layout) {
    Object.entries(layout.columns).forEach(([width, columnXs]) => {
      cols[width] = columnXs[columnXs.length - 1];
      layouts[width] = makeGridLayout(columnXs, positions);
      breakpoints[width] = width;
    });
  } else {
    const id = "ID";
    const columnCount = 12;
    cols[id] = columnCount;
    layouts[id] = makeGridLayout(lodash_range__WEBPACK_IMPORTED_MODULE_40___default()(columnCount + 1), positions);
    breakpoints[id] = 1e3;
  }
  return {
    cols,
    layouts,
    breakpoints,
    components
  };
}

// src/app/vitessce-grid-layout/VitessceGridLayout.js
var ResponsiveGridLayout = Object(react_grid_layout__WEBPACK_IMPORTED_MODULE_69__["WidthProvider"])(react_grid_layout__WEBPACK_IMPORTED_MODULE_69__["Responsive"]);
var ResponsiveHeightGridLayout = class extends ResponsiveGridLayout {
  componentDidUpdate(prevProps) {
    if (this.props.height !== prevProps.height) {
      this.onWindowResize();
    }
  }
};
function VitessceGridLayout(props) {
  const {
    layout,
    getComponent: getComponent2,
    padding: padding2,
    margin: margin2,
    draggableHandle,
    reactGridLayoutProps,
    rowHeight,
    theme,
    height,
    onRemoveComponent,
    onLayoutChange: onLayoutChangeProp
  } = props;
  const {
    cols: gridCols,
    layouts: gridLayouts,
    breakpoints: gridBreakpoints,
    components: gridComponents
  } = resolveLayout(layout);
  const maxRows = getMaxRows(gridLayouts);
  const style = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("style", null, `
        ${draggableHandle} {
          cursor: grab;
        }
        ${draggableHandle}:active {
          cursor: grabbing;
        }
     `);
  const onLayoutChange = (newLayout) => {
    if (newLayout.length === Object.entries(gridComponents).length) {
      const newComponentProps = [];
      newLayout.forEach((nextC) => {
        const id = nextC.i;
        const prevC = gridComponents[id];
        if (prevC) {
          const i = parseInt(id.substring(id.indexOf(COMPONENT_ID_PREFIX) + 1), 10);
          const nextProps = {
            x: nextC.x,
            y: nextC.y,
            w: nextC.w,
            h: nextC.h
          };
          const prevProps = {
            x: prevC.x,
            y: prevC.y,
            w: prevC.w,
            h: prevC.h
          };
          if (!lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(nextProps, prevProps)) {
            newComponentProps.push([i, nextProps]);
          }
        }
      });
      if (newComponentProps.length > 0) {
        onLayoutChangeProp(newComponentProps);
      }
    }
  };
  const layoutChildren = Object.entries(gridComponents).map(([k, v], i) => {
    const Component2 = getComponent2(v.component);
    const removeGridComponent = () => {
      onRemoveComponent(i);
    };
    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      key: k
    }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component2, __spreadProps(__spreadValues({}, v.props), {
      uuid: i,
      coordinationScopes: v.coordinationScopes,
      theme,
      removeGridComponent
    })));
  });
  return gridLayouts && gridComponents && gridBreakpoints && gridCols && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, style, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ResponsiveHeightGridLayout, __spreadValues({
    className: "layout",
    cols: gridCols,
    layouts: gridLayouts,
    breakpoints: gridBreakpoints,
    height,
    rowHeight: rowHeight || (window.innerHeight - 2 * padding2 - (maxRows - 1) * margin2) / maxRows,
    containerPadding: [padding2, padding2],
    margin: [margin2, margin2],
    draggableHandle,
    onLayoutChange
  }, reactGridLayoutProps), layoutChildren));
}
VitessceGridLayout.defaultProps = {
  padding: 10,
  margin: 10
};

// src/app/vitessce-grid-utils.js


// src/loaders/JsonLoader.js


// src/loaders/AbstractLoader.js

var AbstractLoader = class {
  constructor({
    type: type17,
    url,
    requestInit,
    options
  }) {
    this.type = type17;
    this.url = url;
    this.requestInit = requestInit;
    this.options = options;
    this.subscriptions = {};
  }
  load() {
    throw new Error("The load() method has not been implemented.");
  }
  subscribe(subscriber) {
    const token = uuid_v4__WEBPACK_IMPORTED_MODULE_37___default()();
    this.subscriptions[token] = subscriber;
    return token;
  }
  unsubscribe(token) {
    delete this.subscriptions[token];
  }
  publish(data) {
    Object.values(this.subscriptions).forEach((subscriber) => {
      subscriber(data);
    });
  }
};

// src/loaders/AbstractTwoStepLoader.js
var AbstractTwoStepLoader = class extends AbstractLoader {
  constructor(dataSource, params) {
    super(params);
    this.dataSource = dataSource;
  }
};

// src/loaders/LoaderResult.js
var LoaderResult = class {
  constructor(data, url, coordinationValues = null) {
    this.data = data;
    this.url = url;
    this.coordinationValues = coordinationValues;
  }
};

// src/schemas/cells.schema.json
var $schema3 = "http://json-schema.org/draft-07/schema#";
var $id3 = "https://github.com/vitessce/vitessce/#cells";
var title3 = "Vitessce cell data";
var type3 = "object";
var definitions3 = {
  coord: {
    type: "array",
    minItems: 2,
    maxItems: 2,
    items: { type: "number" }
  },
  positiveFloatValues: {
    type: "object",
    patternProperties: {
      ".": {
        type: "number",
        minimum: 0
      }
    }
  },
  stringValues: {
    type: "object",
    patternProperties: {
      ".": {
        type: "string"
      }
    }
  }
};
var patternProperties = {
  ".": {
    additionalProperties: false,
    required: [],
    properties: {
      mappings: {
        type: "object",
        patternProperties: {
          ".": { $ref: "#/definitions/coord" }
        }
      },
      xy: { $ref: "#/definitions/coord" },
      genes: { $ref: "#/definitions/positiveFloatValues" },
      factors: { $ref: "#/definitions/stringValues" },
      poly: {
        type: "array",
        items: { $ref: "#/definitions/coord" }
      }
    }
  }
};
var cells_schema_default = {
  $schema: $schema3,
  $id: $id3,
  title: title3,
  type: type3,
  definitions: definitions3,
  patternProperties
};

// src/schemas/molecules.schema.json
var $schema4 = "http://json-schema.org/draft-07/schema#";
var $id4 = "https://github.com/vitessce/vitessce/#molecules";
var title4 = "Vitessce molecule data";
var type4 = "object";
var definitions4 = {
  coord: {
    type: "array",
    maxItems: 2,
    minItems: 2,
    items: { type: "number" }
  }
};
var patternProperties2 = {
  ".": {
    type: "array",
    items: { $ref: "#/definitions/coord" }
  }
};
var molecules_schema_default = {
  $schema: $schema4,
  $id: $id4,
  title: title4,
  type: type4,
  definitions: definitions4,
  patternProperties: patternProperties2
};

// src/schemas/neighborhoods.schema.json
var $schema5 = "http://json-schema.org/draft-07/schema#";
var $id5 = "https://github.com/vitessce/vitessce/#neighborhoods";
var title5 = "Vitessce neighborhood data";
var type5 = "object";
var definitions5 = {
  coord: {
    type: "array",
    maxItems: 2,
    minItems: 2,
    items: { type: "number" }
  }
};
var patternProperties3 = {
  ".": {
    additionalProperties: false,
    required: ["poly"],
    properties: {
      poly: {
        type: "array",
        maxItems: 3,
        minItems: 3,
        items: { $ref: "#/definitions/coord" }
      }
    }
  }
};
var neighborhoods_schema_default = {
  $schema: $schema5,
  $id: $id5,
  title: title5,
  type: type5,
  definitions: definitions5,
  patternProperties: patternProperties3
};

// src/schemas/raster.schema.json
var $schema6 = "http://json-schema.org/draft-07/schema#";
var $id6 = "https://github.com/vitessce/vitessce/#raster";
var title6 = "Vitessce image data";
var type6 = "object";
var definitions6 = {
  transform: {
    type: "object",
    additionalProperties: false,
    oneOf: [{ required: ["scale", "translate"] }, { required: ["matrix"] }],
    properties: {
      scale: { type: "number" },
      translate: {
        type: "object",
        additionalProperties: false,
        required: ["y", "x"],
        properties: {
          y: { type: "number" },
          x: { type: "number" }
        }
      },
      matrix: {
        type: "array",
        items: { type: "number" },
        minItems: 16,
        maxItems: 16
      }
    }
  },
  dimensions: {
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["field", "type", "values"],
      properties: {
        field: { type: "string" },
        type: {
          type: "string",
          enum: ["quantitative", "nominal", "ordinal", "temporal"]
        },
        values: {
          type: ["array", "null"],
          items: { type: "string" }
        }
      }
    }
  },
  metadata: {
    type: "object",
    additionalProperties: false,
    anyOf: [{ required: ["dimensions", "isPyramid"] }, { required: ["transform"] }, { required: ["omeTiffOffsetsUrl"] }, { required: ["isBitmask"] }],
    properties: {
      dimensions: { $ref: "#/definitions/dimensions" },
      isPyramid: { type: "boolean" },
      transform: { $ref: "#/definitions/transform" },
      isBitmask: { type: "boolean" },
      omeTiffOffsetsUrl: { type: "string", format: "uri" }
    }
  },
  requestInit: {
    type: "object",
    additionalProperties: false,
    required: [],
    properties: {
      method: {
        type: "string"
      },
      headers: {
        type: "object"
      },
      body: {
        type: "string"
      },
      mode: {
        type: "string"
      },
      credentials: {
        type: "string"
      },
      cache: {
        type: "string"
      },
      redirect: {
        type: "string"
      },
      referrer: {
        type: "string"
      },
      integrity: {
        type: "string"
      }
    }
  },
  image: {
    type: "object",
    additionalProperties: false,
    required: ["name", "url", "type"],
    properties: {
      name: { type: "string" },
      url: { type: "string", format: "uri" },
      type: { type: "string" },
      metadata: { $ref: "#/definitions/metadata" },
      requestInit: { $ref: "#/definitions/requestInit" }
    }
  }
};
var additionalProperties = false;
var required = ["schemaVersion", "images"];
var properties = {
  schemaVersion: { type: "string" },
  usePhysicalSizeScaling: { type: "boolean", description: "Default is false: passing true in will infer scaling from the reported physcial size" },
  renderLayers: { type: "array", items: { type: "string" } },
  images: {
    type: "array",
    items: { $ref: "#/definitions/image" }
  }
};
var raster_schema_default = {
  $schema: $schema6,
  $id: $id6,
  title: title6,
  type: type6,
  definitions: definitions6,
  additionalProperties,
  required,
  properties
};

// src/loaders/JsonLoader.js
var typeToSchema = {
  cells: cells_schema_default,
  molecules: molecules_schema_default,
  neighborhoods: neighborhoods_schema_default,
  raster: raster_schema_default,
  "cell-sets": cell_sets_schema_default
};
var JsonLoader = class extends AbstractTwoStepLoader {
  constructor(dataSource, params) {
    super(dataSource, params);
    const { type: type17 } = params;
    this.schema = typeToSchema[type17];
  }
  load() {
    const {
      url,
      type: type17,
      fileType
    } = this;
    if (this.data) {
      return this.data;
    }
    this.data = this.dataSource.data.then((data) => {
      if (data instanceof AbstractLoaderError) {
        return Promise.reject(data);
      }
      const [valid, reason] = this.validate(data);
      if (valid) {
        return Promise.resolve(new LoaderResult(data, url));
      }
      return Promise.reject(new LoaderValidationError(type17, fileType, url, reason));
    });
    return this.data;
  }
  validate(data) {
    const { schema, type: type17 } = this;
    if (!schema) {
      throw Error(`No schema for ${type17}`);
    }
    const validate = new ajv__WEBPACK_IMPORTED_MODULE_70___default.a().compile(schema);
    const valid = validate(data);
    let failureReason;
    if (!valid) {
      failureReason = validate.errors;
    }
    return [valid, failureReason];
  }
};

// src/loaders/MatrixZarrLoader.js

var MatrixZarrLoader = class extends AbstractTwoStepLoader {
  loadAttrs() {
    if (this.attrs) {
      return this.attrs;
    }
    this.attrs = this.dataSource.getJson(".zattrs");
    return this.attrs;
  }
  loadArr() {
    const { store } = this.dataSource;
    if (this.arr) {
      return this.arr;
    }
    this.arr = Object(zarr__WEBPACK_IMPORTED_MODULE_36__["openArray"])({ store, path: "/", mode: "r" }).then((z) => new Promise((resolve) => {
      z.getRaw([null, null]).then(resolve);
    }));
    return this.arr;
  }
  load() {
    return Promise.all([this.loadAttrs(), this.loadArr()]).then((data) => Promise.resolve(new LoaderResult(data, null)));
  }
};

// src/schemas/genes.schema.json
var $schema7 = "http://json-schema.org/draft-07/schema#";
var $id7 = "https://github.com/vitessce/vitessce/#genes";
var title7 = "Vitessce gene data";
var type7 = "object";
var definitions7 = {
  positiveFloatValues: {
    type: "object",
    patternProperties: {
      ".": {
        type: "number",
        minimum: 0
      }
    }
  }
};
var patternProperties4 = {
  ".": {
    additionalProperties: false,
    required: ["max", "cells"],
    properties: {
      max: { type: "number" },
      cells: { $ref: "#/definitions/positiveFloatValues" }
    }
  }
};
var genes_schema_default = {
  $schema: $schema7,
  $id: $id7,
  title: title7,
  type: type7,
  definitions: definitions7,
  patternProperties: patternProperties4
};

// src/loaders/GenesJsonAsMatrixZarrLoader.js
var GenesJsonAsMatrixZarrLoader = class extends JsonLoader {
  constructor(dataSource, params) {
    super(dataSource, params);
    this.schema = genes_schema_default;
  }
  load() {
    var __super = (key) => super[key];
    return __async(this, null, function* () {
      const payload = yield __super("load").call(this).catch((reason) => Promise.resolve(reason));
      if (payload instanceof AbstractLoaderError) {
        return Promise.reject(payload);
      }
      const { data, url } = payload;
      const cols = Object.keys(data);
      const rows = cols.length > 0 ? Object.keys(data[cols[0]].cells) : [];
      const attrs = { rows, cols };
      const normalizedFlatMatrix = rows.flatMap((cellId) => cols.map((geneId) => data[geneId].cells[cellId] / data[geneId].max * 255));
      const arr = { data: Uint8Array.from(normalizedFlatMatrix) };
      return Promise.resolve(new LoaderResult([attrs, arr], url));
    });
  }
};

// src/loaders/ClustersJsonAsMatrixZarrLoader.js



// src/schemas/clusters.schema.json
var $schema8 = "http://json-schema.org/draft-07/schema#";
var $id8 = "https://github.com/vitessce/vitessce/#clusters";
var title8 = "Vitessce cluster data";
var type8 = "object";
var definitions8 = {
  stringArray: {
    type: "array",
    items: { type: "string" }
  },
  matrix: {
    type: "array",
    items: {
      type: "array",
      items: {
        type: "number",
        minimum: 0,
        maximum: 1
      }
    }
  }
};
var additionalProperties2 = false;
var required2 = ["rows", "cols", "matrix"];
var properties2 = {
  rows: { $ref: "#/definitions/stringArray" },
  cols: { $ref: "#/definitions/stringArray" },
  matrix: { $ref: "#/definitions/matrix" }
};
var clusters_schema_default = {
  $schema: $schema8,
  $id: $id8,
  title: title8,
  type: type8,
  definitions: definitions8,
  additionalProperties: additionalProperties2,
  required: required2,
  properties: properties2
};

// src/loaders/ClustersJsonAsMatrixZarrLoader.js
var ClustersJsonAsMatrixZarrLoader = class extends JsonLoader {
  constructor(dataSource, params) {
    super(dataSource, params);
    this.schema = clusters_schema_default;
  }
  load() {
    var __super = (key) => super[key];
    return __async(this, null, function* () {
      const payload = yield __super("load").call(this).catch((reason) => Promise.resolve(reason));
      if (payload instanceof AbstractLoaderError) {
        return Promise.reject(payload);
      }
      const { data, url } = payload;
      const { rows, cols, matrix } = data;
      const attrs = {
        rows: cols,
        cols: rows
      };
      const shape = [attrs.rows.length, attrs.cols.length];
      const normalizedMatrix = matrix.map((col) => {
        const [min, max2] = Object(d3_array__WEBPACK_IMPORTED_MODULE_47__["extent"])(col);
        const normalize2 = (d) => Math.floor((d - min) / (max2 - min) * 255);
        return col.map(normalize2);
      });
      const tNormalizedMatrix = lodash_range__WEBPACK_IMPORTED_MODULE_40___default()(shape[0]).map((i) => lodash_range__WEBPACK_IMPORTED_MODULE_40___default()(shape[1]).map((j) => normalizedMatrix[j][i]));
      const normalizedFlatMatrix = tNormalizedMatrix.flat();
      const arr = { data: Uint8Array.from(normalizedFlatMatrix) };
      return Promise.resolve(new LoaderResult([attrs, arr], url));
    });
  }
};

// src/loaders/RasterJsonLoader.js

function initLoader(imageData) {
  return __async(this, null, function* () {
    const {
      type: type17,
      url,
      metadata,
      requestInit
    } = imageData;
    switch (type17) {
      case "zarr": {
        const {
          dimensions,
          isPyramid,
          transform
        } = metadata || {};
        const labels = dimensions.map((d) => d.field);
        let source;
        if (isPyramid) {
          const metadataUrl = `${url}${url.slice(-1) === "/" ? "" : "/"}.zmetadata`;
          const response = yield fetch(metadataUrl);
          const { metadata: zarrMetadata } = yield response.json();
          const paths = Object.keys(zarrMetadata).filter((metaKey) => metaKey.includes(".zarray")).map((arrMetaKeys) => arrMetaKeys.slice(0, -7));
          const data = yield Promise.all(paths.map((path) => Object(zarr__WEBPACK_IMPORTED_MODULE_36__["openArray"])({ store: url, path })));
          const [yChunk, xChunk] = data[0].chunks.slice(-2);
          const size = Math.min(yChunk, xChunk);
          const tileSize = __pow(2, Math.floor(Math.log2(size)));
          source = data.map((d) => new ZarrPixelSource(d, labels, tileSize));
        } else {
          const data = yield Object(zarr__WEBPACK_IMPORTED_MODULE_36__["openArray"])({ store: url });
          source = new ZarrPixelSource(data, labels);
        }
        return { data: source, metadata: { dimensions, transform }, channels: (dimensions.find((d) => d.field === "channel") || dimensions[0]).values };
      }
      case "ome-tiff": {
        let loader;
        if (metadata && "omeTiffOffsetsUrl" in metadata) {
          const { omeTiffOffsetsUrl } = metadata;
          const res = yield fetch(omeTiffOffsetsUrl, requestInit || {});
          if (res.ok) {
            const offsets = yield res.json();
            loader = yield loadOmeTiff(url, {
              offsets,
              headers: requestInit == null ? void 0 : requestInit.headers
            });
          } else {
            throw new Error("Offsets not found but provided.");
          }
        } else {
          loader = yield loadOmeTiff(url, { headers: requestInit == null ? void 0 : requestInit.headers });
        }
        const { Pixels: { Channels } } = loader.metadata;
        const channels2 = Array.isArray(Channels) ? Channels.map((channel, i) => channel.Name || `Channel ${i}`) : [Channels.Name || `Channel ${0}`];
        return __spreadProps(__spreadValues({}, loader), { channels: channels2 });
      }
      default: {
        throw Error(`Image type (${type17}) is not supported`);
      }
    }
  });
}
var RasterLoader = class extends JsonLoader {
  constructor(dataSource, params) {
    const { url, options } = params;
    if (!url && options) {
      dataSource.url = URL.createObjectURL(new Blob([JSON.stringify(options)]));
    }
    super(dataSource, params);
    this.schema = raster_schema_default;
  }
  load() {
    var __super = (key) => super[key];
    return __async(this, null, function* () {
      const payload = yield __super("load").call(this).catch((reason) => Promise.resolve(reason));
      if (payload instanceof AbstractLoaderError) {
        return Promise.reject(payload);
      }
      const { data: raster } = payload;
      const { images, renderLayers, usePhysicalSizeScaling = false } = raster;
      const urls = images.filter((image) => !image.url.includes("zarr")).map((image) => [image.url, image.name]);
      const imagesWithLoaderCreators = images.map((image) => __spreadProps(__spreadValues({}, image), {
        loaderCreator: () => __async(this, null, function* () {
          return initLoader(image);
        })
      }));
      if (!this.autoImageCache) {
        this.autoImageCache = initializeRasterLayersAndChannels(imagesWithLoaderCreators, renderLayers, usePhysicalSizeScaling);
      }
      return this.autoImageCache.then((autoImages) => {
        const [autoImageLayers, imageLayerLoaders, imageLayerMeta] = autoImages;
        const coordinationValues = {
          spatialRasterLayers: autoImageLayers
        };
        return new LoaderResult({ loaders: imageLayerLoaders, meta: imageLayerMeta }, urls, coordinationValues);
      });
    });
  }
};

// src/loaders/OmeZarrLoader.js
function hexToRgb(hex) {
  const result = /^#?([A-F\d]{2})([A-F\d]{2})([A-F\d]{2})$/i.exec(hex);
  return [
    parseInt(result[1].toLowerCase(), 16),
    parseInt(result[2].toLowerCase(), 16),
    parseInt(result[3].toLowerCase(), 16)
  ];
}
var OmeZarrLoader = class extends AbstractTwoStepLoader {
  load() {
    return __async(this, null, function* () {
      var _a2, _b2;
      const payload = yield this.dataSource.getJson(".zattrs").catch((reason) => Promise.resolve(reason));
      if (payload instanceof AbstractLoaderError) {
        return Promise.reject(payload);
      }
      const loader = yield loadOmeZarr(this.url, { fetchOptions: this.requestInit, type: "multiscales" });
      const { metadata, data } = loader;
      const { omero } = metadata;
      if (!omero) {
        console.error("Path for image not valid");
        return Promise.reject(payload);
      }
      const { rdefs, channels: channels2 } = omero;
      const t = (_a2 = rdefs.defaultT) != null ? _a2 : 0;
      const z = (_b2 = rdefs.defaultZ) != null ? _b2 : 0;
      const filterSelection = (sel) => {
        if (data.length > 0) {
          const nextSel = {};
          const labels = data[0].labels;
          Object.keys(sel).forEach((key) => {
            if (labels.includes(key)) {
              nextSel[key] = sel[key];
            }
          });
          return nextSel;
        }
        return sel;
      };
      const imagesWithLoaderCreators = [
        {
          name: omero.name || "Image",
          channels: channels2.map((channel, i) => ({
            selection: filterSelection({ z, t, c: i }),
            slider: [channel.window.start, channel.window.end],
            color: hexToRgb(channel.color)
          })),
          loaderCreator: () => __async(this, null, function* () {
            return __spreadProps(__spreadValues({}, loader), { channels: channels2.map((c) => c.label) });
          })
        }
      ];
      const [
        autoImageLayers,
        imageLayerLoaders,
        imageLayerMeta
      ] = yield initializeRasterLayersAndChannels(imagesWithLoaderCreators, void 0);
      const coordinationValues = {
        spatialRasterLayers: autoImageLayers
      };
      return Promise.resolve(new LoaderResult({ loaders: imageLayerLoaders, meta: imageLayerMeta }, [], coordinationValues));
    });
  }
};

// src/components/sets/io.js




function tryUpgradeTreeToLatestSchema(currTree, datatype) {
  const validate = new ajv__WEBPACK_IMPORTED_MODULE_70___default.a().compile(HIERARCHICAL_SCHEMAS[datatype].schema);
  const valid = validate(currTree);
  if (!valid) {
    const failureReason = JSON.stringify(validate.errors, null, 2);
    throw new Error(`Tree validation failed: ${failureReason}`);
  } else if (currTree.datatype !== datatype) {
    throw new Error(`The data type does not match the expected data type of '${datatype}'.`);
  }
  if (currTree.version === "0.1.2") {
    return __spreadProps(__spreadValues({}, currTree), {
      version: HIERARCHICAL_SCHEMAS[datatype].latestVersion,
      tree: currTree.tree.map((levelZeroNode) => nodeTransform(levelZeroNode, (n) => !n.children && Array.isArray(n.set), (n) => __spreadProps(__spreadValues({}, n), { set: n.set.map((itemId) => [itemId, null]) }), []))
    });
  }
  return currTree;
}
function handleImportJSON(result, datatype, theme) {
  let importData = JSON.parse(result);
  importData = tryUpgradeTreeToLatestSchema(importData, datatype);
  return importData;
}
function handleImportTabular(result, datatype, theme) {
  const dsvParser = Object(d3_dsv__WEBPACK_IMPORTED_MODULE_71__["dsvFormat"])(SEPARATOR_TABULAR);
  const importData = dsvParser.parse(result, (row) => ({
    groupName: row.groupName,
    setName: row.setName,
    setColor: row.setColor ? colorStringToArray(row.setColor) : getDefaultColor(theme),
    obsId: row.obsId,
    predictionScore: lodash_isNil__WEBPACK_IMPORTED_MODULE_38___default()(row.predictionScore) || row.predictionScore === NA_VALUE_TABULAR ? null : +row.predictionScore
  }));
  const validate = new ajv__WEBPACK_IMPORTED_MODULE_70___default.a().compile(TABULAR_SCHEMAS[datatype].schema);
  const valid = validate(importData);
  if (!valid) {
    const failureReason = JSON.stringify(validate.errors, null, 2);
    throw new Error(`Import validation failed: ${failureReason}`);
  } else {
    const treeToImport = {
      version: HIERARCHICAL_SCHEMAS[datatype].latestVersion,
      datatype,
      tree: []
    };
    const uniqueGroupNames = Array.from(new Set(importData.map((d) => d.groupName)));
    uniqueGroupNames.forEach((groupName) => {
      const levelZeroNode = {
        name: groupName,
        children: []
      };
      const groupRows = importData.filter((d) => d.groupName === groupName);
      const uniqueSetNames = Array.from(new Set(groupRows.map((d) => d.setName)));
      uniqueSetNames.forEach((setName) => {
        const setRows = groupRows.filter((d) => d.setName === setName);
        const { setColor } = setRows[0];
        const levelOneNode = {
          name: setName,
          color: setColor,
          set: setRows.map((d) => [d.obsId, d.predictionScore])
        };
        levelZeroNode.children.push(levelOneNode);
      });
      treeToImport.tree.push(levelZeroNode);
    });
    return treeToImport;
  }
}
function handleExportJSON(result) {
  const jsonString = JSON.stringify(result);
  const dataString = `data:${MIME_TYPE_JSON};charset=utf-8,${encodeURIComponent(jsonString)}`;
  return dataString;
}
function handleExportTabular(result) {
  const exportData = [];
  result.tree.forEach((levelZeroNode) => {
    levelZeroNode.children.forEach((levelOneNode) => {
      if (levelOneNode.set) {
        levelOneNode.set.forEach(([obsId, prob]) => {
          exportData.push({
            groupName: levelZeroNode.name,
            setName: levelOneNode.name,
            setColor: colorArrayToString(levelOneNode.color),
            obsId,
            predictionScore: lodash_isNil__WEBPACK_IMPORTED_MODULE_38___default()(prob) ? NA_VALUE_TABULAR : prob
          });
        });
      }
    });
  });
  const csvString = Object(json2csv__WEBPACK_IMPORTED_MODULE_72__["parse"])(exportData, {
    fields: ["groupName", "setName", "setColor", "obsId", "predictionScore"],
    delimiter: SEPARATOR_TABULAR
  });
  const dataString = `data:${MIME_TYPE_TABULAR};charset=utf-8,${encodeURIComponent(csvString)}`;
  return dataString;
}
function downloadForUser(dataString, fileName) {
  const downloadAnchorNode = document.createElement("a");
  downloadAnchorNode.setAttribute("href", dataString);
  downloadAnchorNode.setAttribute("download", fileName);
  document.body.appendChild(downloadAnchorNode);
  downloadAnchorNode.click();
  downloadAnchorNode.remove();
}

// src/loaders/CellSetsJsonLoader.js
var CellSetsJsonLoader = class extends JsonLoader {
  constructor(dataSource, params) {
    super(dataSource, params);
    this.schema = cell_sets_schema_default;
  }
  load() {
    var __super = (key) => super[key];
    return __async(this, null, function* () {
      const payload = yield __super("load").call(this).catch((reason) => Promise.resolve(reason));
      if (payload instanceof AbstractLoaderError) {
        return Promise.reject(payload);
      }
      const { data: rawData, url } = payload;
      const upgradedData = tryUpgradeTreeToLatestSchema(rawData, "cell");
      const coordinationValues = {
        cellSetSelection: [],
        cellSetColor: []
      };
      if (upgradedData && upgradedData.tree.length >= 1) {
        const { tree } = upgradedData;
        const newAutoSetSelectionParentName = tree[0].name;
        const newAutoSetSelections = tree[0].children.map((node) => [newAutoSetSelectionParentName, node.name]);
        const newAutoSetColors = initializeCellSetColor(upgradedData, []);
        coordinationValues.cellSetSelection = newAutoSetSelections;
        coordinationValues.cellSetColor = newAutoSetColors;
      }
      return Promise.resolve(new LoaderResult(upgradedData, url, coordinationValues));
    });
  }
};

// src/loaders/anndata-loaders/CellSetsZarrLoader.js

function dataToCellSetsTree(data, options) {
  const [cellNames, cellSets, cellSetScores] = data;
  const cellSetsTree = treeInitialize(SETS_DATATYPE_CELL);
  cellSets.forEach((cellSetIds, j) => {
    const name2 = options[j].groupName;
    let levelZeroNode = {
      name: name2,
      children: []
    };
    if (cellSetIds.length > 0 && Array.isArray(cellSetIds[0])) {
      const levelSets = new internmap__WEBPACK_IMPORTED_MODULE_73__["InternMap"]([], JSON.stringify);
      cellNames.forEach((id, i) => {
        const classes = cellSetIds.map((col) => col[i]);
        if (levelSets.has(classes)) {
          levelSets.get(classes).push([id, null]);
        } else {
          levelSets.set(classes, [[id, null]]);
        }
      });
      const levels = Array.from(levelSets.keys());
      const getNextLevelNames = (levelSuffixes) => {
        const nextLevelNames = Array.from(new Set(levelSuffixes.map((l) => l[0])));
        return nextLevelNames.sort((a, b) => a.localeCompare(b));
      };
      const getNode = (parentLevelPrefixes, currLevelName, childLevelSuffixes) => {
        const isLeaf = childLevelSuffixes.length === 0;
        const resultNode = {
          name: currLevelName
        };
        if (isLeaf) {
          resultNode.set = levelSets.get([...parentLevelPrefixes, currLevelName]);
        } else {
          const shouldBeLeaf = childLevelSuffixes.length === 1 && currLevelName === childLevelSuffixes[0][childLevelSuffixes[0].length - 1];
          if (shouldBeLeaf) {
            resultNode.set = levelSets.get([...parentLevelPrefixes, currLevelName, ...childLevelSuffixes[0]]);
          } else {
            const nextLevelNames = getNextLevelNames(childLevelSuffixes);
            resultNode.children = nextLevelNames.map((nextLevelName) => getNode([...parentLevelPrefixes, currLevelName], nextLevelName, childLevelSuffixes.filter((l) => l[0] === nextLevelName).map((l) => l.slice(1)).filter((v) => v.length > 0)));
          }
        }
        return resultNode;
      };
      const levelOneNodes = getNextLevelNames(levels).map((levelOneName) => getNode([], levelOneName, levels.filter((l) => l[0] === levelOneName).map((l) => l.slice(1))));
      levelZeroNode.children = levelOneNodes;
    } else {
      const uniqueCellSetIds = Array.from(new Set(cellSetIds)).sort();
      const clusters = {};
      uniqueCellSetIds.forEach((id) => clusters[id] = { name: id, set: [] });
      if (cellSetScores[j]) {
        cellSetIds.forEach((id, i) => clusters[id].set.push([cellNames[i], cellSetScores[j][i]]));
      } else {
        cellSetIds.forEach((id, i) => clusters[id].set.push([cellNames[i], null]));
      }
      Object.values(clusters).forEach((cluster) => levelZeroNode = nodeAppendChild(levelZeroNode, cluster));
    }
    cellSetsTree.tree.push(levelZeroNode);
  });
  return cellSetsTree;
}
var CellSetsZarrLoader = class extends AbstractTwoStepLoader {
  loadCellSetIds() {
    const { options } = this;
    const cellSetZarrLocation = options.map(({ setName }) => setName);
    return this.dataSource.loadObsVariables(cellSetZarrLocation);
  }
  loadCellSetScores() {
    const { options } = this;
    const cellSetScoreZarrLocation = options.map((option) => option.scoreName || void 0);
    return this.dataSource.loadObsVariables(cellSetScoreZarrLocation);
  }
  load() {
    return __async(this, null, function* () {
      if (!this.cellSetsTree) {
        const { options } = this;
        this.cellSetsTree = Promise.all([
          this.dataSource.loadObsIndex(),
          this.loadCellSetIds(),
          this.loadCellSetScores()
        ]).then((data) => dataToCellSetsTree(data, options));
      }
      const cellSetsTree = yield this.cellSetsTree;
      const coordinationValues = {};
      const { tree } = cellSetsTree;
      const newAutoSetSelectionParentName = tree[0].name;
      const newAutoSetSelections = tree[0].children.map((node) => [
        newAutoSetSelectionParentName,
        node.name
      ]);
      const newAutoSetColors = initializeCellSetColor(cellSetsTree, []);
      coordinationValues.cellSetSelection = newAutoSetSelections;
      coordinationValues.cellSetColor = newAutoSetColors;
      return Promise.resolve(new LoaderResult(cellSetsTree, null, coordinationValues));
    });
  }
};

// src/loaders/anndata-loaders/CellsZarrLoader.js
var CellsZarrLoader = class extends AbstractTwoStepLoader {
  loadXy() {
    const { xy } = this.options || {};
    if (this.xy) {
      return this.xy;
    }
    if (!this.xy && xy) {
      this.xy = this.dataSource.loadNumeric(xy);
      return this.xy;
    }
    this.xy = Promise.resolve(null);
    return this.xy;
  }
  loadPoly() {
    const { poly } = this.options || {};
    if (this.poly) {
      return this.poly;
    }
    if (!this.poly && poly) {
      this.poly = this.dataSource.loadNumeric(poly);
      return this.poly;
    }
    this.poly = Promise.resolve(null);
    return this.poly;
  }
  loadMappings() {
    const { mappings } = this.options || {};
    if (this.mappings) {
      return this.mappings;
    }
    if (!this.mappings && mappings) {
      this.mappings = Promise.all(Object.keys(mappings).map((coordinationName) => __async(this, null, function* () {
        const { key } = mappings[coordinationName];
        return { coordinationName, arr: yield this.dataSource.loadNumeric(key) };
      })));
      return this.mappings;
    }
    this.mappings = Promise.resolve(null);
    return this.mappings;
  }
  loadFactors() {
    const { factors } = this.options || {};
    if (factors) {
      return this.dataSource.loadObsVariables(factors);
    }
    return Promise.resolve(null);
  }
  load() {
    return __async(this, null, function* () {
      if (!this.cells) {
        this.cells = Promise.all([
          this.loadMappings(),
          this.loadXy(),
          this.loadPoly(),
          this.dataSource.loadObsIndex(),
          this.loadFactors()
        ]).then(([mappings, xy, poly, cellNames, factors]) => {
          const cells = {};
          cellNames.forEach((name2, i) => {
            cells[name2] = {};
            if (mappings) {
              mappings.forEach(({ coordinationName, arr }) => {
                if (!cells[name2].mappings) {
                  cells[name2].mappings = {};
                }
                const { dims } = this.options.mappings[coordinationName];
                cells[name2].mappings[coordinationName] = dims.map((dim) => arr.data[i][dim]);
              });
            }
            if (xy) {
              cells[name2].xy = xy.data[i];
            }
            if (poly) {
              cells[name2].poly = poly.data[i];
            }
            if (factors) {
              const factorsObj = {};
              factors.forEach((factor, j) => factorsObj[this.options.factors[j].split("/").slice(-1)] = factor[i]);
              cells[name2].factors = factorsObj;
            }
          });
          return cells;
        });
      }
      return Promise.resolve(new LoaderResult(yield this.cells, null));
    });
  }
};

// src/loaders/anndata-loaders/MatrixZarrLoader.js


var normalize = (arr) => {
  const [min, max2] = Object(d3_array__WEBPACK_IMPORTED_MODULE_47__["extent"])(arr);
  const ratio = 255 / (max2 - min);
  const data = new Uint8Array(arr.map((i) => Math.floor((i - min) * ratio)));
  return { data };
};
var concatenateColumnVectors = (arr) => {
  const numCols = arr.length;
  const numRows = arr[0].length;
  const { BYTES_PER_ELEMENT } = arr[0];
  const view = new DataView(new ArrayBuffer(numCols * numRows * BYTES_PER_ELEMENT));
  const TypedArray = arr[0].constructor;
  const dtype = TypedArray.name.replace("Array", "");
  for (let i = 0; i < numCols; i += 1) {
    for (let j = 0; j < numRows; j += 1) {
      view[`set${dtype}`](BYTES_PER_ELEMENT * (j * numCols + i), arr[i][j], true);
    }
  }
  return new TypedArray(view.buffer);
};
var MatrixZarrLoader2 = class extends AbstractTwoStepLoader {
  loadFilteredGeneNames() {
    return __async(this, null, function* () {
      if (this.filteredGeneNames) {
        return this.filteredGeneNames;
      }
      const { geneFilter: geneFilterZarr } = this.options;
      const getFilterFn = () => __async(this, null, function* () {
        if (!geneFilterZarr)
          return (data) => data;
        const geneFilter = yield this.dataSource.getFlatArrDecompressed(geneFilterZarr);
        return (data) => data.filter((_, j) => geneFilter[j]);
      });
      this.filteredGeneNames = Promise.all([this.dataSource.loadVarIndex(), getFilterFn()]).then(([data, filter]) => filter(data));
      return this.filteredGeneNames;
    });
  }
  _getFilteredGenes(filterZarr) {
    return __async(this, null, function* () {
      const filter = yield this.dataSource.getFlatArrDecompressed(filterZarr);
      const geneNames = yield this.loadFilteredGeneNames();
      const genes = geneNames.filter((_, i) => filter[i]);
      return genes;
    });
  }
  _getGeneIndices(selection) {
    return __async(this, null, function* () {
      const geneNames = yield this.loadFilteredGeneNames();
      return selection.map((gene) => geneNames.indexOf(gene));
    });
  }
  _getNumCells() {
    return __async(this, null, function* () {
      const cells = yield this.dataSource.loadObsIndex();
      return cells.length;
    });
  }
  _getNumGenes() {
    return __async(this, null, function* () {
      const genes = yield this.loadFilteredGeneNames();
      return genes.length;
    });
  }
  _openSparseArrays() {
    return __async(this, null, function* () {
      const { options: { matrix } } = this;
      const { store } = this.dataSource;
      if (this.sparseArrays) {
        return this.sparseArrays;
      }
      this.sparseArrays = Promise.all(["indptr", "indices", "data"].map((name2) => Object(zarr__WEBPACK_IMPORTED_MODULE_36__["openArray"])({ store, path: `${matrix}/${name2}`, mode: "r" })));
      return this.sparseArrays;
    });
  }
  _loadCSCGeneSelection(selection) {
    return __async(this, null, function* () {
      const indices = yield this._getGeneIndices(selection);
      const [indptrArr, indexArr, cellXGeneArr] = yield this._openSparseArrays();
      const numCells = yield this._getNumCells();
      const { data: cols } = yield indptrArr.getRaw(null);
      return Promise.all(indices.map((index) => __async(this, null, function* () {
        const startRowIndex = cols[index];
        const endRowIndex = cols[index + 1];
        const isColumnAllZeros = startRowIndex === endRowIndex;
        const geneData = new Float32Array(numCells).fill(0);
        if (isColumnAllZeros) {
          return geneData;
        }
        const { data: rowIndices } = yield indexArr.get([
          Object(zarr__WEBPACK_IMPORTED_MODULE_36__["slice"])(startRowIndex, endRowIndex)
        ]);
        const { data: cellXGeneData } = yield cellXGeneArr.get([
          Object(zarr__WEBPACK_IMPORTED_MODULE_36__["slice"])(startRowIndex, endRowIndex)
        ]);
        for (let rowIndex = 0; rowIndex < rowIndices.length; rowIndex += 1) {
          geneData[rowIndices[rowIndex]] = cellXGeneData[rowIndex];
        }
        return geneData;
      })));
    });
  }
  _loadCSRGeneSelection(selection) {
    return __async(this, null, function* () {
      const indices = yield this._getGeneIndices(selection);
      const numGenes = yield this._getNumGenes();
      const numCells = yield this._getNumCells();
      const cellXGene = yield this._loadCSRSparseCellXGene();
      return indices.map((index) => {
        const geneData = new Float32Array(numCells).fill(0);
        for (let i = 0; i < numCells; i += 1) {
          geneData[i] = cellXGene[i * numGenes + index];
        }
        return geneData;
      });
    });
  }
  _loadCSRSparseCellXGene() {
    return __async(this, null, function* () {
      if (this._sparseMatrix) {
        return this._sparseMatrix;
      }
      this._sparseMatrix = this._openSparseArrays().then((sparseArrays) => __async(this, null, function* () {
        const { options: { matrix } } = this;
        const { shape } = yield this.dataSource.getJson(`${matrix}/.zattrs`);
        const [rows, cols, cellXGene] = yield Promise.all(sparseArrays.map((arr) => __async(this, null, function* () {
          const { data } = yield arr.getRaw(null);
          return data;
        })));
        const cellXGeneMatrix = new Float32Array(shape[0] * shape[1]).fill(0);
        let row = 0;
        rows.forEach((_, index) => {
          const rowStart = rows[index];
          const rowEnd = rows[index + 1];
          for (let i = rowStart; i < rowEnd; i += 1) {
            const val = cellXGene[i];
            const col = cols[i];
            cellXGeneMatrix[row * shape[1] + col] = val;
          }
          row += 1;
        });
        return cellXGeneMatrix;
      }));
      return this._sparseMatrix;
    });
  }
  _loadCSCSparseCellXGene() {
    return __async(this, null, function* () {
      if (this._sparseMatrix) {
        return this._sparseMatrix;
      }
      this._sparseMatrix = this._openSparseArrays().then((sparseArrays) => __async(this, null, function* () {
        const { options: { matrix } } = this;
        const { shape } = yield this.dataSource.getJson(`${matrix}/.zattrs`);
        const [cols, rows, cellXGene] = yield Promise.all(sparseArrays.map((arr) => __async(this, null, function* () {
          const { data } = yield arr.getRaw(null);
          return data;
        })));
        const cellXGeneMatrix = new Float32Array(shape[0] * shape[1]).fill(0);
        let col = 0;
        cols.forEach((_, index) => {
          const colStart = cols[index];
          const colEnd = cols[index + 1];
          for (let i = colStart; i < colEnd; i += 1) {
            const val = cellXGene[i];
            const row = rows[i];
            cellXGeneMatrix[row * shape[1] + col] = val;
          }
          col += 1;
        });
        return cellXGeneMatrix;
      }));
      return this._sparseMatrix;
    });
  }
  loadCellXGene() {
    return __async(this, null, function* () {
      const { store } = this.dataSource;
      if (this.cellXGene) {
        return this.cellXGene;
      }
      const { options: { matrix, matrixGeneFilter } } = this;
      if (!this._matrixZattrs) {
        this._matrixZattrs = yield this.dataSource.getJson(`${matrix}/.zattrs`);
      }
      const encodingType = this._matrixZattrs["encoding-type"];
      if (!matrixGeneFilter) {
        if (encodingType === "csr_matrix") {
          this.cellXGene = this._loadCSRSparseCellXGene().then((data) => normalize(data));
        } else if (encodingType === "csc_matrix") {
          this.cellXGene = this._loadCSCSparseCellXGene().then((data) => normalize(data));
        } else {
          if (!this.arr) {
            this.arr = Object(zarr__WEBPACK_IMPORTED_MODULE_36__["openArray"])({ store, path: matrix, mode: "r" });
          }
          this.cellXGene = this.arr.then((z) => z.getRaw(null).then(({ data }) => normalize(data)));
        }
      } else if (encodingType === "csr_matrix") {
        this.cellXGene = this._loadCSRSparseCellXGene().then((cellXGene) => __async(this, null, function* () {
          const filteredGenes = yield this._getFilteredGenes(matrixGeneFilter);
          const numGenesFiltered = filteredGenes.length;
          const geneNames = yield this.loadFilteredGeneNames();
          const numGenes = geneNames.length;
          const numCells = yield this._getNumCells();
          const cellXGeneMatrixFiltered = new Float32Array(numCells * numGenesFiltered).fill(0);
          for (let i = 0; i < numGenesFiltered; i += 1) {
            const index = geneNames.indexOf(filteredGenes[i]);
            for (let j = 0; j < numCells; j += 1) {
              cellXGeneMatrixFiltered[j * numGenesFiltered + i] = cellXGene[j * numGenes + index];
            }
          }
          return normalize(cellXGeneMatrixFiltered);
        }));
      } else {
        const genes = yield this._getFilteredGenes(matrixGeneFilter);
        this.cellXGene = this.loadGeneSelection({ selection: genes, shouldNormalize: false }).then(({ data }) => normalize(concatenateColumnVectors(data)));
      }
      return this.cellXGene;
    });
  }
  loadGeneSelection(_0) {
    return __async(this, arguments, function* ({ selection, shouldNormalize = true }) {
      const { options: { matrix } } = this;
      const { store } = this.dataSource;
      if (!this._matrixZattrs) {
        this._matrixZattrs = yield this.dataSource.getJson(`${matrix}/.zattrs`);
      }
      const encodingType = this._matrixZattrs["encoding-type"];
      let genes;
      if (encodingType === "csc_matrix") {
        genes = yield this._loadCSCGeneSelection(selection);
      } else if (encodingType === "csr_matrix") {
        genes = yield this._loadCSRGeneSelection(selection);
      } else {
        if (!this.arr) {
          this.arr = Object(zarr__WEBPACK_IMPORTED_MODULE_36__["openArray"])({ store, path: matrix, mode: "r" });
        }
        const indices = yield this._getGeneIndices(selection);
        genes = yield Promise.all(indices.map((index) => this.arr.then((z) => z.get([null, index])).then(({ data }) => data)));
      }
      return { data: genes.map((i) => shouldNormalize ? normalize(i).data : i), url: null };
    });
  }
  loadAttrs() {
    return Promise.all([this.dataSource.loadObsIndex(), this.loadFilteredGeneNames()]).then((d) => {
      const [cellNames, geneNames] = d;
      const attrs = { rows: cellNames, cols: geneNames };
      return {
        data: attrs,
        url: null
      };
    });
  }
  load() {
    return Promise.all([this.loadAttrs(), this.loadCellXGene()]).then((d) => __async(this, null, function* () {
      const [{ data: attrs }, cellXGene] = d;
      const {
        options: { matrixGeneFilter: matrixGeneFilterZarr }
      } = this;
      if (matrixGeneFilterZarr) {
        const matrixGeneFilter = yield this.dataSource.getFlatArrDecompressed(matrixGeneFilterZarr);
        attrs.cols = attrs.cols.filter((_, i) => matrixGeneFilter[i]);
      }
      return Promise.resolve(new LoaderResult([attrs, cellXGene], null));
    }));
  }
};

// src/loaders/anndata-loaders/index.js
var anndata_loaders_default = { CellSetsZarrLoader, CellsZarrLoader, MatrixZarrLoader: MatrixZarrLoader2 };

// src/loaders/GenomicProfilesZarrLoader.js
var GenomicProfilesZarrLoader = class extends AbstractTwoStepLoader {
  loadAttrs() {
    if (this.attrs) {
      return this.attrs;
    }
    this.attrs = this.dataSource.getJson(".zattrs");
    return this.attrs;
  }
  load() {
    const { url } = this;
    return this.loadAttrs().then((attrs) => Promise.resolve(new LoaderResult(attrs, url)));
  }
};

// src/loaders/data-sources/AnnDataSource.js



// src/loaders/data-sources/ZarrDataSource.js

var ZarrDataSource = class {
  constructor({ url, requestInit }) {
    const supportedMethods = ["GET"];
    this.store = new zarr__WEBPACK_IMPORTED_MODULE_36__["HTTPStore"](url, {
      supportedMethods,
      fetchOptions: requestInit
    });
  }
  getJson(key) {
    return __async(this, null, function* () {
      try {
        const buf = yield this.store.getItem(key);
        const text = new TextDecoder("utf-8").decode(buf);
        return JSON.parse(text);
      } catch (err) {
        if (err instanceof zarr__WEBPACK_IMPORTED_MODULE_36__["KeyError"]) {
          return {};
        }
        throw err;
      }
    });
  }
};

// src/loaders/data-sources/AnnDataSource.js
var readFloat32FromUint8 = (bytes) => {
  if (bytes.length !== 4) {
    throw new Error("readFloat32 only takes in length 4 byte buffers");
  }
  return new Int32Array(bytes.buffer)[0];
};
var HEADER_LENGTH = 4;
function parseVlenUtf8(buffer) {
  const decoder = new TextDecoder();
  let data = 0;
  const dataEnd = data + buffer.length;
  const length = readFloat32FromUint8(buffer.slice(data, HEADER_LENGTH));
  if (buffer.length < HEADER_LENGTH) {
    throw new Error("corrupt buffer, missing or truncated header");
  }
  data += HEADER_LENGTH;
  const output = new Array(length);
  for (let i = 0; i < length; i += 1) {
    if (data + 4 > dataEnd) {
      throw new Error("corrupt buffer, data seem truncated");
    }
    const l = readFloat32FromUint8(buffer.slice(data, data + 4));
    data += 4;
    if (data + l > dataEnd) {
      throw new Error("corrupt buffer, data seem truncated");
    }
    output[i] = decoder.decode(buffer.slice(data, data + l));
    data += l;
  }
  return output;
}
var AnnDataSource = class extends ZarrDataSource {
  constructor(...args) {
    super(...args);
    this.obsPromises = new Map();
  }
  loadObsVariables(obsPaths) {
    const obsPromises = obsPaths.map((obsPath) => {
      const getObsCol = (obsCol) => {
        if (!this.obsPromises.has(obsCol)) {
          const obsPromise = this._loadObsVariable(obsCol).catch((err) => {
            this.obsPromises.delete(obsCol);
            throw err;
          });
          this.obsPromises.set(obsCol, obsPromise);
        }
        return this.obsPromises.get(obsCol);
      };
      if (!obsPath) {
        return Promise.resolve(void 0);
      }
      if (Array.isArray(obsPath)) {
        return Promise.resolve(Promise.all(obsPath.map(getObsCol)));
      }
      return getObsCol(obsPath);
    });
    return Promise.all(obsPromises);
  }
  _loadObsVariable(obs) {
    return __async(this, null, function* () {
      const { store } = this;
      const { categories } = yield this.getJson(`${obs}/.zattrs`);
      let categoriesValues;
      if (categories) {
        const { dtype } = yield this.getJson(`/obs/${categories}/.zarray`);
        if (dtype === "|O") {
          categoriesValues = yield this.getFlatArrDecompressed(`/obs/${categories}`);
        }
      }
      const obsArr = yield Object(zarr__WEBPACK_IMPORTED_MODULE_36__["openArray"])({ store, path: obs, mode: "r" });
      const obsValues = yield obsArr.get();
      const { data } = obsValues;
      const mappedObsValues = Array.from(data).map((i) => !categoriesValues ? String(i) : categoriesValues[i]);
      return mappedObsValues;
    });
  }
  loadNumeric(path) {
    const { store } = this;
    return Object(zarr__WEBPACK_IMPORTED_MODULE_36__["openArray"])({
      store,
      path,
      mode: "r"
    }).then((arr) => arr.get());
  }
  getFlatArrDecompressed(path) {
    const { store } = this;
    return Object(zarr__WEBPACK_IMPORTED_MODULE_36__["openArray"])({
      store,
      path,
      mode: "r"
    }).then((z) => __async(this, null, function* () {
      let data;
      const parseAndMergeTextBytes = (dbytes) => {
        const text = parseVlenUtf8(dbytes);
        if (!data) {
          data = text;
        } else {
          data = data.concat(text);
        }
      };
      const mergeBytes = (dbytes) => {
        if (!data) {
          data = dbytes;
        } else {
          const tmp = new Uint8Array(dbytes.buffer.byteLength + data.buffer.byteLength);
          tmp.set(new Uint8Array(data.buffer), 0);
          tmp.set(dbytes, data.buffer.byteLength);
          data = tmp;
        }
      };
      const numRequests = Math.ceil(z.meta.shape[0] / z.meta.chunks[0]);
      const requests = lodash_range__WEBPACK_IMPORTED_MODULE_40___default()(numRequests).map((item) => __async(this, null, function* () {
        return store.getItem(`${z.keyPrefix}${String(item)}`).then((buf) => z.compressor.then((compressor) => compressor.decode(buf)));
      }));
      const dbytesArr = yield Promise.all(requests);
      dbytesArr.forEach((dbytes) => {
        if (Array.isArray(z.meta.filters) && z.meta.filters[0].id === "vlen-utf8") {
          parseAndMergeTextBytes(dbytes);
        } else {
          mergeBytes(dbytes);
        }
      });
      const {
        meta: {
          shape: [length]
        }
      } = z;
      return data.slice(0, length);
    }));
  }
  loadObsIndex() {
    if (this.obsIndex) {
      return this.obsIndex;
    }
    this.obsIndex = this.getJson("obs/.zattrs").then(({ _index }) => this.getFlatArrDecompressed(`/obs/${_index}`));
    return this.obsIndex;
  }
  loadVarIndex() {
    if (this.varIndex) {
      return this.varIndex;
    }
    this.varIndex = this.getJson("var/.zattrs").then(({ _index }) => this.getFlatArrDecompressed(`/var/${_index}`));
    return this.varIndex;
  }
};

// src/loaders/errors/DataSourceFetchError.js
var DataSourceFetchError = class extends AbstractLoaderError {
  constructor(source, url, headers) {
    super(`${source} Error HTTP Status fetching from ${url}`);
    this.source = source;
    this.url = url;
    this.headers = headers;
  }
  warnInConsole() {
    const { source, url, headers } = this;
    console.warn(`${source} failed to fetch from ${url} with headers ${headers}`);
  }
};

// src/loaders/data-sources/JsonSource.js
var JsonSource = class {
  constructor({ url, requestInit }) {
    this.url = url;
    this.requestInit = requestInit;
  }
  get data() {
    if (this._data)
      return this._data;
    this._data = fetch(this.url, this.requestInit).then((response) => {
      if (!response.ok) {
        return Promise.reject(new DataSourceFetchError("JsonSource", this.url, response.headers));
      }
      return response.json();
    }).catch(() => Promise.reject(new DataSourceFetchError("JsonSource", this.url, {})));
    return this._data;
  }
};

// src/loaders/types.js
var fileTypeToLoaderAndSource = {
  [FileType.EXPRESSION_MATRIX_ZARR]: [ZarrDataSource, MatrixZarrLoader],
  [FileType.CLUSTERS_JSON]: [JsonSource, ClustersJsonAsMatrixZarrLoader],
  [FileType.GENES_JSON]: [JsonSource, GenesJsonAsMatrixZarrLoader],
  [FileType.CELLS_JSON]: [JsonSource, JsonLoader],
  [FileType.MOLECULES_JSON]: [JsonSource, JsonLoader],
  [FileType.NEIGHBORHOODS_JSON]: [JsonSource, JsonLoader],
  [FileType.RASTER_JSON]: [JsonSource, RasterLoader],
  [FileType.RASTER_OME_ZARR]: [ZarrDataSource, OmeZarrLoader],
  [FileType.CELL_SETS_JSON]: [JsonSource, CellSetsJsonLoader],
  [FileType.ANNDATA_CELL_SETS_ZARR]: [AnnDataSource, anndata_loaders_default.CellSetsZarrLoader],
  [FileType.ANNDATA_CELLS_ZARR]: [AnnDataSource, anndata_loaders_default.CellsZarrLoader],
  [FileType.ANNDATA_EXPRESSION_MATRIX_ZARR]: [AnnDataSource, anndata_loaders_default.MatrixZarrLoader],
  [FileType.GENOMIC_PROFILES_ZARR]: [ZarrDataSource, GenomicProfilesZarrLoader]
};
function getSourceAndLoaderFromFileType(type17) {
  return fileTypeToLoaderAndSource[type17] || [JsonSource, JsonLoader];
}

// src/app/vitessce-grid-utils.js
function getNumRows(layout) {
  let max2 = 0;
  let bottomY;
  for (let i = 0, len = layout.length; i < len; i++) {
    bottomY = layout[i].y + layout[i].h;
    if (bottomY > max2)
      max2 = bottomY;
  }
  return max2;
}
function getRowHeight(containerHeight, numRows, margin2, padding2) {
  const effectiveContainerHeight = containerHeight - 2 * padding2 - (numRows - 1) * margin2;
  return effectiveContainerHeight / numRows;
}
function useRowHeight(config, initialRowHeight, height, margin2, padding2) {
  const [containerHeight, setContainerHeight] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(height);
  const [rowHeight, setRowHeight] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(initialRowHeight);
  const containerRef = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])();
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    const numRows = getNumRows(config.layout);
    const newRowHeight = getRowHeight(containerHeight, numRows, margin2, padding2);
    setRowHeight(newRowHeight);
  }, [containerHeight, config, margin2, padding2]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (height !== null && height !== void 0) {
      setContainerHeight(height);
    }
  }, [height]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (height !== null && height !== void 0) {
      return () => {
      };
    }
    function onWindowResize() {
      if (!containerRef.current)
        return;
      const containerRect = containerRef.current.getBoundingClientRect();
      setContainerHeight(containerRect.height);
    }
    window.addEventListener("resize", onWindowResize);
    onWindowResize();
    return () => {
      window.removeEventListener("resize", onWindowResize);
    };
  }, [containerRef, height]);
  return [rowHeight, containerRef];
}
function createLoaders(datasets, configDescription) {
  const result = {};
  const dataSources = {};
  datasets.forEach((dataset) => {
    const datasetLoaders = {
      name: dataset.name,
      description: dataset.description || configDescription,
      loaders: {}
    };
    dataset.files.forEach((file) => {
      const [DataSourceClass, LoaderClass] = getSourceAndLoaderFromFileType(file.fileType);
      const { url, options, requestInit } = file;
      const fileId = url || JSON.stringify(options);
      if (!(fileId in dataSources)) {
        dataSources[fileId] = new DataSourceClass({ url, requestInit });
      }
      const loader = new LoaderClass(dataSources[fileId], file);
      datasetLoaders.loaders[file.type] = loader;
    });
    result[dataset.uid] = datasetLoaders;
  });
  return result;
}

// src/app/VitessceGrid.js
var padding = 10;
var margin = 5;
function VitessceGrid(props) {
  const {
    rowHeight: initialRowHeight,
    config,
    getComponent: getComponent2,
    theme,
    height
  } = props;
  const [rowHeight, containerRef] = useRowHeight(config, initialRowHeight, height, margin, padding);
  const onResize = useEmitGridResize();
  const [componentWidth] = useClosestVitessceContainerSize(containerRef);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    onResize();
  }, [rowHeight, onResize]);
  const viewConfigStoreApi = useViewConfigStoreApi();
  const setViewConfig = useSetViewConfig(viewConfigStoreApi);
  const setLoaders = useSetLoaders();
  const removeComponent = useRemoveComponent();
  const changeLayout = useChangeLayout();
  const layout = useLayout();
  const changeLayoutPostMount = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])(() => componentWidth > 0 ? changeLayout : () => {
  }, [changeLayout, componentWidth]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (config) {
      setViewConfig(config);
      const loaders = createLoaders(config.datasets, config.description);
      setLoaders(loaders);
    } else {
      setLoaders({});
    }
  }, [config, setViewConfig, setLoaders]);
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    ref: containerRef,
    className: `vitessce-container vitessce-theme-${theme}`
  }, layout && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(VitessceGridLayout, {
    layout,
    height,
    rowHeight,
    theme,
    getComponent: getComponent2,
    draggableHandle: ".title",
    margin,
    padding,
    onRemoveComponent: removeComponent,
    onLayoutChange: changeLayoutPostMount,
    reactGridLayoutProps: {
      onResize,
      onResizeStop: onResize
    }
  }));
}

// src/app/app.js


// src/api/VitessceConfig.js
var VitessceConfigDatasetFile = class {
  constructor(url, dataType, fileType, options) {
    this.file = __spreadValues({
      url,
      type: dataType,
      fileType
    }, options !== null ? { options } : {});
  }
  toJSON() {
    return this.file;
  }
};
var VitessceConfigDataset = class {
  constructor(uid, name2, description2) {
    this.dataset = {
      uid,
      name: name2,
      description: description2,
      files: []
    };
  }
  addFile(url, dataType, fileType, options = null) {
    this.dataset.files.push(new VitessceConfigDatasetFile(url, dataType, fileType, options));
    return this;
  }
  toJSON() {
    return __spreadProps(__spreadValues({}, this.dataset), {
      files: this.dataset.files.map((f) => f.toJSON())
    });
  }
};
var VitessceConfigView = class {
  constructor(component, coordinationScopes, x, y, w, h) {
    this.view = {
      component,
      coordinationScopes,
      x,
      y,
      w,
      h
    };
  }
  useCoordination(...args) {
    const cScopes = args;
    cScopes.forEach((cScope) => {
      this.view.coordinationScopes[cScope.cType] = cScope.cScope;
    });
    return this;
  }
  setXYWH(x, y, w, h) {
    this.view.x = x;
    this.view.y = y;
    this.view.w = w;
    this.view.h = h;
    return this;
  }
  setProps(props) {
    this.view.props = __spreadValues(__spreadValues({}, this.view.props || {}), props);
    return this;
  }
  toJSON() {
    return this.view;
  }
};
var VitessceConfigViewHConcat = class {
  constructor(views) {
    this.views = views;
  }
};
var VitessceConfigViewVConcat = class {
  constructor(views) {
    this.views = views;
  }
};
function hconcat(...views) {
  const vcvhc = new VitessceConfigViewHConcat(views);
  return vcvhc;
}
function vconcat(...views) {
  const vcvvc = new VitessceConfigViewVConcat(views);
  return vcvvc;
}
var VitessceConfigCoordinationScope = class {
  constructor(cType, cScope) {
    this.cType = cType;
    this.cScope = cScope;
    this.cValue = null;
  }
  setValue(cValue) {
    this.cValue = cValue;
    return this;
  }
};
var VitessceConfig = class {
  constructor(name2 = void 0, description2 = void 0) {
    this.config = {
      version: "1.0.4",
      name: name2,
      description: description2,
      datasets: [],
      coordinationSpace: {},
      layout: [],
      initStrategy: "auto"
    };
  }
  addDataset(name2 = void 0, description2 = void 0, options = void 0) {
    const { uid } = options || {};
    const prevDatasetUids = this.config.datasets.map((d) => d.dataset.uid);
    const nextUid = uid || getNextScope(prevDatasetUids);
    const newDataset = new VitessceConfigDataset(nextUid, name2, description2);
    this.config.datasets.push(newDataset);
    const [newScope] = this.addCoordination(CoordinationType.DATASET);
    newScope.setValue(nextUid);
    return newDataset;
  }
  addView(dataset, component, options) {
    const {
      x = 0,
      y = 0,
      w = 1,
      h = 1,
      mapping = null
    } = options || {};
    const datasetMatches = this.config.coordinationSpace[CoordinationType.DATASET] ? Object.entries(this.config.coordinationSpace[CoordinationType.DATASET]).filter(([scopeName, datasetScope2]) => datasetScope2.cValue === dataset.dataset.uid).map(([scopeName]) => scopeName) : [];
    let datasetScope;
    if (datasetMatches.length === 1) {
      [datasetScope] = datasetMatches;
    } else {
      throw new Error("No coordination scope matching the dataset parameter could be found in the coordination space.");
    }
    const coordinationScopes = {
      [CoordinationType.DATASET]: datasetScope
    };
    const newView = new VitessceConfigView(component, coordinationScopes, x, y, w, h);
    if (mapping) {
      const [etScope] = this.addCoordination(CoordinationType.EMBEDDING_TYPE);
      etScope.setValue(mapping);
      newView.useCoordination(etScope);
    }
    this.config.layout.push(newView);
    return newView;
  }
  addCoordination(...args) {
    const cTypes = args;
    const result = [];
    cTypes.forEach((cType) => {
      const prevScopes = this.config.coordinationSpace[cType] ? Object.keys(this.config.coordinationSpace[cType]) : [];
      const scope = new VitessceConfigCoordinationScope(cType, getNextScope(prevScopes));
      if (!this.config.coordinationSpace[scope.cType]) {
        this.config.coordinationSpace[scope.cType] = {};
      }
      this.config.coordinationSpace[scope.cType][scope.cScope] = scope;
      result.push(scope);
    });
    return result;
  }
  linkViews(views, cTypes, cValues = null) {
    const cScopes = this.addCoordination(...cTypes);
    views.forEach((view) => {
      cScopes.forEach((cScope) => {
        view.useCoordination(cScope);
      });
    });
    if (Array.isArray(cValues) && cValues.length === cTypes.length) {
      cScopes.forEach((cScope, i) => {
        cScope.setValue(cValues[i]);
      });
    }
    return this;
  }
  layout(viewConcat) {
    function layoutAux(obj, xMin, xMax, yMin, yMax) {
      const w = xMax - xMin;
      const h = yMax - yMin;
      if (obj instanceof VitessceConfigView) {
        obj.setXYWH(xMin, yMin, w, h);
      } else if (obj instanceof VitessceConfigViewHConcat) {
        const { views } = obj;
        const numViews = views.length;
        views.forEach((view, i) => {
          layoutAux(view, xMin + w / numViews * i, xMin + w / numViews * (i + 1), yMin, yMax);
        });
      } else if (obj instanceof VitessceConfigViewVConcat) {
        const { views } = obj;
        const numViews = views.length;
        views.forEach((view, i) => {
          layoutAux(view, xMin, xMax, yMin + h / numViews * i, yMin + h / numViews * (i + 1));
        });
      }
    }
    layoutAux(viewConcat, 0, 12, 0, 12);
    return this;
  }
  toJSON() {
    return __spreadProps(__spreadValues({}, this.config), {
      datasets: this.config.datasets.map((d) => d.toJSON()),
      coordinationSpace: fromEntries(Object.entries(this.config.coordinationSpace).map(([cType, cScopes]) => [
        cType,
        fromEntries(Object.entries(cScopes).map(([cScopeName, cScope]) => [
          cScopeName,
          cScope.cValue
        ]))
      ])),
      layout: this.config.layout.map((c) => c.toJSON())
    });
  }
  static fromJSON(config) {
    const { name: name2, description: description2 } = config;
    const vc = new VitessceConfig(name2, description2);
    config.datasets.forEach((d) => {
      const newDataset = vc.addDataset(d.name, d.description, { uid: d.uid });
      d.files.forEach((f) => {
        newDataset.addFile(f.url, f.type, f.fileType);
      });
    });
    Object.keys(config.coordinationSpace).forEach((cType) => {
      if (cType !== CoordinationType.DATASET) {
        const cObj = config.coordinationSpace[cType];
        vc.config.coordinationSpace[cType] = {};
        Object.entries(cObj).forEach(([cScopeName, cScopeValue]) => {
          const scope = new VitessceConfigCoordinationScope(cType, cScopeName);
          scope.setValue(cScopeValue);
          vc.config.coordinationSpace[cType][cScopeName] = scope;
        });
      }
    });
    config.layout.forEach((c) => {
      const newView = new VitessceConfigView(c.component, c.coordinationScopes, c.x, c.y, c.w, c.h);
      vc.config.layout.push(newView);
    });
    return vc;
  }
};

// src/demo/utils.js
var urlPrefix = "https://s3.amazonaws.com/vitessce-data/0.0.31/master_release";
function makeDatasetNameToJsonFiles(datasetPrefix) {
  return (name2) => ({
    type: name2,
    fileType: `${name2}.json`,
    url: `${urlPrefix}/${datasetPrefix}/${datasetPrefix}.${name2}.json`
  });
}
function getS3Url(datasetPrefix, name2) {
  return `${urlPrefix}/${datasetPrefix}/${datasetPrefix}.${name2}.json`;
}
function notPublic(config) {
  return __spreadProps(__spreadValues({}, config), {
    public: void 0
  });
}
var vapi = {
  VitessceConfig,
  hconcat,
  vconcat,
  cm: Component,
  dt: DataType,
  ft: FileType,
  ct: CoordinationType
};

// src/demo/view-configs/codeluppi.js
var linnarssonDataTypes = [
  "cells",
  "cell-sets",
  "raster",
  "molecules",
  "neighborhoods"
];
var linnarssonName = "Codeluppi et al., Nature Methods 2018";
var linnarssonDescription = "Spatial organization of the somatosensory cortex revealed by osmFISH";
var linnarssonBase = {
  name: linnarssonName,
  description: linnarssonDescription,
  version: "1.0.0",
  initStrategy: "auto",
  datasets: [
    {
      uid: "codeluppi",
      name: "Codeluppi",
      files: [
        ...linnarssonDataTypes.map(makeDatasetNameToJsonFiles("linnarsson")),
        __spreadProps(__spreadValues({}, makeDatasetNameToJsonFiles("linnarsson")("clusters")), {
          type: "expression-matrix"
        })
      ]
    }
  ]
};
var linnarssonBaseNoMolecules = {
  name: linnarssonName,
  description: linnarssonDescription,
  version: "1.0.0",
  initStrategy: "auto",
  datasets: [
    {
      uid: "codeluppi",
      name: "Codeluppi",
      files: [
        ...linnarssonDataTypes.filter((dtype) => dtype !== "molecules").map(makeDatasetNameToJsonFiles("linnarsson")),
        __spreadProps(__spreadValues({}, makeDatasetNameToJsonFiles("linnarsson")("clusters")), {
          type: "expression-matrix"
        })
      ]
    }
  ]
};
var justScatter = {
  version: "1.0.0",
  name: "Codeluppi, just scatterplot",
  public: false,
  initStrategy: "auto",
  datasets: [
    {
      uid: "codeluppi",
      name: "Codeluppi",
      files: [
        __spreadProps(__spreadValues({}, makeDatasetNameToJsonFiles("linnarsson")("cells")), {
          requestInit: {
            method: "GET",
            headers: { "x-foo": "FAKE" },
            mode: "cors",
            credentials: "omit",
            cache: "no-store",
            redirect: "error",
            referrer: "FAKE",
            integrity: "FAKE"
          }
        })
      ]
    }
  ],
  coordinationSpace: {
    embeddingType: {
      A: "t-SNE"
    },
    embeddingZoom: {
      A: 0.75
    }
  },
  layout: [
    {
      component: "scatterplot",
      coordinationScopes: {
        embeddingType: "A",
        embeddingZoom: "A"
      },
      x: 0,
      y: 0,
      w: 12,
      h: 2
    }
  ]
};
var justScatterExpression = {
  version: "1.0.0",
  name: "Codeluppi, just scatterplot and expression",
  public: false,
  initStrategy: "auto",
  datasets: [
    {
      uid: "codeluppi",
      name: "Codeluppi",
      files: [
        makeDatasetNameToJsonFiles("linnarsson")("cells"),
        makeDatasetNameToJsonFiles("linnarsson")("genes")
      ]
    }
  ],
  coordinationSpace: {
    embeddingType: {
      A: "t-SNE"
    },
    embeddingZoom: {
      A: 0.75
    }
  },
  layout: [
    {
      component: "scatterplot",
      coordinationScopes: {
        embeddingType: "A",
        embeddingZoom: "A"
      },
      x: 0,
      y: 0,
      w: 12,
      h: 2
    },
    {
      component: "genes",
      x: 8,
      y: 2,
      w: 4,
      h: 2
    }
  ]
};
var justSpatial = __spreadProps(__spreadValues({}, linnarssonBase), {
  coordinationSpace: {
    spatialZoom: {
      A: -6.5
    },
    spatialTargetX: {
      A: 18e3
    },
    spatialTargetY: {
      A: 18e3
    }
  },
  layout: [
    {
      component: "spatial",
      coordinationScopes: {
        spatialZoom: "A",
        spatialTargetX: "A",
        spatialTargetY: "A"
      },
      x: 0,
      y: 0,
      w: 10,
      h: 2
    },
    {
      component: "genes",
      x: 10,
      y: 1,
      w: 2,
      h: 1
    }
  ]
});
var codeluppi2018 = __spreadProps(__spreadValues({}, linnarssonBase), {
  public: true,
  coordinationSpace: {
    embeddingZoom: {
      PCA: 0,
      TSNE: 0.75
    },
    embeddingType: {
      PCA: "PCA",
      TSNE: "t-SNE"
    },
    spatialZoom: {
      A: -5.5
    },
    spatialTargetX: {
      A: 16e3
    },
    spatialTargetY: {
      A: 2e4
    }
  },
  layout: [
    {
      component: "description",
      props: {
        description: `${linnarssonName}: ${linnarssonDescription}`
      },
      x: 0,
      y: 0,
      w: 2,
      h: 1
    },
    {
      component: "layerController",
      x: 0,
      y: 1,
      w: 2,
      h: 4
    },
    {
      component: "status",
      x: 0,
      y: 5,
      w: 2,
      h: 1
    },
    {
      component: "spatial",
      coordinationScopes: {
        spatialZoom: "A",
        spatialTargetX: "A",
        spatialTargetY: "A"
      },
      x: 2,
      y: 0,
      w: 4,
      h: 4
    },
    {
      component: "genes",
      x: 9,
      y: 0,
      w: 3,
      h: 2
    },
    {
      component: "cellSets",
      x: 9,
      y: 3,
      w: 3,
      h: 2
    },
    {
      component: "heatmap",
      props: {
        transpose: true
      },
      x: 2,
      y: 4,
      w: 5,
      h: 2
    },
    {
      component: "cellSetExpression",
      x: 7,
      y: 4,
      w: 5,
      h: 2
    },
    {
      component: "scatterplot",
      coordinationScopes: {
        embeddingType: "PCA",
        embeddingZoom: "PCA"
      },
      x: 6,
      y: 0,
      w: 3,
      h: 2
    },
    {
      component: "scatterplot",
      coordinationScopes: {
        embeddingType: "TSNE",
        embeddingZoom: "TSNE"
      },
      x: 6,
      y: 2,
      w: 3,
      h: 2
    }
  ]
});
var linnarssonWithRorb = __spreadProps(__spreadValues({}, linnarssonBaseNoMolecules), {
  coordinationSpace: {
    embeddingZoom: {
      PCA: 0,
      TSNE: 0.75
    },
    embeddingType: {
      PCA: "PCA",
      TSNE: "t-SNE"
    },
    spatialZoom: {
      A: -5.5
    },
    spatialTargetX: {
      A: 16e3
    },
    spatialTargetY: {
      A: 2e4
    },
    geneSelection: {
      A: ["Rorb"]
    },
    geneExpressionColormapRange: {
      A: [0, 0.75]
    }
  },
  layout: [
    {
      component: "description",
      props: {
        description: `${linnarssonName}: ${linnarssonDescription}`
      },
      x: 0,
      y: 0,
      w: 2,
      h: 2
    },
    {
      component: "layerController",
      x: 0,
      y: 2,
      w: 2,
      h: 4
    },
    {
      component: "spatial",
      coordinationScopes: {
        spatialZoom: "A",
        spatialTargetX: "A",
        spatialTargetY: "A",
        geneSelection: "A"
      },
      x: 2,
      y: 0,
      w: 4,
      h: 4
    },
    {
      component: "genes",
      coordinationScopes: {
        geneSelection: "A"
      },
      x: 9,
      y: 0,
      w: 3,
      h: 2
    },
    {
      component: "cellSets",
      x: 9,
      y: 3,
      w: 3,
      h: 2
    },
    {
      component: "heatmap",
      coordinationScopes: {
        geneSelection: "A",
        geneExpressionColormapRange: "A"
      },
      props: {
        transpose: true
      },
      x: 2,
      y: 4,
      w: 10,
      h: 2
    },
    {
      component: "scatterplot",
      coordinationScopes: {
        embeddingType: "TSNE",
        embeddingZoom: "TSNE",
        geneSelection: "A"
      },
      x: 6,
      y: 0,
      w: 3,
      h: 4
    }
  ]
});
function getCodeluppiViewConfig(name2, description2) {
  const vc = new vapi.VitessceConfig(name2, description2);
  const dataset = vc.addDataset(linnarssonName, linnarssonDescription).addFile(getS3Url("linnarsson", "cells"), vapi.dt.CELLS, vapi.ft.CELLS_JSON).addFile(getS3Url("linnarsson", "cell-sets"), vapi.dt.CELL_SETS, vapi.ft.CELL_SETS_JSON).addFile(getS3Url("linnarsson", "raster"), vapi.dt.RASTER, vapi.ft.RASTER_JSON).addFile(getS3Url("linnarsson", "molecules"), vapi.dt.MOLECULES, vapi.ft.MOLECULES_JSON);
  return [vc, dataset];
}

// src/demo/view-configs/eng.js
var driesName = "Eng et al., Nature 2019";
var driesDescription = "Transcriptome-scale super-resolved imaging in tissues by RNA seqFISH";
var eng2019 = {
  name: driesName,
  version: "1.0.0",
  description: driesDescription,
  public: true,
  datasets: [
    {
      uid: "dries-2019",
      name: "Dries 2019",
      files: [
        "cells",
        "cell-sets"
      ].map(makeDatasetNameToJsonFiles("dries"))
    }
  ],
  initStrategy: "auto",
  coordinationSpace: {
    embeddingType: {
      TSNE: "t-SNE",
      UMAP: "UMAP"
    },
    embeddingCellSetPolygonsVisible: {
      A: false
    },
    embeddingCellSetLabelsVisible: {
      A: true
    },
    embeddingCellSetLabelSize: {
      A: 16
    },
    embeddingCellRadius: {
      A: 1
    },
    embeddingZoom: {
      TSNE: 3,
      UMAP: 3
    },
    spatialZoom: {
      A: -4.4
    },
    spatialTargetX: {
      A: 3800
    },
    spatialTargetY: {
      A: -900
    }
  },
  layout: [
    {
      component: "description",
      props: {
        description: `${driesName}: ${driesDescription}`
      },
      x: 9,
      y: 0,
      w: 3,
      h: 2
    },
    {
      component: "status",
      x: 9,
      y: 2,
      w: 3,
      h: 2
    },
    {
      component: "cellSets",
      x: 9,
      y: 4,
      w: 3,
      h: 4
    },
    {
      component: "cellSetSizes",
      x: 5,
      y: 4,
      w: 4,
      h: 4
    },
    {
      component: "scatterplot",
      coordinationScopes: {
        embeddingType: "TSNE",
        embeddingZoom: "TSNE",
        embeddingCellSetLabelsVisible: "A",
        embeddingCellSetLabelSize: "A",
        embeddingCellSetPolygonsVisible: "A",
        embeddingCellRadius: "A"
      },
      x: 0,
      y: 2,
      w: 5,
      h: 4
    },
    {
      component: "spatial",
      props: {
        cellRadius: 50
      },
      coordinationScopes: {
        spatialZoom: "A",
        spatialTargetX: "A",
        spatialTargetY: "A"
      },
      x: 5,
      y: 0,
      w: 4,
      h: 4
    },
    {
      component: "scatterplot",
      coordinationScopes: {
        embeddingType: "UMAP",
        embeddingZoom: "UMAP",
        embeddingCellSetLabelsVisible: "A",
        embeddingCellSetLabelSize: "A",
        embeddingCellSetPolygonsVisible: "A",
        embeddingCellRadius: "A"
      },
      x: 0,
      y: 0,
      w: 5,
      h: 4
    }
  ]
};
function getEngViewConfig(name2, description2) {
  const vc = new vapi.VitessceConfig(name2, description2);
  const dataset = vc.addDataset(driesName, driesDescription).addFile(getS3Url("dries", "cells"), vapi.dt.CELLS, vapi.ft.CELLS_JSON).addFile(getS3Url("dries", "cell-sets"), vapi.dt.CELL_SETS, vapi.ft.CELL_SETS_JSON);
  return [vc, dataset];
}

// src/demo/view-configs/wang.js
var wangName = "Wang et al., Scientific Reports 2018";
var wangDescription = "Multiplexed imaging of high-density libraries of RNAs with MERFISH and expansion microscopy";
var wang2018 = {
  name: wangName,
  version: "1.0.0",
  description: wangDescription,
  public: true,
  datasets: [
    {
      uid: "wang-2018",
      name: "Wang 2018",
      files: [
        ...[
          "cells",
          "molecules"
        ].map(makeDatasetNameToJsonFiles("wang")),
        __spreadProps(__spreadValues({}, makeDatasetNameToJsonFiles("wang")("genes")), {
          type: "expression-matrix"
        })
      ]
    }
  ],
  initStrategy: "auto",
  coordinationSpace: {
    spatialZoom: {
      A: -1
    },
    spatialLayers: {
      A: [
        {
          type: "molecules",
          radius: 2,
          opacity: 1,
          visible: true
        },
        {
          type: "cells",
          opacity: 1,
          radius: 50,
          visible: true,
          stroked: false
        }
      ]
    }
  },
  layout: [
    {
      component: "spatial",
      coordinationScopes: {
        spatialZoom: "A",
        spatialLayers: "A"
      },
      x: 0,
      y: 0,
      w: 10,
      h: 2
    },
    {
      component: "genes",
      x: 10,
      y: 0,
      w: 2,
      h: 2
    }
  ]
};

// src/demo/view-configs/spraggins.js
var vanderbiltDescription = "High bit depth (uint16) multiplex immunofluorescence images of the kidney by the BIOmolecular Multimodal Imaging Center (BIOMIC) at Vanderbilt University";
var vanderbiltBase = {
  description: vanderbiltDescription,
  layers: [
    {
      name: "raster",
      type: "RASTER",
      fileType: "raster.json",
      url: `${urlPrefix}/spraggins/spraggins.raster.json`
    }
  ]
};
var spraggins2020 = __spreadProps(__spreadValues({}, vanderbiltBase), {
  version: "0.1.0",
  name: "Spraggins",
  public: true,
  staticLayout: [
    {
      component: "spatial",
      props: {
        view: {
          zoom: -6.5,
          target: [2e4, 2e4, 0]
        }
      },
      x: 0,
      y: 0,
      w: 9,
      h: 2
    },
    {
      component: "layerController",
      x: 9,
      y: 0,
      w: 3,
      h: 2
    }
  ]
});
var neumann2020 = {
  version: "1.0.1",
  name: "Neumann et al., 2020",
  description: "Four registered imaging modalities (PAS, IMS, AF) from HuBMAP collection HBM876.XNRH.336",
  datasets: [
    {
      uid: "A",
      name: "Spraggins",
      files: [
        {
          type: "raster",
          fileType: "raster.json",
          options: {
            schemaVersion: "0.0.2",
            images: [
              {
                name: "PAS",
                type: "ome-tiff",
                url: "https://assets.hubmapconsortium.org/f4188a148e4c759092d19369d310883b/ometiff-pyramids/processedMicroscopy/VAN0006-LK-2-85-PAS_images/VAN0006-LK-2-85-PAS_registered.ome.tif?token="
              },
              {
                name: "AF",
                type: "ome-tiff",
                url: "https://assets.hubmapconsortium.org/2130d5f91ce61d7157a42c0497b06de8/ometiff-pyramids/processedMicroscopy/VAN0006-LK-2-85-AF_preIMS_images/VAN0006-LK-2-85-AF_preIMS_registered.ome.tif?token="
              },
              {
                name: "IMS PosMode",
                type: "ome-tiff",
                url: "https://assets.hubmapconsortium.org/be503a021ed910c0918842e318e6efa2/ometiff-pyramids/ometiffs/VAN0006-LK-2-85-IMS_PosMode_multilayer.ome.tif?token="
              },
              {
                name: "IMS NegMode",
                type: "ome-tiff",
                url: "https://assets.hubmapconsortium.org/ca886a630b2038997a4cfbbf4abfd283/ometiff-pyramids/ometiffs/VAN0006-LK-2-85-IMS_NegMode_multilayer.ome.tif?token="
              }
            ],
            usePhysicalSizeScaling: true,
            renderLayers: [
              "PAS",
              "AF",
              "IMS PosMode",
              "IMS NegMode"
            ]
          }
        }
      ]
    }
  ],
  coordinationSpace: {},
  layout: [
    {
      component: "spatial",
      coordinationScopes: {},
      x: 0,
      y: 0,
      w: 9,
      h: 12
    },
    {
      component: "layerController",
      coordinationScopes: {},
      x: 9,
      y: 0,
      w: 3,
      h: 12
    }
  ],
  initStrategy: "auto"
};

// src/demo/view-configs/satija.js
var satijaName = "HBM336.FWTN.636";
var satijaDescription = "Spleen scRNA-seq HuBMAP dataset with cell type annotations generated by the Satija lab and the Seurat v3.1 Label Transfer workflow";
var satija2020 = {
  version: "1.0.0",
  name: satijaName,
  description: satijaDescription,
  public: true,
  datasets: [
    {
      uid: "339952f4-a47f-46dc-9228-18ba2ca256f2",
      name: "339952f4-a47f-46dc-9228-18ba2ca256f2",
      files: [
        {
          type: "cells",
          fileType: "cells.json",
          url: "https://s3.amazonaws.com/vitessce-data/0.0.31/master_release/satija/2dca1bf5832a4102ba780e9e54f6c350.cells.json"
        },
        {
          type: "cell-sets",
          fileType: "cell-sets.json",
          url: "https://s3.amazonaws.com/vitessce-data/0.0.31/master_release/satija/2dca1bf5832a4102ba780e9e54f6c350.cell-sets.json"
        },
        {
          type: "expression-matrix",
          fileType: "expression-matrix.zarr",
          url: "https://vitessce-data.storage.googleapis.com/0.0.31/master_release/satija/2dca1bf5832a4102ba780e9e54f6c350.expression-matrix.zarr"
        }
      ]
    }
  ],
  initStrategy: "auto",
  coordinationSpace: {
    embeddingType: {
      UMAP: "UMAP"
    },
    embeddingZoom: {
      A: 3
    },
    embeddingTargetX: {
      A: 0
    },
    embeddingTargetY: {
      A: 0
    },
    spatialZoom: {},
    spatialTargetX: {},
    spatialTargetY: {},
    geneExpressionColormapRange: {
      A: [0, 0.25]
    }
  },
  layout: [
    {
      component: "cellSets",
      h: 4,
      w: 4,
      x: 4,
      y: 0,
      coordinationScopes: {}
    },
    {
      component: "cellSetSizes",
      h: 4,
      w: 4,
      x: 8,
      y: 0,
      coordinationScopes: {}
    },
    {
      component: "scatterplot",
      h: 4,
      props: {
        mapping: "UMAP",
        view: {
          target: [
            0,
            0,
            0
          ],
          zoom: 3
        }
      },
      w: 4,
      x: 0,
      y: 0,
      coordinationScopes: {
        embeddingType: "UMAP",
        embeddingZoom: "A",
        embeddingTargetX: "A",
        embeddingTargetY: "A"
      }
    },
    {
      component: "heatmap",
      h: 4,
      w: 10,
      x: 0,
      y: 4,
      coordinationScopes: {
        geneExpressionColormapRange: "A"
      }
    },
    {
      component: "description",
      h: 4,
      w: 2,
      x: 10,
      y: 4,
      props: {
        description: `${satijaName}: ${satijaDescription}`
      }
    }
  ]
};

// src/demo/view-configs/rao.js
var justHiglass = {
  public: false,
  initStrategy: "auto",
  version: "1.0.0",
  datasets: [
    {
      uid: "higlass-dataset",
      name: "HiGlass Dataset",
      files: []
    }
  ],
  name: "HiGlass demo",
  coordinationSpace: {
    genomicZoomX: {
      A: 0
    },
    genomicZoomY: {
      A: 0
    },
    genomicTargetX: {
      A: 15499999995e-1
    },
    genomicTargetY: {
      A: 15499999995e-1
    }
  },
  layout: [
    {
      component: "higlass",
      coordinationScopes: {
        genomicZoomX: "A",
        genomicZoomY: "A",
        genomicTargetX: "A",
        genomicTargetY: "A"
      },
      props: {
        hgViewConfig: {
          uid: "aa",
          autocompleteSource: "/api/v1/suggest/?d=OHJakQICQD6gTD7skx4EWA&",
          genomePositionSearchBox: {
            autocompleteServer: "//higlass.io/api/v1",
            autocompleteId: "OHJakQICQD6gTD7skx4EWA",
            chromInfoServer: "//higlass.io/api/v1",
            chromInfoId: "hg19",
            visible: true
          },
          chromInfoPath: "//s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv",
          tracks: {
            top: [
              {
                type: "horizontal-gene-annotations",
                height: 60,
                tilesetUid: "OHJakQICQD6gTD7skx4EWA",
                server: "//higlass.io/api/v1",
                uid: "OHJakQICQD6gTD7skx4EWA",
                options: {
                  name: "Gene Annotations (hg19)",
                  fontSize: 10,
                  labelPosition: "hidden",
                  labelLeftMargin: 0,
                  labelRightMargin: 0,
                  labelTopMargin: 0,
                  labelBottomMargin: 0,
                  minHeight: 24,
                  geneAnnotationHeight: 16,
                  geneLabelPosition: "outside",
                  geneStrandSpacing: 4,
                  showMousePosition: true,
                  mousePositionColor: "#ff00ff",
                  plusStrandColor: "#fdff54",
                  minusStrandColor: "#68bf30",
                  labelColor: "black",
                  trackBorderWidth: 0,
                  trackBorderColor: "black"
                }
              },
              {
                chromInfoPath: "//s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv",
                type: "horizontal-chromosome-labels",
                height: 30,
                uid: "X4e_1DKiQHmyghDa6lLMVA",
                options: {
                  color: "#808080",
                  stroke: "black",
                  fontSize: 12,
                  fontIsLeftAligned: false,
                  showMousePosition: true,
                  mousePositionColor: "#ff00ff"
                }
              }
            ],
            left: [
              {
                type: "vertical-gene-annotations",
                width: 60,
                tilesetUid: "OHJakQICQD6gTD7skx4EWA",
                server: "//higlass.io/api/v1",
                options: {
                  labelPosition: "bottomRight",
                  name: "Gene Annotations (hg19)",
                  fontSize: 10,
                  labelLeftMargin: 0,
                  labelRightMargin: 0,
                  labelTopMargin: 0,
                  labelBottomMargin: 0,
                  minWidth: 24,
                  geneAnnotationHeight: 16,
                  geneLabelPosition: "outside",
                  geneStrandSpacing: 4,
                  showMousePosition: true,
                  mousePositionColor: "#ff00ff",
                  plusStrandColor: "#fdff54",
                  minusStrandColor: "#68bf30",
                  labelColor: "black",
                  trackBorderWidth: 0,
                  trackBorderColor: "black"
                },
                uid: "dqBTMH78Rn6DeSyDBoAEXw"
              },
              {
                chromInfoPath: "//s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv",
                type: "vertical-chromosome-labels",
                width: 30,
                uid: "RHdQK4IRQ7yJeDmKWb7Pcg",
                options: {
                  color: "#777777",
                  stroke: "black",
                  fontSize: 12,
                  fontIsLeftAligned: false,
                  minWidth: 35,
                  showMousePosition: true,
                  mousePositionColor: "#ff00ff"
                }
              }
            ],
            center: [
              {
                uid: "c1",
                type: "combined",
                height: 600,
                contents: [
                  {
                    server: "//higlass.io/api/v1",
                    tilesetUid: "CQMd6V_cRw6iCI_-Unl3PQ",
                    type: "heatmap",
                    options: {
                      maxZoom: null,
                      labelPosition: "bottomRight",
                      name: "Rao et al. (2014) GM12878 MboI (allreps) 1kb",
                      backgroundColor: "black",
                      labelLeftMargin: 0,
                      labelRightMargin: 0,
                      labelTopMargin: 0,
                      labelBottomMargin: 0,
                      labelShowResolution: true,
                      labelShowAssembly: true,
                      labelColor: "#ffffff",
                      labelTextOpacity: 0.5,
                      labelBackgroundColor: "black",
                      labelBackgroundOpacity: 0.01,
                      colorRange: [
                        "#000000",
                        "#222e54",
                        "#448db2",
                        "#68bf30",
                        "#fdff54",
                        "#FFFFFF"
                      ],
                      colorbarBackgroundColor: "black",
                      colorbarBackgroundOpacity: 0.01,
                      colorbarPosition: "topRight",
                      trackBorderWidth: 0,
                      trackBorderColor: "black",
                      heatmapValueScaling: "log",
                      showMousePosition: true,
                      mousePositionColor: "#ff00ff",
                      showTooltip: false,
                      extent: "full",
                      zeroValueColor: null,
                      scaleStartPercent: "0.00000",
                      scaleEndPercent: "1.00000"
                    },
                    height: 500,
                    uid: "GjuZed1ySGW1IzZZqFB9BA",
                    transforms: [
                      {
                        name: "ICE",
                        value: "weight"
                      }
                    ]
                  }
                ],
                options: {}
              }
            ],
            right: [],
            bottom: [],
            whole: [],
            gallery: []
          },
          layout: {
            w: 12,
            h: 12,
            x: 0,
            y: 0,
            moved: false,
            static: false
          }
        }
      },
      x: 0,
      y: 0,
      w: 8,
      h: 2
    },
    {
      component: "higlass",
      coordinationScopes: {
        genomicZoomX: "A",
        genomicZoomY: "A",
        genomicTargetX: "A",
        genomicTargetY: "A"
      },
      props: {
        hgViewConfig: {
          uid: "aa",
          autocompleteSource: "/api/v1/suggest/?d=OHJakQICQD6gTD7skx4EWA&",
          genomePositionSearchBox: {
            autocompleteServer: "//higlass.io/api/v1",
            autocompleteId: "OHJakQICQD6gTD7skx4EWA",
            chromInfoServer: "//higlass.io/api/v1",
            chromInfoId: "hg19",
            visible: true
          },
          chromInfoPath: "//s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv",
          tracks: {
            top: [
              {
                type: "horizontal-gene-annotations",
                height: 60,
                tilesetUid: "OHJakQICQD6gTD7skx4EWA",
                server: "//higlass.io/api/v1",
                uid: "OHJakQICQD6gTD7skx4EWA",
                options: {
                  name: "Gene Annotations (hg19)",
                  fontSize: 10,
                  labelPosition: "hidden",
                  labelLeftMargin: 0,
                  labelRightMargin: 0,
                  labelTopMargin: 0,
                  labelBottomMargin: 0,
                  minHeight: 24,
                  geneAnnotationHeight: 16,
                  geneLabelPosition: "outside",
                  geneStrandSpacing: 4,
                  showMousePosition: true,
                  mousePositionColor: "#ff00ff",
                  plusStrandColor: "#fdff54",
                  minusStrandColor: "#68bf30",
                  labelColor: "black",
                  trackBorderWidth: 0,
                  trackBorderColor: "black"
                }
              },
              {
                chromInfoPath: "//s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv",
                type: "horizontal-chromosome-labels",
                height: 30,
                uid: "X4e_1DKiQHmyghDa6lLMVA",
                options: {
                  color: "#808080",
                  stroke: "black",
                  fontSize: 12,
                  fontIsLeftAligned: false,
                  showMousePosition: true,
                  mousePositionColor: "#ff00ff"
                }
              }
            ],
            left: [
              {
                type: "vertical-gene-annotations",
                width: 60,
                tilesetUid: "OHJakQICQD6gTD7skx4EWA",
                server: "//higlass.io/api/v1",
                options: {
                  labelPosition: "bottomRight",
                  name: "Gene Annotations (hg19)",
                  fontSize: 10,
                  labelLeftMargin: 0,
                  labelRightMargin: 0,
                  labelTopMargin: 0,
                  labelBottomMargin: 0,
                  minWidth: 24,
                  geneAnnotationHeight: 16,
                  geneLabelPosition: "outside",
                  geneStrandSpacing: 4,
                  showMousePosition: true,
                  mousePositionColor: "#ff00ff",
                  plusStrandColor: "#fdff54",
                  minusStrandColor: "#68bf30",
                  labelColor: "black",
                  trackBorderWidth: 0,
                  trackBorderColor: "black"
                },
                uid: "dqBTMH78Rn6DeSyDBoAEXw"
              },
              {
                chromInfoPath: "//s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv",
                type: "vertical-chromosome-labels",
                width: 30,
                uid: "RHdQK4IRQ7yJeDmKWb7Pcg",
                options: {
                  color: "#777777",
                  stroke: "black",
                  fontSize: 12,
                  fontIsLeftAligned: false,
                  minWidth: 35,
                  showMousePosition: true,
                  mousePositionColor: "#ff00ff"
                }
              }
            ],
            center: [
              {
                uid: "c1",
                type: "combined",
                height: 600,
                contents: [
                  {
                    server: "//higlass.io/api/v1",
                    tilesetUid: "CQMd6V_cRw6iCI_-Unl3PQ",
                    type: "heatmap",
                    options: {
                      maxZoom: null,
                      labelPosition: "bottomRight",
                      name: "Rao et al. (2014) GM12878 MboI (allreps) 1kb",
                      backgroundColor: "black",
                      labelLeftMargin: 0,
                      labelRightMargin: 0,
                      labelTopMargin: 0,
                      labelBottomMargin: 0,
                      labelShowResolution: true,
                      labelShowAssembly: true,
                      labelColor: "#ffffff",
                      labelTextOpacity: 0.5,
                      labelBackgroundColor: "black",
                      labelBackgroundOpacity: 0.01,
                      colorRange: [
                        "#000000",
                        "#222e54",
                        "#448db2",
                        "#68bf30",
                        "#fdff54",
                        "#FFFFFF"
                      ],
                      colorbarBackgroundColor: "black",
                      colorbarBackgroundOpacity: 0.01,
                      colorbarPosition: "topRight",
                      trackBorderWidth: 0,
                      trackBorderColor: "black",
                      heatmapValueScaling: "log",
                      showMousePosition: true,
                      mousePositionColor: "#ff00ff",
                      showTooltip: false,
                      extent: "full",
                      zeroValueColor: null,
                      scaleStartPercent: "0.00000",
                      scaleEndPercent: "1.00000"
                    },
                    height: 500,
                    uid: "GjuZed1ySGW1IzZZqFB9BA",
                    transforms: [
                      {
                        name: "ICE",
                        value: "weight"
                      }
                    ]
                  }
                ],
                options: {}
              }
            ],
            right: [],
            bottom: [],
            whole: [],
            gallery: []
          },
          layout: {
            w: 12,
            h: 12,
            x: 0,
            y: 0,
            moved: false,
            static: false
          }
        }
      },
      x: 8,
      y: 0,
      w: 4,
      h: 2
    }
  ]
};

// src/demo/view-configs/tenx.js
var scAtacSeq10xPbmc = {
  version: "1.0.0",
  name: "HiGlass serverless demo with 10x Genomics scATAC-seq 5k PBMC dataset",
  datasets: [
    {
      uid: "10x-genomics-pbmc",
      name: "10x Genomics PBMC",
      files: [
        {
          type: "genomic-profiles",
          fileType: "genomic-profiles.zarr",
          url: "http://higlass-serverless.s3.amazonaws.com/multivec/pbmc_10x_peaks_by_cluster.zarr"
        }
      ]
    }
  ],
  layout: [
    {
      component: "genomicProfiles",
      props: {
        profileTrackUidKey: "file"
      },
      x: 0,
      y: 0,
      w: 8,
      h: 2
    },
    {
      component: "description",
      props: {
        description: "10x Genomics scATAC-seq of 5k PBMCs. Note: the Zarr HiGlass Plugin Datafetcher is not yet optimized. Please be patient while the HiGlass tracks load."
      },
      x: 8,
      y: 0,
      w: 4,
      h: 2
    }
  ],
  initStrategy: "auto"
};

// src/demo/view-configs/blin.js
var blinName = "Blin et al., PLoS Biol 2019";
var blinDescription = "Mouse blastocysts imaged by confocal microscopy";
var blin2019 = {
  version: "1.0.6",
  name: blinName,
  description: blinDescription,
  public: true,
  datasets: [
    {
      uid: "idr0062-blin-nuclearsegmentation/6001240",
      name: "idr0062-blin-nuclearsegmentation/6001240",
      files: [
        {
          type: "raster",
          fileType: "raster.ome-zarr",
          url: "https://minio-dev.openmicroscopy.org/idr/v0.3/idr0062-blin-nuclearsegmentation/6001240.zarr"
        }
      ]
    }
  ],
  initStrategy: "auto",
  layout: [
    {
      component: "spatial",
      x: 0,
      y: 0,
      w: 8,
      h: 12
    },
    {
      component: "layerController",
      x: 8,
      y: 0,
      w: 4,
      h: 6
    },
    {
      component: "description",
      x: 8,
      y: 6,
      w: 4,
      h: 3
    },
    {
      component: "status",
      x: 8,
      y: 9,
      w: 4,
      h: 3
    }
  ]
};

// src/demo/view-configs/ome-ngff-legacy.js
var blinName2 = "179706";
var blinDescription2 = "Example of OME-NGFF v0.1";
var omeNgffLegacy = {
  version: "1.0.6",
  name: blinName2,
  description: blinDescription2,
  public: false,
  datasets: [
    {
      uid: "179706",
      name: "179706",
      files: [
        {
          type: "raster",
          fileType: "raster.ome-zarr",
          url: "https://s3.embassy.ebi.ac.uk/idr/zarr/v0.1/179706.zarr"
        }
      ]
    }
  ],
  coordinationSpace: {
    spatialZoom: {
      A: -0.38015
    },
    spatialTargetX: {
      A: 807.843
    },
    spatialTargetY: {
      A: 537.031
    }
  },
  initStrategy: "auto",
  layout: [
    {
      component: "spatial",
      coordinationScopes: {
        spatialZoom: "A",
        spatialTargetX: "A",
        spatialTargetY: "A"
      },
      x: 0,
      y: 0,
      w: 8,
      h: 12
    },
    {
      component: "layerController",
      x: 8,
      y: 0,
      w: 4,
      h: 6
    },
    {
      component: "description",
      x: 8,
      y: 6,
      w: 4,
      h: 3
    },
    {
      component: "status",
      x: 8,
      y: 9,
      w: 4,
      h: 3
    }
  ]
};

// src/demo/view-configs/hubmap.js
function getConfig() {
  const vc = new vapi.VitessceConfig("HBM485.TBWH.322", "Large intestine snATAC-seq HuBMAP dataset with genomic data visualization powered by HiGlass");
  const baseUrl = "https://vitessce-data.s3.amazonaws.com/0.0.32/master_release/human_intestine_2020_hubmap";
  const dataset = vc.addDataset("HBM485.TBWH.322", "Human large intestine, snATAC-seq").addFile(`${baseUrl}/human_intestine_2020_hubmap.cells.json`, vapi.dt.CELLS, vapi.ft.CELLS_JSON).addFile(`${baseUrl}/human_intestine_2020_hubmap.cell-sets.json`, vapi.dt.CELL_SETS, vapi.ft.CELL_SETS_JSON).addFile(`${baseUrl}/human_intestine_2020_hubmap.genomic-profiles.zarr`, vapi.dt.GENOMIC_PROFILES, vapi.ft.GENOMIC_PROFILES_ZARR);
  const umap = vc.addView(dataset, vapi.cm.SCATTERPLOT, { mapping: "UMAP" });
  const cellSetsManager = vc.addView(dataset, vapi.cm.CELL_SETS);
  const genomicProfiles = vc.addView(dataset, vapi.cm.GENOMIC_PROFILES);
  vc.layout(vapi.vconcat(genomicProfiles, vapi.hconcat(umap, cellSetsManager)));
  return vc.toJSON();
}
var hubmapIntestineSnAtacSeq = getConfig();

// src/demo/view-configs/coordination-types/embeddingZoom.js
function getConfig2() {
  const [vc, dataset] = getCodeluppiViewConfig(`Coordination Type: ${vapi.ct.EMBEDDING_ZOOM}`, "Zoom levels in the scatterplots are coordinated.");
  const v1 = vc.addView(dataset, vapi.cm.SCATTERPLOT, { mapping: "t-SNE" });
  const v2 = vc.addView(dataset, vapi.cm.SCATTERPLOT, { mapping: "t-SNE" });
  vc.linkViews([v1, v2], [vapi.ct.EMBEDDING_ZOOM], [-1]);
  vc.layout(vapi.hconcat(v1, v2));
  return vc.toJSON();
}
var embeddingZoomConfig = getConfig2();

// src/demo/view-configs/coordination-types/embeddingTargetX.js
function getConfig3() {
  const [vc, dataset] = getCodeluppiViewConfig(`Coordination Type: ${vapi.ct.EMBEDDING_TARGET_X}`, "Panning along the x-axis of the scatterplots is coordinated.");
  const v1 = vc.addView(dataset, vapi.cm.SCATTERPLOT, { mapping: "t-SNE" });
  const v2 = vc.addView(dataset, vapi.cm.SCATTERPLOT, { mapping: "t-SNE" });
  vc.linkViews([v1, v2], [vapi.ct.EMBEDDING_TARGET_X], [0]);
  vc.layout(vapi.hconcat(v1, v2));
  return vc.toJSON();
}
var embeddingTargetXConfig = getConfig3();

// src/demo/view-configs/coordination-types/embeddingTargetY.js
function getConfig4() {
  const [vc, dataset] = getCodeluppiViewConfig(`Coordination Type: ${vapi.ct.EMBEDDING_TARGET_Y}`, "Panning along the y-axis of the scatterplots is coordinated.");
  const v1 = vc.addView(dataset, vapi.cm.SCATTERPLOT, { mapping: "t-SNE" });
  const v2 = vc.addView(dataset, vapi.cm.SCATTERPLOT, { mapping: "t-SNE" });
  vc.linkViews([v1, v2], [vapi.ct.EMBEDDING_TARGET_Y], [0]);
  vc.layout(vapi.hconcat(v1, v2));
  return vc.toJSON();
}
var embeddingTargetYConfig = getConfig4();

// src/demo/view-configs/coordination-types/embeddingCellSetPolygonsVisible.js
function getConfig5() {
  const [vc, dataset] = getEngViewConfig(`Coordination Type: ${vapi.ct.EMBEDDING_CELL_SET_POLYGONS_VISIBLE}`, 'Visibility of polygon overlays is coordinated in the top two scatterplots, and independent in the bottom two. Try clicking the gear above each plot and toggling the "Cell Set Polygons Visible" checkboxes.');
  const v1 = vc.addView(dataset, vapi.cm.SCATTERPLOT, {
    mapping: "t-SNE",
    x: 0,
    y: 0,
    w: 5,
    h: 6
  });
  const v2 = vc.addView(dataset, vapi.cm.SCATTERPLOT, {
    mapping: "t-SNE",
    x: 5,
    y: 0,
    w: 5,
    h: 6
  });
  vc.addView(dataset, vapi.cm.SCATTERPLOT, {
    mapping: "t-SNE",
    x: 0,
    y: 6,
    w: 5,
    h: 6
  });
  const v4 = vc.addView(dataset, vapi.cm.SCATTERPLOT, {
    mapping: "t-SNE",
    x: 5,
    y: 6,
    w: 5,
    h: 6
  });
  vc.addView(dataset, vapi.cm.CELL_SETS, {
    x: 10,
    y: 0,
    w: 2,
    h: 12
  });
  vc.linkViews([v1, v2], [vapi.ct.EMBEDDING_CELL_SET_POLYGONS_VISIBLE], [true]);
  vc.linkViews([v4], [vapi.ct.EMBEDDING_CELL_SET_POLYGONS_VISIBLE], [true]);
  return vc.toJSON();
}
var embeddingCellSetPolygonsVisibleConfig = getConfig5();

// src/demo/configs.js
var coordinationTypeConfigs = {
  [vapi.ct.EMBEDDING_ZOOM]: embeddingZoomConfig,
  [vapi.ct.EMBEDDING_TARGET_X]: embeddingTargetXConfig,
  [vapi.ct.EMBEDDING_TARGET_Y]: embeddingTargetYConfig,
  [vapi.ct.EMBEDDING_CELL_SET_POLYGONS_VISIBLE]: embeddingCellSetPolygonsVisibleConfig
};
var configs = __spreadValues({
  "just-scatter": justScatter,
  "just-scatter-expression": justScatterExpression,
  "just-spatial": justSpatial,
  "just-higlass": justHiglass,
  "codeluppi-2018": codeluppi2018,
  "eng-2019": eng2019,
  "wang-2018": wang2018,
  "spraggins-2020": spraggins2020,
  "neumann-2020": neumann2020,
  "satija-2020": satija2020,
  "sn-atac-seq-hubmap-2020": hubmapIntestineSnAtacSeq,
  "sc-atac-seq-10x-genomics-pbmc": scAtacSeq10xPbmc,
  "blin-2019": blin2019,
  "ome-ngff-v0.1": omeNgffLegacy,
  "linnarsson-2018": notPublic(codeluppi2018),
  vanderbilt: notPublic(spraggins2020),
  "dries-2019": notPublic(eng2019)
}, coordinationTypeConfigs);

// src/app/api.js
function listConfigs(showAll) {
  return Object.entries(configs).filter((entry) => showAll || entry[1].public).map(([id, config]) => ({
    id,
    name: config.name,
    description: config.description
  }));
}
function getConfig6(id) {
  return configs[id];
}

// src/app/Welcome.js


// src/version.json
var note = "This file is regenerated by push-demo.sh.";
var branch = "keller-mark/docs-publish-2";
var date = "2021-11-19";
var hash = "6710a228";
var version_default = {
  note,
  branch,
  date,
  hash
};

// src/app/Welcome.js
function DatasetList(props) {
  const { configs: configs2, theme } = props;
  const aClassName = "list-group-item list-group-item-action flex-column align-items-start bg-secondary";
  const links = configs2.map(({ id, name: name2, description: description2 }) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: aClassName,
    key: id
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    href: `?dataset=${id}&theme=${theme}`,
    key: id
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5", null, name2), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", null, description2)), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    href: `?dataset=${id}&theme=${theme}&small`,
    style: { fontSize: "75%" }
  }, name2, " as component")));
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "list-group"
  }, links);
}
function Form(props) {
  const { configs: configs2, theme } = props;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form", {
    method: "GET"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h1", null, "Vitessce"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, "Select a dataset:"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(DatasetList, {
    configs: configs2,
    theme
  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br", null), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, "Or specify URL of configuration:"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "input-group mb-3"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
    type: "text",
    name: "url",
    className: "form-control"
  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
    type: "hidden",
    name: "theme",
    value: theme
  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "input-group-append"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
    className: "btn btn-outline-secondary",
    type: "submit"
  }, "Load"))));
}
function Info() {
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", {
    className: "info-paragraph"
  }, "Vitessce is a visual integration tool for exploration of spatial single cell experiments. Its modular design is optimized for scalable, linked visualizations that support the spatial and non-spatial representation of tissue-, cell- and molecule-level data. Vitessce integrates the ", /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    href: "http://viv.gehlenborglab.org/"
  }, "Viv library"), " to visualize highly multiplexed, high-resolution, high-bit depth image data directly from OME-TIFF files and Bio-Formats-compatible Zarr stores."), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5", {
    className: "info-section-text"
  }, "Contributors"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    href: "https://github.com/keller-mark"
  }, "Mark Keller")), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    href: "https://github.com/mccalluc"
  }, "Chuck McCallum")), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    href: "https://github.com/ilan-gold"
  }, "Ilan Gold")), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    href: "https://github.com/manzt"
  }, "Trevor Manz")), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    href: "https://github.com/thomaslchan"
  }, "Tos Chan")), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    href: "https://github.com/jkmarx"
  }, "Jennifer Marx")), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    href: "https://github.com/pkharchenko"
  }, "Peter Kharchenko")), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    href: "https://github.com/ngehlenborg"
  }, "Nils Gehlenborg"))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5", {
    className: "info-section-text"
  }, "Source Code"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    href: "https://github.com/vitessce/vitessce"
  }, "GitHub")), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
    href: "https://www.npmjs.com/package/vitessce"
  }, "NPM"))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5", {
    className: "info-section-text"
  }, "Funding"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", null, "NIH/OD Human BioMolecular Atlas Program (HuBMAP) (OT2OD026677, PI: Nils Gehlenborg)."), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", null, "NIH/NLM Biomedical Informatics and Data Science Research Training Program (T15LM007092, PI: Nils Gehlenborg)"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", null, "Harvard Stem Cell Institute (CF-0014-17-03, PI: Nils Gehlenborg)")), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", {
    className: "info-section-text"
  }, "This deployment: branch=", version_default.branch, " | hash=", version_default.hash, " | date=", version_default.date));
}
function Welcome(props) {
  const { configs: configs2, theme } = props;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: `vitessce-container vitessce-theme-${theme} welcome-container`
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "react-grid-layout container-fluid",
    style: { height: "max(100vh, 100%)" }
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "row"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "welcome-col-left"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "card card-body bg-primary"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Form, {
    configs: configs2,
    theme
  }))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "welcome-col-right"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "card card-body bg-primary"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Info, null))))));
}

// src/app/Warning.js

function Warning(props) {
  const {
    title: title17,
    preformatted,
    unformatted,
    theme
  } = props;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: `vitessce-container vitessce-theme-${theme}`
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "warning-layout container-fluid"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "row"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "col-12"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: PRIMARY_CARD
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h1", null, title17), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("pre", null, preformatted), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, unformatted))))));
}

// src/app/Vitessce.js




// src/app/CallbackPublisher.js


// src/app/view-config-versions.js


// src/schemas/config-0.1.0.schema.json
var $schema9 = "http://json-schema.org/draft-07/schema#";
var $id9 = "https://github.com/vitessce/vitessce/#dataset";
var title9 = "Vitessce data set";
var type9 = "object";
var definitions9 = {
  components: {
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["component", "x", "y"],
      properties: {
        component: { type: "string" },
        props: { type: "object" },
        x: { type: "integer" },
        y: { type: "integer" },
        w: { type: "integer" },
        h: { type: "integer" }
      }
    }
  },
  requestInit: {
    type: "object",
    additionalProperties: false,
    required: [],
    properties: {
      method: {
        type: "string"
      },
      headers: {
        type: "object"
      },
      body: {
        type: "string"
      },
      mode: {
        type: "string"
      },
      credentials: {
        type: "string"
      },
      cache: {
        type: "string"
      },
      redirect: {
        type: "string"
      },
      referrer: {
        type: "string"
      },
      integrity: {
        type: "string"
      }
    }
  }
};
var additionalProperties3 = false;
var required3 = ["version", "name", "layers"];
var properties3 = {
  name: { type: "string" },
  public: { type: "boolean" },
  description: { type: "string" },
  layers: {
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["name", "type", "fileType", "url"],
      properties: {
        name: { type: "string" },
        type: { type: "string" },
        fileType: { type: "string" },
        url: { type: "string" },
        requestInit: { $ref: "#/definitions/requestInit" }
      }
    }
  },
  staticLayout: { $ref: "#/definitions/components" },
  version: {
    type: "string",
    enum: ["0.1.0"]
  }
};
var config_0_1_0_schema_default = {
  $schema: $schema9,
  $id: $id9,
  title: title9,
  type: type9,
  definitions: definitions9,
  additionalProperties: additionalProperties3,
  required: required3,
  properties: properties3
};

// src/schemas/config-1.0.0.schema.json
var $schema10 = "http://json-schema.org/draft-07/schema#";
var $id10 = "https://github.com/vitessce/vitessce/#dataset";
var title10 = "Vitessce data set";
var type10 = "object";
var definitions10 = {
  components: {
    description: "The layout array defines the views, or components, rendered in the grid.",
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["component", "x", "y"],
      properties: {
        component: {
          type: "string",
          description: "Specify a component using a name defined in the component registry."
        },
        props: {
          type: "object",
          description: "Extra prop values for the component."
        },
        x: { type: "integer" },
        y: { type: "integer" },
        w: { type: "integer" },
        h: { type: "integer" },
        coordinationScopes: {
          type: "object",
          description: "Component-level coordination scope mappings define which coordination object values a particular component can read and write, for each coordination type.",
          additionalProperties: false,
          required: [],
          properties: {
            dataset: { type: "string" },
            embeddingType: { type: "string" },
            embeddingZoom: { type: "string" },
            embeddingRotation: { type: "string" },
            embeddingTargetX: { type: "string" },
            embeddingTargetY: { type: "string" },
            embeddingTargetZ: { type: "string" },
            embeddingCellSetPolygonsVisible: { type: "string" },
            embeddingCellSetLabelsVisible: { type: "string" },
            embeddingCellSetLabelSize: { type: "string" },
            embeddingCellRadius: { type: "string" },
            spatialZoom: { type: "string" },
            spatialRotation: { type: "string" },
            spatialTargetX: { type: "string" },
            spatialTargetY: { type: "string" },
            spatialTargetZ: { type: "string" },
            heatmapZoomX: { type: "string" },
            heatmapZoomY: { type: "string" },
            heatmapTargetX: { type: "string" },
            heatmapTargetY: { type: "string" },
            cellFilter: { type: "string" },
            cellHighlight: { type: "string" },
            cellSetSelection: { type: "string" },
            cellSetHighlight: { type: "string" },
            cellSetColor: { type: "string" },
            geneFilter: { type: "string" },
            geneHighlight: { type: "string" },
            geneSelection: { type: "string" },
            geneExpressionTransform: { type: "string" },
            geneExpressionColormap: { type: "string" },
            geneExpressionColormapRange: { type: "string" },
            cellColorEncoding: { type: "string" },
            spatialLayers: { type: "string" },
            genomicZoomX: { type: "string" },
            genomicZoomY: { type: "string" },
            genomicTargetX: { type: "string" },
            genomicTargetY: { type: "string" },
            additionalCellSets: { type: "string" },
            moleculeHighlight: { type: "string" }
          }
        }
      }
    }
  },
  annDataCellSets: {
    type: "array",
    description: "Array of cell set configuration, following closely the conventions of the tabular schema",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["groupName", "setName"],
      properties: {
        groupName: {
          type: "string",
          description: "The display name for the set, like 'Cell Type' or 'Louvain.'"
        },
        setName: {
          type: "string",
          description: "The location in the AnnData store for the set, like 'obs/louvain' or 'obs/celltype.'"
        }
      }
    }
  },
  annDataCells: {
    type: "object",
    description: "The properties of this object are the configuration for how to layout scatterplots and spatial information",
    minProperties: 1,
    additionalProperties: false,
    required: [],
    properties: {
      xy: {
        type: "string",
        description: "The location in the AnnData store of cell centroids, like 'obsm/X_centroids.'"
      },
      poly: {
        type: "string",
        description: "The location in the AnnData store of cell polygon outlines, like 'obsm/X_polygons.'"
      },
      factors: {
        type: "array",
        description: "List of locations in the AnnData store of cell sets, like 'obs/louvain'",
        items: {
          type: "string"
        }
      },
      mappings: {
        patternProperties: {
          ".": {
            type: "object",
            description: "An object containing key-values for mappings like { UMAP: { key: 'obsm/X_umap', dims: [0, 1] } }.",
            additionalProperties: false,
            required: ["key"],
            properties: {
              key: {
                type: "string",
                description: "Where to look in the AnnData store for this mapping, like 'obsm/X_umap.'"
              },
              dims: {
                type: "array",
                description: "Which indices of the obsm object to take for a scatterplot, allowing for, for example, different PCs from obsm/X_pca",
                minItems: 2,
                maxItems: 2,
                items: { type: "number" }
              }
            }
          }
        }
      }
    }
  },
  annDataExpressionMatrix: {
    type: "object",
    description: "The properties of this object are the configuration for how to fetch the cell x genes matrix",
    additionalProperties: false,
    required: ["matrix"],
    properties: {
      matrix: {
        type: "string",
        description: "The location in the AnnData store of the cell x gene matrix, like 'obsm/hvg_subset.' or 'X'"
      },
      geneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the genes if using a subset of the data, like 'var.highly_variable.' if the matrix comes from 'obsm/hvg_subset.'"
      },
      matrixGeneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the matrix data (used in heatmap and histogram), like 'var.highly_variable.''"
      }
    }
  },
  requestInit: {
    type: "object",
    description: "The properties of this object correspond to the parameters of the JavaScript fetch() function.",
    additionalProperties: false,
    required: [],
    properties: {
      method: {
        type: "string"
      },
      headers: {
        type: "object"
      },
      body: {
        type: "string"
      },
      mode: {
        type: "string"
      },
      credentials: {
        type: "string"
      },
      cache: {
        type: "string"
      },
      redirect: {
        type: "string"
      },
      referrer: {
        type: "string"
      },
      integrity: {
        type: "string"
      }
    }
  },
  rasterLayer: {
    description: "The properties of this object are the rendering settings for the raster layer.",
    additionalProperties: false,
    required: ["channels", "colormap", "index", "opacity", "type"],
    properties: {
      channels: {
        type: "array",
        items: {
          type: "object",
          additionalProperties: false,
          required: ["selection"],
          properties: {
            color: {
              type: "array",
              items: { type: "number" },
              description: "The color to use when rendering this channel under the null colormap."
            },
            selection: {
              type: "object",
              description: "Determines the channel selection, e.g. some Z and time slice."
            },
            slider: {
              type: "array",
              items: { type: "number" },
              description: "Determines the range for color mapping."
            },
            visible: {
              type: "boolean",
              description: "Determines whether this channel of the layer will be rendered in the spatial component."
            }
          }
        }
      },
      colormap: {
        oneOf: [
          {
            type: "string",
            description: "The name of the colormap to use for this layer."
          },
          {
            type: "null",
            description: "Use the solid color definitions."
          }
        ]
      },
      transparentColor: {
        oneOf: [
          {
            type: "array",
            minItems: 3,
            maxItems: 3,
            items: {
              type: "number",
              description: "One of R G or B (0 - 255)."
            },
            description: "Determines the color to be set to opacity 0"
          },
          {
            type: "null",
            description: "No selection."
          }
        ]
      },
      index: {
        type: "number",
        description: "The index of the layer among the array of layers available in the image file."
      },
      modelMatrix: {
        oneOf: [
          {
            type: "array",
            minItems: 16,
            maxItems: 16,
            description: "transformation matrix for this layer"
          },
          {
            type: "null",
            description: "Use no transformation."
          }
        ]
      },
      opacity: {
        type: "number"
      },
      domainType: {
        type: "string",
        enum: ["Full", "Min/Max"],
        description: "Determines the extent of the channel slider input element in the layer controller."
      },
      type: {
        type: "string",
        enum: ["raster"]
      }
    }
  },
  moleculesLayer: {
    description: "The properties of this object are the rendering settings for the molecules layer.",
    additionalProperties: false,
    required: ["visible", "radius", "opacity", "type"],
    properties: {
      visible: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      },
      type: {
        type: "string",
        enum: ["molecules"]
      }
    }
  },
  cellsLayer: {
    description: "The properties of this object are the rendering settings for the cells layer.",
    additionalProperties: false,
    required: ["visible", "stroked", "radius", "opacity", "type"],
    properties: {
      visible: {
        type: "boolean"
      },
      stroked: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      },
      type: {
        type: "string",
        enum: ["cells"]
      }
    }
  },
  neighborhoodsLayer: {
    description: "The properties of this object are the rendering settings for the neighborhoods layer.",
    additionalProperties: false,
    required: ["visible", "type"],
    properties: {
      visible: {
        type: "boolean"
      },
      type: {
        type: "string",
        enum: ["neighborhoods"]
      }
    }
  },
  spatialLayers: {
    type: "array",
    description: "Array of Spatial Layers",
    items: {
      oneOf: [
        {
          $ref: "#/definitions/rasterLayer"
        },
        {
          $ref: "#/definitions/cellsLayer"
        },
        {
          $ref: "#/definitions/moleculesLayer"
        },
        {
          $ref: "#/definitions/neighborhoodsLayer"
        }
      ]
    }
  }
};
var additionalProperties4 = false;
var required4 = ["version", "name", "datasets", "layout", "initStrategy"];
var properties4 = {
  name: { type: "string" },
  public: { type: "boolean" },
  description: { type: "string" },
  datasets: {
    type: "array",
    description: "The datasets array defines groups of files, where the files within each dataset reference the same entities (cells, genes, cell sets, etc).",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["uid", "files"],
      properties: {
        uid: { type: "string" },
        name: { type: "string" },
        description: { type: "string" },
        files: {
          type: "array",
          items: {
            type: "object",
            additionalProperties: false,
            required: ["type", "fileType"],
            properties: {
              name: { type: "string" },
              type: { type: "string" },
              fileType: { type: "string" },
              url: { type: "string" },
              options: { oneOf: [{ $ref: "#/definitions/annDataCellSets" }, { $ref: "https://github.com/vitessce/vitessce/#raster" }, { $ref: "#/definitions/annDataCells" }, { $ref: "#/definitions/annDataExpressionMatrix" }] },
              requestInit: { $ref: "#/definitions/requestInit" }
            }
          }
        }
      }
    }
  },
  coordinationSpace: {
    type: "object",
    description: "The coordination space stores the values for each scope of each coordination object.",
    additionalProperties: false,
    required: [],
    properties: {
      dataset: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetZ: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingType: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingCellSetPolygonsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelSize: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingCellRadius: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetZ: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialLayers: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/spatialLayers" }
            ]
          }
        }
      },
      heatmapZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      cellFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cells will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      cellHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto cell set initialization is enabled, cell set selections will be automatically initialized."
              },
              { type: "array" }
            ]
          }
        }
      },
      cellSetHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell sets will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetColor: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, cell set colors will be automatically initialized."
              },
              {
                type: "array",
                items: {
                  type: "object",
                  additionalProperties: false,
                  required: ["path", "color"],
                  properties: {
                    path: {
                      type: "array",
                      items: { type: "string" }
                    },
                    color: {
                      type: "array",
                      items: { type: "number" }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      cellColorEncoding: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      geneSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneExpressionTransform: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "string", pattern: "log1p" }
            ]
          }
        }
      },
      geneExpressionColormap: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneExpressionColormapRange: {
        type: "object",
        patternProperties: {
          ".": { type: "array", items: { type: "number" } }
        }
      },
      genomicZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      additionalCellSets: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              {
                $ref: "https://github.com/vitessce/vitessce/#cell-sets"
              }
            ]
          }
        }
      },
      moleculeHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no molecule will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      }
    }
  },
  layout: { $ref: "#/definitions/components" },
  initStrategy: {
    type: "string",
    enum: ["none", "auto"],
    description: "The initialization strategy determines how missing coordination objects and coordination scope mappings are initially filled in."
  },
  version: {
    type: "string",
    enum: ["1.0.0"],
    description: "The schema version for the view config."
  }
};
var config_1_0_0_schema_default = {
  $schema: $schema10,
  $id: $id10,
  title: title10,
  type: type10,
  definitions: definitions10,
  additionalProperties: additionalProperties4,
  required: required4,
  properties: properties4
};

// src/schemas/config-1.0.1.schema.json
var $schema11 = "http://json-schema.org/draft-07/schema#";
var $id11 = "https://github.com/vitessce/vitessce/#dataset";
var title11 = "Vitessce data set";
var type11 = "object";
var definitions11 = {
  components: {
    description: "The layout array defines the views, or components, rendered in the grid.",
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["component", "x", "y"],
      properties: {
        component: {
          type: "string",
          description: "Specify a component using a name defined in the component registry."
        },
        props: {
          type: "object",
          description: "Extra prop values for the component."
        },
        x: { type: "integer" },
        y: { type: "integer" },
        w: { type: "integer" },
        h: { type: "integer" },
        coordinationScopes: {
          type: "object",
          description: "Component-level coordination scope mappings define which coordination object values a particular component can read and write, for each coordination type.",
          additionalProperties: false,
          required: [],
          properties: {
            dataset: { type: "string" },
            embeddingType: { type: "string" },
            embeddingZoom: { type: "string" },
            embeddingRotation: { type: "string" },
            embeddingTargetX: { type: "string" },
            embeddingTargetY: { type: "string" },
            embeddingTargetZ: { type: "string" },
            embeddingCellSetPolygonsVisible: { type: "string" },
            embeddingCellSetLabelsVisible: { type: "string" },
            embeddingCellSetLabelSize: { type: "string" },
            embeddingCellRadius: { type: "string" },
            spatialZoom: { type: "string" },
            spatialRotation: { type: "string" },
            spatialTargetX: { type: "string" },
            spatialTargetY: { type: "string" },
            spatialTargetZ: { type: "string" },
            spatialRotationX: { type: "string" },
            spatialRotationY: { type: "string" },
            spatialRotationZ: { type: "string" },
            spatialRotationOrbit: { type: "string" },
            spatialOrbitAxis: { type: "string" },
            spatialAxisFixed: { type: "string" },
            heatmapZoomX: { type: "string" },
            heatmapZoomY: { type: "string" },
            heatmapTargetX: { type: "string" },
            heatmapTargetY: { type: "string" },
            cellFilter: { type: "string" },
            cellHighlight: { type: "string" },
            cellSetSelection: { type: "string" },
            cellSetHighlight: { type: "string" },
            cellSetColor: { type: "string" },
            geneFilter: { type: "string" },
            geneHighlight: { type: "string" },
            geneSelection: { type: "string" },
            geneExpressionTransform: { type: "string" },
            geneExpressionColormap: { type: "string" },
            geneExpressionColormapRange: { type: "string" },
            cellColorEncoding: { type: "string" },
            spatialRasterLayers: { type: "string" },
            spatialCellsLayer: { type: "string" },
            spatialMoleculesLayer: { type: "string" },
            spatialNeighborhoodsLayer: { type: "string" },
            genomicZoomX: { type: "string" },
            genomicZoomY: { type: "string" },
            genomicTargetX: { type: "string" },
            genomicTargetY: { type: "string" },
            additionalCellSets: { type: "string" },
            moleculeHighlight: { type: "string" }
          }
        }
      }
    }
  },
  annDataCellSets: {
    type: "array",
    description: "Array of cell set configuration, following closely the conventions of the tabular schema",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["groupName", "setName"],
      properties: {
        groupName: {
          type: "string",
          description: "The display name for the set, like 'Cell Type' or 'Louvain.'"
        },
        setName: {
          type: "string",
          description: "The location in the AnnData store for the set, like 'obs/louvain' or 'obs/celltype.'"
        }
      }
    }
  },
  annDataCells: {
    type: "object",
    description: "The properties of this object are the configuration for how to layout scatterplots and spatial information",
    minProperties: 1,
    additionalProperties: false,
    required: [],
    properties: {
      xy: {
        type: "string",
        description: "The location in the AnnData store of cell centroids, like 'obsm/X_centroids.'"
      },
      poly: {
        type: "string",
        description: "The location in the AnnData store of cell polygon outlines, like 'obsm/X_polygons.'"
      },
      factors: {
        type: "array",
        description: "List of locations in the AnnData store of cell sets, like 'obs/louvain'",
        items: {
          type: "string"
        }
      },
      mappings: {
        patternProperties: {
          ".": {
            type: "object",
            description: "An object containing key-values for mappings like { UMAP: { key: 'obsm/X_umap', dims: [0, 1] } }.",
            additionalProperties: false,
            required: ["key"],
            properties: {
              key: {
                type: "string",
                description: "Where to look in the AnnData store for this mapping, like 'obsm/X_umap.'"
              },
              dims: {
                type: "array",
                description: "Which indices of the obsm object to take for a scatterplot, allowing for, for example, different PCs from obsm/X_pca",
                minItems: 2,
                maxItems: 2,
                items: { type: "number" }
              }
            }
          }
        }
      }
    }
  },
  annDataExpressionMatrix: {
    type: "object",
    description: "The properties of this object are the configuration for how to fetch the cell x genes matrix",
    additionalProperties: false,
    required: ["matrix"],
    properties: {
      matrix: {
        type: "string",
        description: "The location in the AnnData store of the cell x gene matrix, like 'obsm/hvg_subset.' or 'X'"
      },
      geneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the genes if using a subset of the data, like 'var.highly_variable.' if the matrix comes from 'obsm/hvg_subset.'"
      },
      matrixGeneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the matrix data (used in heatmap and histogram), like 'var.highly_variable.''"
      }
    }
  },
  requestInit: {
    type: "object",
    description: "The properties of this object correspond to the parameters of the JavaScript fetch() function.",
    additionalProperties: false,
    required: [],
    properties: {
      method: {
        type: "string"
      },
      headers: {
        type: "object"
      },
      body: {
        type: "string"
      },
      mode: {
        type: "string"
      },
      credentials: {
        type: "string"
      },
      cache: {
        type: "string"
      },
      redirect: {
        type: "string"
      },
      referrer: {
        type: "string"
      },
      integrity: {
        type: "string"
      }
    }
  },
  rasterLayer: {
    description: "The properties of this object are the rendering settings for the raster layer.",
    additionalProperties: false,
    required: ["channels", "colormap", "index", "opacity"],
    properties: {
      channels: {
        type: "array",
        items: {
          type: "object",
          additionalProperties: false,
          required: ["selection"],
          properties: {
            color: {
              type: "array",
              items: { type: "number" },
              description: "The color to use when rendering this channel under the null colormap."
            },
            selection: {
              type: "object",
              description: "Determines the channel selection, e.g. some Z and time slice."
            },
            slider: {
              type: "array",
              items: { type: "number" },
              description: "Determines the range for color mapping."
            },
            visible: {
              type: "boolean",
              description: "Determines whether this channel of the layer will be rendered in the spatial component."
            }
          }
        }
      },
      colormap: {
        oneOf: [
          {
            type: "string",
            description: "The name of the colormap to use for this layer."
          },
          {
            type: "null",
            description: "Use the solid color definitions."
          }
        ]
      },
      transparentColor: {
        oneOf: [
          {
            type: "array",
            minItems: 3,
            maxItems: 3,
            items: {
              type: "number",
              description: "One of R G or B (0 - 255)."
            },
            description: "Determines the color to be set to opacity 0"
          },
          {
            type: "null",
            description: "No selection."
          }
        ]
      },
      index: {
        type: "number",
        description: "The index of the layer among the array of layers available in the image file."
      },
      opacity: {
        type: "number"
      },
      modelMatrix: {
        oneOf: [
          {
            type: "array",
            minItems: 16,
            maxItems: 16,
            description: "transformation matrix for this layer"
          },
          {
            type: "null",
            description: "Use no transformation."
          }
        ]
      },
      domainType: {
        type: "string",
        enum: ["Full", "Min/Max"],
        description: "Determines the extent of the channel slider input element in the layer controller."
      },
      resolution: {
        type: "number",
        description: "Resolution of 3D volumetric rendering"
      },
      xSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      renderingMode: {
        type: "string",
        description: "Rendering mode of 3D volumetric rendering"
      },
      ySlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      zSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      type: {
        type: "string"
      },
      use3d: {
        type: "boolean"
      },
      visible: {
        type: "boolean",
        description: "Determines whether this entire layer will be rendered in the spatial component."
      }
    }
  },
  moleculesLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the molecules layer.",
    additionalProperties: false,
    required: ["visible", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  cellsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the cells layer.",
    additionalProperties: false,
    required: ["visible", "stroked", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      stroked: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  neighborhoodsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the neighborhoods layer.",
    additionalProperties: false,
    required: ["visible"],
    properties: {
      visible: {
        type: "boolean"
      }
    }
  },
  spatialRasterLayers: {
    type: "array",
    description: "Array of Spatial Layers",
    items: {
      $ref: "#/definitions/rasterLayer"
    }
  }
};
var additionalProperties5 = false;
var required5 = ["version", "name", "datasets", "layout", "initStrategy"];
var properties5 = {
  name: { type: "string" },
  public: { type: "boolean" },
  description: { type: "string" },
  datasets: {
    type: "array",
    description: "The datasets array defines groups of files, where the files within each dataset reference the same entities (cells, genes, cell sets, etc).",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["uid", "files"],
      properties: {
        uid: { type: "string" },
        name: { type: "string" },
        description: { type: "string" },
        files: {
          type: "array",
          items: {
            type: "object",
            additionalProperties: false,
            required: ["type", "fileType"],
            properties: {
              name: { type: "string" },
              type: { type: "string" },
              fileType: { type: "string" },
              url: { type: "string" },
              options: { oneOf: [{ $ref: "#/definitions/annDataCellSets" }, { $ref: "https://github.com/vitessce/vitessce/#raster" }, { $ref: "#/definitions/annDataCells" }, { $ref: "#/definitions/annDataExpressionMatrix" }] },
              requestInit: { $ref: "#/definitions/requestInit" }
            }
          }
        }
      }
    }
  },
  coordinationSpace: {
    type: "object",
    description: "The coordination space stores the values for each scope of each coordination object.",
    additionalProperties: false,
    required: [],
    properties: {
      dataset: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetZ: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingType: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingCellSetPolygonsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelSize: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingCellRadius: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationOrbit: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialOrbitAxis: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "string" }
            ]
          }
        }
      },
      spatialAxisFixed: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "Whether or not to have a fixed axis for the camera. Only useful for 3D viewing."
              },
              { type: "boolean" }
            ]
          }
        }
      },
      spatialRasterLayers: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/spatialRasterLayers" }
            ]
          }
        }
      },
      spatialCellsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/cellsLayer" }
            ]
          }
        }
      },
      spatialNeighborhoodsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/neighborhoodsLayer" }
            ]
          }
        }
      },
      spatialMoleculesLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/moleculesLayer" }
            ]
          }
        }
      },
      heatmapZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      cellFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cells will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      cellHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto cell set initialization is enabled, cell set selections will be automatically initialized."
              },
              { type: "array" }
            ]
          }
        }
      },
      cellSetHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell sets will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetColor: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, cell set colors will be automatically initialized."
              },
              {
                type: "array",
                items: {
                  type: "object",
                  additionalProperties: false,
                  required: ["path", "color"],
                  properties: {
                    path: {
                      type: "array",
                      items: { type: "string" }
                    },
                    color: {
                      type: "array",
                      items: { type: "number" }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      cellColorEncoding: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      geneSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneExpressionTransform: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "string", pattern: "log1p" }
            ]
          }
        }
      },
      geneExpressionColormap: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneExpressionColormapRange: {
        type: "object",
        patternProperties: {
          ".": { type: "array", items: { type: "number" } }
        }
      },
      genomicZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      additionalCellSets: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              {
                $ref: "https://github.com/vitessce/vitessce/#cell-sets"
              }
            ]
          }
        }
      },
      moleculeHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no molecule will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      }
    }
  },
  layout: { $ref: "#/definitions/components" },
  initStrategy: {
    type: "string",
    enum: ["none", "auto"],
    description: "The initialization strategy determines how missing coordination objects and coordination scope mappings are initially filled in."
  },
  version: {
    type: "string",
    enum: ["1.0.1"],
    description: "The schema version for the view config."
  }
};
var config_1_0_1_schema_default = {
  $schema: $schema11,
  $id: $id11,
  title: title11,
  type: type11,
  definitions: definitions11,
  additionalProperties: additionalProperties5,
  required: required5,
  properties: properties5
};

// src/schemas/config-1.0.2.schema.json
var $schema12 = "http://json-schema.org/draft-07/schema#";
var $id12 = "https://github.com/vitessce/vitessce/#dataset";
var title12 = "Vitessce data set";
var type12 = "object";
var definitions12 = {
  components: {
    description: "The layout array defines the views, or components, rendered in the grid.",
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["component", "x", "y"],
      properties: {
        component: {
          type: "string",
          description: "Specify a component using a name defined in the component registry."
        },
        props: {
          type: "object",
          description: "Extra prop values for the component."
        },
        x: { type: "integer" },
        y: { type: "integer" },
        w: { type: "integer" },
        h: { type: "integer" },
        coordinationScopes: {
          type: "object",
          description: "Component-level coordination scope mappings define which coordination object values a particular component can read and write, for each coordination type.",
          additionalProperties: false,
          required: [],
          properties: {
            dataset: { type: "string" },
            embeddingType: { type: "string" },
            embeddingZoom: { type: "string" },
            embeddingRotation: { type: "string" },
            embeddingTargetX: { type: "string" },
            embeddingTargetY: { type: "string" },
            embeddingTargetZ: { type: "string" },
            embeddingCellSetPolygonsVisible: { type: "string" },
            embeddingCellSetLabelsVisible: { type: "string" },
            embeddingCellSetLabelSize: { type: "string" },
            embeddingCellRadius: { type: "string" },
            spatialZoom: { type: "string" },
            spatialRotation: { type: "string" },
            spatialTargetX: { type: "string" },
            spatialTargetY: { type: "string" },
            spatialTargetZ: { type: "string" },
            spatialRotationX: { type: "string" },
            spatialRotationY: { type: "string" },
            spatialRotationZ: { type: "string" },
            spatialRotationOrbit: { type: "string" },
            spatialOrbitAxis: { type: "string" },
            spatialAxisFixed: { type: "string" },
            heatmapZoomX: { type: "string" },
            heatmapZoomY: { type: "string" },
            heatmapTargetX: { type: "string" },
            heatmapTargetY: { type: "string" },
            cellFilter: { type: "string" },
            cellHighlight: { type: "string" },
            cellSetSelection: { type: "string" },
            cellSetHighlight: { type: "string" },
            cellSetColor: { type: "string" },
            geneFilter: { type: "string" },
            geneHighlight: { type: "string" },
            geneSelection: { type: "string" },
            geneExpressionTransform: { type: "string" },
            geneExpressionColormap: { type: "string" },
            geneExpressionColormapRange: { type: "string" },
            cellColorEncoding: { type: "string" },
            spatialRasterLayers: { type: "string" },
            spatialCellsLayer: { type: "string" },
            spatialMoleculesLayer: { type: "string" },
            spatialNeighborhoodsLayer: { type: "string" },
            genomicZoomX: { type: "string" },
            genomicZoomY: { type: "string" },
            genomicTargetX: { type: "string" },
            genomicTargetY: { type: "string" },
            additionalCellSets: { type: "string" },
            moleculeHighlight: { type: "string" }
          }
        }
      }
    }
  },
  annDataCellSets: {
    type: "array",
    description: "Array of cell set configuration, following closely the conventions of the tabular schema",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["groupName", "setName"],
      properties: {
        groupName: {
          type: "string",
          description: "The display name for the set, like 'Cell Type' or 'Louvain.'"
        },
        setName: {
          type: "string",
          description: "The location in the AnnData store for the set, like 'obs/louvain' or 'obs/celltype.'"
        }
      }
    }
  },
  annDataCells: {
    type: "object",
    description: "The properties of this object are the configuration for how to layout scatterplots and spatial information",
    minProperties: 1,
    additionalProperties: false,
    required: [],
    properties: {
      xy: {
        type: "string",
        description: "The location in the AnnData store of cell centroids, like 'obsm/X_centroids.'"
      },
      poly: {
        type: "string",
        description: "The location in the AnnData store of cell polygon outlines, like 'obsm/X_polygons.'"
      },
      factors: {
        type: "array",
        description: "List of locations in the AnnData store of cell sets, like 'obs/louvain'",
        items: {
          type: "string"
        }
      },
      mappings: {
        patternProperties: {
          ".": {
            type: "object",
            description: "An object containing key-values for mappings like { UMAP: { key: 'obsm/X_umap', dims: [0, 1] } }.",
            additionalProperties: false,
            required: ["key"],
            properties: {
              key: {
                type: "string",
                description: "Where to look in the AnnData store for this mapping, like 'obsm/X_umap.'"
              },
              dims: {
                type: "array",
                description: "Which indices of the obsm object to take for a scatterplot, allowing for, for example, different PCs from obsm/X_pca",
                minItems: 2,
                maxItems: 2,
                items: { type: "number" }
              }
            }
          }
        }
      }
    }
  },
  annDataExpressionMatrix: {
    type: "object",
    description: "The properties of this object are the configuration for how to fetch the cell x genes matrix",
    additionalProperties: false,
    required: ["matrix"],
    properties: {
      matrix: {
        type: "string",
        description: "The location in the AnnData store of the cell x gene matrix, like 'obsm/hvg_subset.' or 'X'"
      },
      geneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the genes if using a subset of the data, like 'var.highly_variable.' if the matrix comes from 'obsm/hvg_subset.'"
      },
      matrixGeneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the matrix data (used in heatmap and histogram), like 'var.highly_variable.''"
      }
    }
  },
  requestInit: {
    type: "object",
    description: "The properties of this object correspond to the parameters of the JavaScript fetch() function.",
    additionalProperties: false,
    required: [],
    properties: {
      method: {
        type: "string"
      },
      headers: {
        type: "object"
      },
      body: {
        type: "string"
      },
      mode: {
        type: "string"
      },
      credentials: {
        type: "string"
      },
      cache: {
        type: "string"
      },
      redirect: {
        type: "string"
      },
      referrer: {
        type: "string"
      },
      integrity: {
        type: "string"
      }
    }
  },
  rasterLayer: {
    description: "The properties of this object are the rendering settings for the raster layer.",
    additionalProperties: false,
    required: ["channels", "colormap", "index", "opacity"],
    properties: {
      channels: {
        type: "array",
        items: {
          type: "object",
          additionalProperties: false,
          required: ["selection"],
          properties: {
            color: {
              type: "array",
              items: { type: "number" },
              description: "The color to use when rendering this channel under the null colormap."
            },
            selection: {
              type: "object",
              description: "Determines the channel selection, e.g. some Z and time slice."
            },
            slider: {
              type: "array",
              items: { type: "number" },
              description: "Determines the range for color mapping."
            },
            visible: {
              type: "boolean",
              description: "Determines whether this channel of the layer will be rendered in the spatial component."
            }
          }
        }
      },
      colormap: {
        oneOf: [
          {
            type: "string",
            description: "The name of the colormap to use for this layer."
          },
          {
            type: "null",
            description: "Use the solid color definitions."
          }
        ]
      },
      transparentColor: {
        oneOf: [
          {
            type: "array",
            minItems: 3,
            maxItems: 3,
            items: {
              type: "number",
              description: "One of R G or B (0 - 255)."
            },
            description: "Determines the color to be set to opacity 0"
          },
          {
            type: "null",
            description: "No selection."
          }
        ]
      },
      index: {
        type: "number",
        description: "The index of the layer among the array of layers available in the image file."
      },
      opacity: {
        type: "number"
      },
      modelMatrix: {
        oneOf: [
          {
            type: "array",
            minItems: 16,
            maxItems: 16,
            description: "transformation matrix for this layer"
          },
          {
            type: "null",
            description: "Use no transformation."
          }
        ]
      },
      domainType: {
        type: "string",
        enum: ["Full", "Min/Max"],
        description: "Determines the extent of the channel slider input element in the layer controller."
      },
      resolution: {
        type: "number",
        description: "Resolution of 3D volumetric rendering"
      },
      xSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      renderingMode: {
        type: "string",
        description: "Rendering mode of 3D volumetric rendering"
      },
      ySlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      zSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      type: {
        type: "string",
        enum: ["raster", "bitmask"]
      },
      use3d: {
        type: "boolean"
      },
      visible: {
        type: "boolean",
        description: "Determines whether this entire layer will be rendered in the spatial component."
      }
    }
  },
  moleculesLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the molecules layer.",
    additionalProperties: false,
    required: ["visible", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  cellsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the cells layer.",
    additionalProperties: false,
    required: ["visible", "stroked", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      stroked: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  neighborhoodsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the neighborhoods layer.",
    additionalProperties: false,
    required: ["visible"],
    properties: {
      visible: {
        type: "boolean"
      }
    }
  },
  spatialRasterLayers: {
    type: "array",
    description: "Array of Spatial Layers",
    items: {
      $ref: "#/definitions/rasterLayer"
    }
  }
};
var additionalProperties6 = false;
var required6 = ["version", "name", "datasets", "layout", "initStrategy"];
var properties6 = {
  name: { type: "string" },
  public: { type: "boolean" },
  description: { type: "string" },
  datasets: {
    type: "array",
    description: "The datasets array defines groups of files, where the files within each dataset reference the same entities (cells, genes, cell sets, etc).",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["uid", "files"],
      properties: {
        uid: { type: "string" },
        name: { type: "string" },
        description: { type: "string" },
        files: {
          type: "array",
          items: {
            type: "object",
            additionalProperties: false,
            required: ["type", "fileType"],
            properties: {
              name: { type: "string" },
              type: { type: "string" },
              fileType: { type: "string" },
              url: { type: "string" },
              options: { oneOf: [{ $ref: "#/definitions/annDataCellSets" }, { $ref: "https://github.com/vitessce/vitessce/#raster" }, { $ref: "#/definitions/annDataCells" }, { $ref: "#/definitions/annDataExpressionMatrix" }] },
              requestInit: { $ref: "#/definitions/requestInit" }
            }
          }
        }
      }
    }
  },
  coordinationSpace: {
    type: "object",
    description: "The coordination space stores the values for each scope of each coordination object.",
    additionalProperties: false,
    required: [],
    properties: {
      dataset: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetZ: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingType: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingCellSetPolygonsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelSize: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingCellRadius: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationOrbit: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialOrbitAxis: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "string" }
            ]
          }
        }
      },
      spatialAxisFixed: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "Whether or not to have a fixed axis for the camera. Only useful for 3D viewing."
              },
              { type: "boolean" }
            ]
          }
        }
      },
      spatialRasterLayers: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/spatialRasterLayers" }
            ]
          }
        }
      },
      spatialCellsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/cellsLayer" }
            ]
          }
        }
      },
      spatialNeighborhoodsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/neighborhoodsLayer" }
            ]
          }
        }
      },
      spatialMoleculesLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/moleculesLayer" }
            ]
          }
        }
      },
      heatmapZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      cellFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cells will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      cellHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto cell set initialization is enabled, cell set selections will be automatically initialized."
              },
              { type: "array" }
            ]
          }
        }
      },
      cellSetHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell sets will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetColor: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, cell set colors will be automatically initialized."
              },
              {
                type: "array",
                items: {
                  type: "object",
                  additionalProperties: false,
                  required: ["path", "color"],
                  properties: {
                    path: {
                      type: "array",
                      items: { type: "string" }
                    },
                    color: {
                      type: "array",
                      items: { type: "number" }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      cellColorEncoding: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      geneSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneExpressionTransform: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "string", pattern: "log1p" }
            ]
          }
        }
      },
      geneExpressionColormap: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneExpressionColormapRange: {
        type: "object",
        patternProperties: {
          ".": { type: "array", items: { type: "number" } }
        }
      },
      genomicZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      additionalCellSets: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              {
                $ref: "https://github.com/vitessce/vitessce/#cell-sets"
              }
            ]
          }
        }
      },
      moleculeHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no molecule will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      }
    }
  },
  layout: { $ref: "#/definitions/components" },
  initStrategy: {
    type: "string",
    enum: ["none", "auto"],
    description: "The initialization strategy determines how missing coordination objects and coordination scope mappings are initially filled in."
  },
  version: {
    type: "string",
    enum: ["1.0.2"],
    description: "The schema version for the view config."
  }
};
var config_1_0_2_schema_default = {
  $schema: $schema12,
  $id: $id12,
  title: title12,
  type: type12,
  definitions: definitions12,
  additionalProperties: additionalProperties6,
  required: required6,
  properties: properties6
};

// src/schemas/config-1.0.3.schema.json
var $schema13 = "http://json-schema.org/draft-07/schema#";
var $id13 = "https://github.com/vitessce/vitessce/#dataset";
var title13 = "Vitessce data set";
var type13 = "object";
var definitions13 = {
  components: {
    description: "The layout array defines the views, or components, rendered in the grid.",
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["component", "x", "y"],
      properties: {
        component: {
          type: "string",
          description: "Specify a component using a name defined in the component registry."
        },
        props: {
          type: "object",
          description: "Extra prop values for the component."
        },
        x: { type: "integer" },
        y: { type: "integer" },
        w: { type: "integer" },
        h: { type: "integer" },
        coordinationScopes: {
          type: "object",
          description: "Component-level coordination scope mappings define which coordination object values a particular component can read and write, for each coordination type.",
          additionalProperties: false,
          required: [],
          properties: {
            dataset: { type: "string" },
            embeddingType: { type: "string" },
            embeddingZoom: { type: "string" },
            embeddingRotation: { type: "string" },
            embeddingTargetX: { type: "string" },
            embeddingTargetY: { type: "string" },
            embeddingTargetZ: { type: "string" },
            embeddingCellSetPolygonsVisible: { type: "string" },
            embeddingCellSetLabelsVisible: { type: "string" },
            embeddingCellSetLabelSize: { type: "string" },
            embeddingCellRadius: { type: "string" },
            spatialZoom: { type: "string" },
            spatialRotation: { type: "string" },
            spatialTargetX: { type: "string" },
            spatialTargetY: { type: "string" },
            spatialTargetZ: { type: "string" },
            spatialRotationX: { type: "string" },
            spatialRotationY: { type: "string" },
            spatialRotationZ: { type: "string" },
            spatialRotationOrbit: { type: "string" },
            spatialOrbitAxis: { type: "string" },
            spatialAxisFixed: { type: "string" },
            heatmapZoomX: { type: "string" },
            heatmapZoomY: { type: "string" },
            heatmapTargetX: { type: "string" },
            heatmapTargetY: { type: "string" },
            cellFilter: { type: "string" },
            cellHighlight: { type: "string" },
            cellSetSelection: { type: "string" },
            cellSetHighlight: { type: "string" },
            cellSetColor: { type: "string" },
            geneFilter: { type: "string" },
            geneHighlight: { type: "string" },
            geneSelection: { type: "string" },
            geneExpressionTransform: { type: "string" },
            geneExpressionColormap: { type: "string" },
            geneExpressionColormapRange: { type: "string" },
            cellColorEncoding: { type: "string" },
            spatialRasterLayers: { type: "string" },
            spatialCellsLayer: { type: "string" },
            spatialMoleculesLayer: { type: "string" },
            spatialNeighborhoodsLayer: { type: "string" },
            genomicZoomX: { type: "string" },
            genomicZoomY: { type: "string" },
            genomicTargetX: { type: "string" },
            genomicTargetY: { type: "string" },
            additionalCellSets: { type: "string" },
            moleculeHighlight: { type: "string" }
          }
        }
      }
    }
  },
  annDataCellSets: {
    type: "array",
    description: "Array of cell set configuration, following closely the conventions of the tabular schema",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["groupName", "setName"],
      properties: {
        groupName: {
          type: "string",
          description: "The display name for the set, like 'Cell Type' or 'Louvain.'"
        },
        setName: {
          type: "string",
          description: "The location in the AnnData store for the set, like 'obs/louvain' or 'obs/celltype.'"
        }
      }
    }
  },
  annDataCells: {
    type: "object",
    description: "The properties of this object are the configuration for how to layout scatterplots and spatial information",
    minProperties: 1,
    additionalProperties: false,
    required: [],
    properties: {
      xy: {
        type: "string",
        description: "The location in the AnnData store of cell centroids, like 'obsm/X_centroids.'"
      },
      poly: {
        type: "string",
        description: "The location in the AnnData store of cell polygon outlines, like 'obsm/X_polygons.'"
      },
      factors: {
        type: "array",
        description: "List of locations in the AnnData store of cell sets, like 'obs/louvain'",
        items: {
          type: "string"
        }
      },
      mappings: {
        patternProperties: {
          ".": {
            type: "object",
            description: "An object containing key-values for mappings like { UMAP: { key: 'obsm/X_umap', dims: [0, 1] } }.",
            additionalProperties: false,
            required: ["key"],
            properties: {
              key: {
                type: "string",
                description: "Where to look in the AnnData store for this mapping, like 'obsm/X_umap.'"
              },
              dims: {
                type: "array",
                description: "Which indices of the obsm object to take for a scatterplot, allowing for, for example, different PCs from obsm/X_pca",
                minItems: 2,
                maxItems: 2,
                items: { type: "number" }
              }
            }
          }
        }
      }
    }
  },
  annDataExpressionMatrix: {
    type: "object",
    description: "The properties of this object are the configuration for how to fetch the cell x genes matrix",
    additionalProperties: false,
    required: ["matrix"],
    properties: {
      matrix: {
        type: "string",
        description: "The location in the AnnData store of the cell x gene matrix, like 'obsm/hvg_subset.' or 'X'"
      },
      geneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the genes if using a subset of the data, like 'var.highly_variable.' if the matrix comes from 'obsm/hvg_subset.'"
      },
      matrixGeneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the matrix data (used in heatmap and histogram), like 'var.highly_variable.''"
      }
    }
  },
  requestInit: {
    type: "object",
    description: "The properties of this object correspond to the parameters of the JavaScript fetch() function.",
    additionalProperties: false,
    required: [],
    properties: {
      method: {
        type: "string"
      },
      headers: {
        type: "object"
      },
      body: {
        type: "string"
      },
      mode: {
        type: "string"
      },
      credentials: {
        type: "string"
      },
      cache: {
        type: "string"
      },
      redirect: {
        type: "string"
      },
      referrer: {
        type: "string"
      },
      integrity: {
        type: "string"
      }
    }
  },
  rasterLayer: {
    description: "The properties of this object are the rendering settings for the raster layer.",
    additionalProperties: false,
    required: ["channels", "colormap", "index", "opacity"],
    properties: {
      channels: {
        type: "array",
        items: {
          type: "object",
          additionalProperties: false,
          required: ["selection"],
          properties: {
            color: {
              type: "array",
              items: { type: "number" },
              description: "The color to use when rendering this channel under the null colormap."
            },
            selection: {
              type: "object",
              description: "Determines the channel selection, e.g. some Z and time slice."
            },
            slider: {
              type: "array",
              items: { type: "number" },
              description: "Determines the range for color mapping."
            },
            visible: {
              type: "boolean",
              description: "Determines whether this channel of the layer will be rendered in the spatial component."
            }
          }
        }
      },
      colormap: {
        oneOf: [
          {
            type: "string",
            description: "The name of the colormap to use for this layer."
          },
          {
            type: "null",
            description: "Use the solid color definitions."
          }
        ]
      },
      transparentColor: {
        oneOf: [
          {
            type: "array",
            minItems: 3,
            maxItems: 3,
            items: {
              type: "number",
              description: "One of R G or B (0 - 255)."
            },
            description: "Determines the color to be set to opacity 0"
          },
          {
            type: "null",
            description: "No selection."
          }
        ]
      },
      index: {
        type: "number",
        description: "The index of the layer among the array of layers available in the image file."
      },
      opacity: {
        type: "number"
      },
      modelMatrix: {
        oneOf: [
          {
            type: "array",
            minItems: 16,
            maxItems: 16,
            description: "transformation matrix for this layer"
          },
          {
            type: "null",
            description: "Use no transformation."
          }
        ]
      },
      domainType: {
        type: "string",
        enum: ["Full", "Min/Max"],
        description: "Determines the extent of the channel slider input element in the layer controller."
      },
      resolution: {
        type: "number",
        description: "Resolution of 3D volumetric rendering"
      },
      xSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      renderingMode: {
        type: "string",
        description: "Rendering mode of 3D volumetric rendering"
      },
      ySlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      zSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      type: {
        type: "string",
        enum: ["raster", "bitmask"]
      },
      use3d: {
        type: "boolean"
      },
      visible: {
        type: "boolean",
        description: "Determines whether this entire layer will be rendered in the spatial component."
      }
    }
  },
  moleculesLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the molecules layer.",
    additionalProperties: false,
    required: ["visible", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  cellsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the cells layer.",
    additionalProperties: false,
    required: ["visible", "stroked", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      stroked: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  neighborhoodsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the neighborhoods layer.",
    additionalProperties: false,
    required: ["visible"],
    properties: {
      visible: {
        type: "boolean"
      }
    }
  },
  spatialRasterLayers: {
    type: "array",
    description: "Array of Spatial Layers",
    items: {
      $ref: "#/definitions/rasterLayer"
    }
  }
};
var additionalProperties7 = false;
var required7 = ["version", "name", "datasets", "layout", "initStrategy"];
var properties7 = {
  name: { type: "string" },
  public: { type: "boolean" },
  description: { type: "string" },
  datasets: {
    type: "array",
    description: "The datasets array defines groups of files, where the files within each dataset reference the same entities (cells, genes, cell sets, etc).",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["uid", "files"],
      properties: {
        uid: { type: "string" },
        name: { type: "string" },
        description: { type: "string" },
        files: {
          type: "array",
          items: {
            type: "object",
            additionalProperties: false,
            required: ["type", "fileType"],
            properties: {
              name: { type: "string" },
              type: { type: "string" },
              fileType: { type: "string" },
              url: { type: "string" },
              options: { oneOf: [{ $ref: "#/definitions/annDataCellSets" }, { $ref: "https://github.com/vitessce/vitessce/#raster" }, { $ref: "#/definitions/annDataCells" }, { $ref: "#/definitions/annDataExpressionMatrix" }] },
              requestInit: { $ref: "#/definitions/requestInit" }
            }
          }
        }
      }
    }
  },
  coordinationSpace: {
    type: "object",
    description: "The coordination space stores the values for each scope of each coordination object.",
    additionalProperties: false,
    required: [],
    properties: {
      dataset: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetZ: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingType: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingCellSetPolygonsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelSize: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingCellRadius: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationOrbit: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialOrbitAxis: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "string" }
            ]
          }
        }
      },
      spatialAxisFixed: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "Whether or not to have a fixed axis for the camera. Only useful for 3D viewing."
              },
              { type: "boolean" }
            ]
          }
        }
      },
      spatialRasterLayers: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/spatialRasterLayers" }
            ]
          }
        }
      },
      spatialCellsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/cellsLayer" }
            ]
          }
        }
      },
      spatialNeighborhoodsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/neighborhoodsLayer" }
            ]
          }
        }
      },
      spatialMoleculesLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/moleculesLayer" }
            ]
          }
        }
      },
      heatmapZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      cellFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cells will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      cellHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto cell set initialization is enabled, cell set selections will be automatically initialized."
              },
              { type: "array" }
            ]
          }
        }
      },
      cellSetHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell sets will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetColor: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, cell set colors will be automatically initialized."
              },
              {
                type: "array",
                items: {
                  type: "object",
                  additionalProperties: false,
                  required: ["path", "color"],
                  properties: {
                    path: {
                      type: "array",
                      items: { type: "string" }
                    },
                    color: {
                      type: "array",
                      items: { type: "number" }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      cellColorEncoding: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      geneSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneExpressionTransform: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "string", pattern: "log1p" }
            ]
          }
        }
      },
      geneExpressionColormap: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneExpressionColormapRange: {
        type: "object",
        patternProperties: {
          ".": { type: "array", items: { type: "number" } }
        }
      },
      genomicZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      additionalCellSets: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              {
                $ref: "https://github.com/vitessce/vitessce/#cell-sets"
              }
            ]
          }
        }
      },
      moleculeHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no molecule will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      }
    }
  },
  layout: { $ref: "#/definitions/components" },
  initStrategy: {
    type: "string",
    enum: ["none", "auto"],
    description: "The initialization strategy determines how missing coordination objects and coordination scope mappings are initially filled in."
  },
  version: {
    type: "string",
    enum: ["1.0.3"],
    description: "The schema version for the view config."
  }
};
var config_1_0_3_schema_default = {
  $schema: $schema13,
  $id: $id13,
  title: title13,
  type: type13,
  definitions: definitions13,
  additionalProperties: additionalProperties7,
  required: required7,
  properties: properties7
};

// src/schemas/config-1.0.4.schema.json
var $schema14 = "http://json-schema.org/draft-07/schema#";
var $id14 = "https://github.com/vitessce/vitessce/#dataset";
var title14 = "Vitessce data set";
var type14 = "object";
var definitions14 = {
  components: {
    description: "The layout array defines the views, or components, rendered in the grid.",
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["component", "x", "y"],
      properties: {
        component: {
          type: "string",
          description: "Specify a component using a name defined in the component registry."
        },
        props: {
          type: "object",
          description: "Extra prop values for the component."
        },
        x: { type: "integer" },
        y: { type: "integer" },
        w: { type: "integer" },
        h: { type: "integer" },
        coordinationScopes: {
          type: "object",
          description: "Component-level coordination scope mappings define which coordination object values a particular component can read and write, for each coordination type.",
          additionalProperties: false,
          required: [],
          properties: {
            dataset: { type: "string" },
            embeddingType: { type: "string" },
            embeddingZoom: { type: "string" },
            embeddingRotation: { type: "string" },
            embeddingTargetX: { type: "string" },
            embeddingTargetY: { type: "string" },
            embeddingTargetZ: { type: "string" },
            embeddingCellSetPolygonsVisible: { type: "string" },
            embeddingCellSetLabelsVisible: { type: "string" },
            embeddingCellSetLabelSize: { type: "string" },
            embeddingCellRadius: { type: "string" },
            embeddingCellOpacity: { type: "string" },
            embeddingCellRadiusMode: { type: "string" },
            embeddingCellOpacityMode: { type: "string" },
            spatialZoom: { type: "string" },
            spatialRotation: { type: "string" },
            spatialTargetX: { type: "string" },
            spatialTargetY: { type: "string" },
            spatialTargetZ: { type: "string" },
            spatialRotationX: { type: "string" },
            spatialRotationY: { type: "string" },
            spatialRotationZ: { type: "string" },
            spatialRotationOrbit: { type: "string" },
            spatialOrbitAxis: { type: "string" },
            spatialAxisFixed: { type: "string" },
            heatmapZoomX: { type: "string" },
            heatmapZoomY: { type: "string" },
            heatmapTargetX: { type: "string" },
            heatmapTargetY: { type: "string" },
            cellFilter: { type: "string" },
            cellHighlight: { type: "string" },
            cellSetSelection: { type: "string" },
            cellSetHighlight: { type: "string" },
            cellSetColor: { type: "string" },
            geneFilter: { type: "string" },
            geneHighlight: { type: "string" },
            geneSelection: { type: "string" },
            geneExpressionTransform: { type: "string" },
            geneExpressionColormap: { type: "string" },
            geneExpressionColormapRange: { type: "string" },
            cellColorEncoding: { type: "string" },
            spatialRasterLayers: { type: "string" },
            spatialCellsLayer: { type: "string" },
            spatialMoleculesLayer: { type: "string" },
            spatialNeighborhoodsLayer: { type: "string" },
            genomicZoomX: { type: "string" },
            genomicZoomY: { type: "string" },
            genomicTargetX: { type: "string" },
            genomicTargetY: { type: "string" },
            additionalCellSets: { type: "string" },
            moleculeHighlight: { type: "string" }
          }
        }
      }
    }
  },
  annDataCellSets: {
    type: "array",
    description: "Array of cell set configuration, following closely the conventions of the tabular schema",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["groupName", "setName"],
      properties: {
        groupName: {
          type: "string",
          description: "The display name for the set, like 'Cell Type' or 'Louvain.'"
        },
        setName: {
          type: "string",
          description: "The location in the AnnData store for the set, like 'obs/louvain' or 'obs/celltype.'"
        }
      }
    }
  },
  annDataCells: {
    type: "object",
    description: "The properties of this object are the configuration for how to layout scatterplots and spatial information",
    minProperties: 1,
    additionalProperties: false,
    required: [],
    properties: {
      xy: {
        type: "string",
        description: "The location in the AnnData store of cell centroids, like 'obsm/X_centroids.'"
      },
      poly: {
        type: "string",
        description: "The location in the AnnData store of cell polygon outlines, like 'obsm/X_polygons.'"
      },
      factors: {
        type: "array",
        description: "List of locations in the AnnData store of cell sets, like 'obs/louvain'",
        items: {
          type: "string"
        }
      },
      mappings: {
        patternProperties: {
          ".": {
            type: "object",
            description: "An object containing key-values for mappings like { UMAP: { key: 'obsm/X_umap', dims: [0, 1] } }.",
            additionalProperties: false,
            required: ["key"],
            properties: {
              key: {
                type: "string",
                description: "Where to look in the AnnData store for this mapping, like 'obsm/X_umap.'"
              },
              dims: {
                type: "array",
                description: "Which indices of the obsm object to take for a scatterplot, allowing for, for example, different PCs from obsm/X_pca",
                minItems: 2,
                maxItems: 2,
                items: { type: "number" }
              }
            }
          }
        }
      }
    }
  },
  annDataExpressionMatrix: {
    type: "object",
    description: "The properties of this object are the configuration for how to fetch the cell x genes matrix",
    additionalProperties: false,
    required: ["matrix"],
    properties: {
      matrix: {
        type: "string",
        description: "The location in the AnnData store of the cell x gene matrix, like 'obsm/hvg_subset.' or 'X'"
      },
      geneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the genes if using a subset of the data, like 'var.highly_variable.' if the matrix comes from 'obsm/hvg_subset.'"
      },
      matrixGeneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the matrix data (used in heatmap and histogram), like 'var.highly_variable.''"
      }
    }
  },
  requestInit: {
    type: "object",
    description: "The properties of this object correspond to the parameters of the JavaScript fetch() function.",
    additionalProperties: false,
    required: [],
    properties: {
      method: {
        type: "string"
      },
      headers: {
        type: "object"
      },
      body: {
        type: "string"
      },
      mode: {
        type: "string"
      },
      credentials: {
        type: "string"
      },
      cache: {
        type: "string"
      },
      redirect: {
        type: "string"
      },
      referrer: {
        type: "string"
      },
      integrity: {
        type: "string"
      }
    }
  },
  rasterLayer: {
    description: "The properties of this object are the rendering settings for the raster layer.",
    additionalProperties: false,
    required: ["channels", "colormap", "index", "opacity"],
    properties: {
      channels: {
        type: "array",
        items: {
          type: "object",
          additionalProperties: false,
          required: ["selection"],
          properties: {
            color: {
              type: "array",
              items: { type: "number" },
              description: "The color to use when rendering this channel under the null colormap."
            },
            selection: {
              type: "object",
              description: "Determines the channel selection, e.g. some Z and time slice."
            },
            slider: {
              type: "array",
              items: { type: "number" },
              description: "Determines the range for color mapping."
            },
            visible: {
              type: "boolean",
              description: "Determines whether this channel of the layer will be rendered in the spatial component."
            }
          }
        }
      },
      colormap: {
        oneOf: [
          {
            type: "string",
            description: "The name of the colormap to use for this layer."
          },
          {
            type: "null",
            description: "Use the solid color definitions."
          }
        ]
      },
      transparentColor: {
        oneOf: [
          {
            type: "array",
            minItems: 3,
            maxItems: 3,
            items: {
              type: "number",
              description: "One of R G or B (0 - 255)."
            },
            description: "Determines the color to be set to opacity 0"
          },
          {
            type: "null",
            description: "No selection."
          }
        ]
      },
      index: {
        type: "number",
        description: "The index of the layer among the array of layers available in the image file."
      },
      opacity: {
        type: "number"
      },
      modelMatrix: {
        oneOf: [
          {
            type: "array",
            minItems: 16,
            maxItems: 16,
            description: "transformation matrix for this layer"
          },
          {
            type: "null",
            description: "Use no transformation."
          }
        ]
      },
      domainType: {
        type: "string",
        enum: ["Full", "Min/Max"],
        description: "Determines the extent of the channel slider input element in the layer controller."
      },
      resolution: {
        type: "number",
        description: "Resolution of 3D volumetric rendering"
      },
      xSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      renderingMode: {
        type: "string",
        description: "Rendering mode of 3D volumetric rendering"
      },
      ySlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      zSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      type: {
        type: "string",
        enum: ["raster", "bitmask"]
      },
      use3d: {
        type: "boolean"
      },
      visible: {
        type: "boolean",
        description: "Determines whether this entire layer will be rendered in the spatial component."
      }
    }
  },
  moleculesLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the molecules layer.",
    additionalProperties: false,
    required: ["visible", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  cellsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the cells layer.",
    additionalProperties: false,
    required: ["visible", "stroked", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      stroked: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  neighborhoodsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the neighborhoods layer.",
    additionalProperties: false,
    required: ["visible"],
    properties: {
      visible: {
        type: "boolean"
      }
    }
  },
  spatialRasterLayers: {
    type: "array",
    description: "Array of Spatial Layers",
    items: {
      $ref: "#/definitions/rasterLayer"
    }
  }
};
var additionalProperties8 = false;
var required8 = ["version", "name", "datasets", "layout", "initStrategy"];
var properties8 = {
  name: { type: "string" },
  public: { type: "boolean" },
  description: { type: "string" },
  datasets: {
    type: "array",
    description: "The datasets array defines groups of files, where the files within each dataset reference the same entities (cells, genes, cell sets, etc).",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["uid", "files"],
      properties: {
        uid: { type: "string" },
        name: { type: "string" },
        description: { type: "string" },
        files: {
          type: "array",
          items: {
            type: "object",
            additionalProperties: false,
            required: ["type", "fileType"],
            properties: {
              name: { type: "string" },
              type: { type: "string" },
              fileType: { type: "string" },
              url: { type: "string" },
              options: { oneOf: [{ $ref: "#/definitions/annDataCellSets" }, { $ref: "https://github.com/vitessce/vitessce/#raster" }, { $ref: "#/definitions/annDataCells" }, { $ref: "#/definitions/annDataExpressionMatrix" }] },
              requestInit: { $ref: "#/definitions/requestInit" }
            }
          }
        }
      }
    }
  },
  coordinationSpace: {
    type: "object",
    description: "The coordination space stores the values for each scope of each coordination object.",
    additionalProperties: false,
    required: [],
    properties: {
      dataset: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetZ: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingType: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingCellSetPolygonsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelSize: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingCellRadius: {
        type: "object",
        patternProperties: {
          ".": {
            type: "number",
            description: "The cell radius value, used when embeddingCellRadiusMode is absolute or relative."
          }
        }
      },
      embeddingCellOpacity: {
        type: "object",
        patternProperties: {
          ".": {
            type: "number",
            description: "The cell opacity value, used when embeddingCellOpacityMode is static."
          }
        }
      },
      embeddingCellRadiusMode: {
        type: "object",
        patternProperties: {
          ".": {
            type: "string",
            enum: ["manual", "auto"],
            description: "Should data points representing cells be assigned a static (manual) or dynamic (auto, based on zoom level and data extent) radius?"
          }
        }
      },
      embeddingCellOpacityMode: {
        type: "object",
        patternProperties: {
          ".": {
            type: "string",
            enum: ["manual", "auto"],
            description: "Should data points representing cells be assigned a static (manual) or dynamic (auto, based on zoom level and data extent) opacity?"
          }
        }
      },
      spatialZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationOrbit: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialOrbitAxis: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "string" }
            ]
          }
        }
      },
      spatialAxisFixed: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "Whether or not to have a fixed axis for the camera. Only useful for 3D viewing."
              },
              { type: "boolean" }
            ]
          }
        }
      },
      spatialRasterLayers: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/spatialRasterLayers" }
            ]
          }
        }
      },
      spatialCellsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/cellsLayer" }
            ]
          }
        }
      },
      spatialNeighborhoodsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/neighborhoodsLayer" }
            ]
          }
        }
      },
      spatialMoleculesLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/moleculesLayer" }
            ]
          }
        }
      },
      heatmapZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      cellFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cells will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      cellHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto cell set initialization is enabled, cell set selections will be automatically initialized."
              },
              { type: "array" }
            ]
          }
        }
      },
      cellSetHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell sets will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetColor: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, cell set colors will be automatically initialized."
              },
              {
                type: "array",
                items: {
                  type: "object",
                  additionalProperties: false,
                  required: ["path", "color"],
                  properties: {
                    path: {
                      type: "array",
                      items: { type: "string" }
                    },
                    color: {
                      type: "array",
                      items: { type: "number" }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      cellColorEncoding: {
        type: "object",
        patternProperties: {
          ".": {
            type: "string",
            enum: ["geneSelection", "cellSetSelection"],
            description: "How should data points representing cells be colored?"
          }
        }
      },
      geneFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      geneSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneExpressionTransform: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "string", pattern: "log1p" }
            ]
          }
        }
      },
      geneExpressionColormap: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneExpressionColormapRange: {
        type: "object",
        patternProperties: {
          ".": { type: "array", items: { type: "number" } }
        }
      },
      genomicZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      additionalCellSets: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              {
                $ref: "https://github.com/vitessce/vitessce/#cell-sets"
              }
            ]
          }
        }
      },
      moleculeHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no molecule will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      }
    }
  },
  layout: { $ref: "#/definitions/components" },
  initStrategy: {
    type: "string",
    enum: ["none", "auto"],
    description: "The initialization strategy determines how missing coordination objects and coordination scope mappings are initially filled in."
  },
  version: {
    type: "string",
    enum: ["1.0.4"],
    description: "The schema version for the view config."
  }
};
var config_1_0_4_schema_default = {
  $schema: $schema14,
  $id: $id14,
  title: title14,
  type: type14,
  definitions: definitions14,
  additionalProperties: additionalProperties8,
  required: required8,
  properties: properties8
};

// src/schemas/config-1.0.5.schema.json
var $schema15 = "http://json-schema.org/draft-07/schema#";
var $id15 = "https://github.com/vitessce/vitessce/#dataset";
var title15 = "Vitessce data set";
var type15 = "object";
var definitions15 = {
  components: {
    description: "The layout array defines the views, or components, rendered in the grid.",
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["component", "x", "y"],
      properties: {
        component: {
          type: "string",
          description: "Specify a component using a name defined in the component registry."
        },
        props: {
          type: "object",
          description: "Extra prop values for the component."
        },
        x: { type: "integer" },
        y: { type: "integer" },
        w: { type: "integer" },
        h: { type: "integer" },
        coordinationScopes: {
          type: "object",
          description: "Component-level coordination scope mappings define which coordination object values a particular component can read and write, for each coordination type.",
          additionalProperties: false,
          required: [],
          properties: {
            dataset: { type: "string" },
            embeddingType: { type: "string" },
            embeddingZoom: { type: "string" },
            embeddingRotation: { type: "string" },
            embeddingTargetX: { type: "string" },
            embeddingTargetY: { type: "string" },
            embeddingTargetZ: { type: "string" },
            embeddingCellSetPolygonsVisible: { type: "string" },
            embeddingCellSetLabelsVisible: { type: "string" },
            embeddingCellSetLabelSize: { type: "string" },
            embeddingCellRadius: { type: "string" },
            embeddingCellOpacity: { type: "string" },
            embeddingCellRadiusMode: { type: "string" },
            embeddingCellOpacityMode: { type: "string" },
            spatialZoom: { type: "string" },
            spatialRotation: { type: "string" },
            spatialTargetX: { type: "string" },
            spatialTargetY: { type: "string" },
            spatialTargetZ: { type: "string" },
            spatialRotationX: { type: "string" },
            spatialRotationY: { type: "string" },
            spatialRotationZ: { type: "string" },
            spatialRotationOrbit: { type: "string" },
            spatialOrbitAxis: { type: "string" },
            spatialAxisFixed: { type: "string" },
            heatmapZoomX: { type: "string" },
            heatmapZoomY: { type: "string" },
            heatmapTargetX: { type: "string" },
            heatmapTargetY: { type: "string" },
            cellFilter: { type: "string" },
            cellHighlight: { type: "string" },
            cellSetSelection: { type: "string" },
            cellSetHighlight: { type: "string" },
            cellSetColor: { type: "string" },
            geneFilter: { type: "string" },
            geneHighlight: { type: "string" },
            geneSelection: { type: "string" },
            geneExpressionTransform: { type: "string" },
            geneExpressionColormap: { type: "string" },
            geneExpressionColormapRange: { type: "string" },
            cellColorEncoding: { type: "string" },
            spatialRasterLayers: { type: "string" },
            spatialCellsLayer: { type: "string" },
            spatialMoleculesLayer: { type: "string" },
            spatialNeighborhoodsLayer: { type: "string" },
            genomicZoomX: { type: "string" },
            genomicZoomY: { type: "string" },
            genomicTargetX: { type: "string" },
            genomicTargetY: { type: "string" },
            additionalCellSets: { type: "string" },
            moleculeHighlight: { type: "string" }
          }
        }
      }
    }
  },
  annDataCellSets: {
    type: "array",
    description: "Array of cell set configuration, following closely the conventions of the tabular schema",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["groupName", "setName"],
      properties: {
        groupName: {
          type: "string",
          description: "The display name for the set, like 'Cell Type' or 'Louvain.'"
        },
        setName: {
          oneOf: [
            {
              type: "string",
              description: "The location in the AnnData store for the set, like 'obs/louvain' or 'obs/celltype.'"
            },
            {
              type: "array",
              items: { type: "string" },
              description: "An array of locations in the AnnData store for a hierarchy of set names, from coarse to fine levels."
            }
          ]
        }
      }
    }
  },
  annDataCells: {
    type: "object",
    description: "The properties of this object are the configuration for how to layout scatterplots and spatial information",
    minProperties: 1,
    additionalProperties: false,
    required: [],
    properties: {
      xy: {
        type: "string",
        description: "The location in the AnnData store of cell centroids, like 'obsm/X_centroids.'"
      },
      poly: {
        type: "string",
        description: "The location in the AnnData store of cell polygon outlines, like 'obsm/X_polygons.'"
      },
      factors: {
        type: "array",
        description: "List of locations in the AnnData store of cell sets, like 'obs/louvain'",
        items: {
          type: "string"
        }
      },
      mappings: {
        patternProperties: {
          ".": {
            type: "object",
            description: "An object containing key-values for mappings like { UMAP: { key: 'obsm/X_umap', dims: [0, 1] } }.",
            additionalProperties: false,
            required: ["key"],
            properties: {
              key: {
                type: "string",
                description: "Where to look in the AnnData store for this mapping, like 'obsm/X_umap.'"
              },
              dims: {
                type: "array",
                description: "Which indices of the obsm object to take for a scatterplot, allowing for, for example, different PCs from obsm/X_pca",
                minItems: 2,
                maxItems: 2,
                items: { type: "number" }
              }
            }
          }
        }
      }
    }
  },
  annDataExpressionMatrix: {
    type: "object",
    description: "The properties of this object are the configuration for how to fetch the cell x genes matrix",
    additionalProperties: false,
    required: ["matrix"],
    properties: {
      matrix: {
        type: "string",
        description: "The location in the AnnData store of the cell x gene matrix, like 'obsm/hvg_subset.' or 'X'"
      },
      geneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the genes if using a subset of the data, like 'var.highly_variable.' if the matrix comes from 'obsm/hvg_subset.'"
      },
      matrixGeneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the matrix data (used in heatmap and histogram), like 'var.highly_variable.''"
      }
    }
  },
  requestInit: {
    type: "object",
    description: "The properties of this object correspond to the parameters of the JavaScript fetch() function.",
    additionalProperties: false,
    required: [],
    properties: {
      method: {
        type: "string"
      },
      headers: {
        type: "object"
      },
      body: {
        type: "string"
      },
      mode: {
        type: "string"
      },
      credentials: {
        type: "string"
      },
      cache: {
        type: "string"
      },
      redirect: {
        type: "string"
      },
      referrer: {
        type: "string"
      },
      integrity: {
        type: "string"
      }
    }
  },
  rasterLayer: {
    description: "The properties of this object are the rendering settings for the raster layer.",
    additionalProperties: false,
    required: ["channels", "colormap", "index", "opacity"],
    properties: {
      channels: {
        type: "array",
        items: {
          type: "object",
          additionalProperties: false,
          required: ["selection"],
          properties: {
            color: {
              type: "array",
              items: { type: "number" },
              description: "The color to use when rendering this channel under the null colormap."
            },
            selection: {
              type: "object",
              description: "Determines the channel selection, e.g. some Z and time slice."
            },
            slider: {
              type: "array",
              items: { type: "number" },
              description: "Determines the range for color mapping."
            },
            visible: {
              type: "boolean",
              description: "Determines whether this channel of the layer will be rendered in the spatial component."
            }
          }
        }
      },
      colormap: {
        oneOf: [
          {
            type: "string",
            description: "The name of the colormap to use for this layer."
          },
          {
            type: "null",
            description: "Use the solid color definitions."
          }
        ]
      },
      transparentColor: {
        oneOf: [
          {
            type: "array",
            minItems: 3,
            maxItems: 3,
            items: {
              type: "number",
              description: "One of R G or B (0 - 255)."
            },
            description: "Determines the color to be set to opacity 0"
          },
          {
            type: "null",
            description: "No selection."
          }
        ]
      },
      index: {
        type: "number",
        description: "The index of the layer among the array of layers available in the image file."
      },
      opacity: {
        type: "number"
      },
      modelMatrix: {
        oneOf: [
          {
            type: "array",
            minItems: 16,
            maxItems: 16,
            description: "transformation matrix for this layer"
          },
          {
            type: "null",
            description: "Use no transformation."
          }
        ]
      },
      domainType: {
        type: "string",
        enum: ["Full", "Min/Max"],
        description: "Determines the extent of the channel slider input element in the layer controller."
      },
      resolution: {
        type: "number",
        description: "Resolution of 3D volumetric rendering"
      },
      xSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      renderingMode: {
        type: "string",
        description: "Rendering mode of 3D volumetric rendering"
      },
      ySlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      zSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      type: {
        type: "string",
        enum: ["raster", "bitmask"]
      },
      use3d: {
        type: "boolean"
      },
      visible: {
        type: "boolean",
        description: "Determines whether this entire layer will be rendered in the spatial component."
      }
    }
  },
  moleculesLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the molecules layer.",
    additionalProperties: false,
    required: ["visible", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  cellsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the cells layer.",
    additionalProperties: false,
    required: ["visible", "stroked", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      stroked: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  neighborhoodsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the neighborhoods layer.",
    additionalProperties: false,
    required: ["visible"],
    properties: {
      visible: {
        type: "boolean"
      }
    }
  },
  spatialRasterLayers: {
    type: "array",
    description: "Array of Spatial Layers",
    items: {
      $ref: "#/definitions/rasterLayer"
    }
  }
};
var additionalProperties9 = false;
var required9 = ["version", "name", "datasets", "layout", "initStrategy"];
var properties9 = {
  name: { type: "string" },
  public: { type: "boolean" },
  description: { type: "string" },
  datasets: {
    type: "array",
    description: "The datasets array defines groups of files, where the files within each dataset reference the same entities (cells, genes, cell sets, etc).",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["uid", "files"],
      properties: {
        uid: { type: "string" },
        name: { type: "string" },
        description: { type: "string" },
        files: {
          type: "array",
          items: {
            type: "object",
            additionalProperties: false,
            required: ["type", "fileType"],
            properties: {
              name: { type: "string" },
              type: { type: "string" },
              fileType: { type: "string" },
              url: { type: "string" },
              options: { oneOf: [{ $ref: "#/definitions/annDataCellSets" }, { $ref: "https://github.com/vitessce/vitessce/#raster" }, { $ref: "#/definitions/annDataCells" }, { $ref: "#/definitions/annDataExpressionMatrix" }] },
              requestInit: { $ref: "#/definitions/requestInit" }
            }
          }
        }
      }
    }
  },
  coordinationSpace: {
    type: "object",
    description: "The coordination space stores the values for each scope of each coordination object.",
    additionalProperties: false,
    required: [],
    properties: {
      dataset: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetZ: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingType: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingCellSetPolygonsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelSize: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingCellRadius: {
        type: "object",
        patternProperties: {
          ".": {
            type: "number",
            description: "The cell radius value, used when embeddingCellRadiusMode is absolute or relative."
          }
        }
      },
      embeddingCellOpacity: {
        type: "object",
        patternProperties: {
          ".": {
            type: "number",
            description: "The cell opacity value, used when embeddingCellOpacityMode is static."
          }
        }
      },
      embeddingCellRadiusMode: {
        type: "object",
        patternProperties: {
          ".": {
            type: "string",
            enum: ["manual", "auto"],
            description: "Should data points representing cells be assigned a static (manual) or dynamic (auto, based on zoom level and data extent) radius?"
          }
        }
      },
      embeddingCellOpacityMode: {
        type: "object",
        patternProperties: {
          ".": {
            type: "string",
            enum: ["manual", "auto"],
            description: "Should data points representing cells be assigned a static (manual) or dynamic (auto, based on zoom level and data extent) opacity?"
          }
        }
      },
      spatialZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationOrbit: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialOrbitAxis: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "string" }
            ]
          }
        }
      },
      spatialAxisFixed: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "Whether or not to have a fixed axis for the camera. Only useful for 3D viewing."
              },
              { type: "boolean" }
            ]
          }
        }
      },
      spatialRasterLayers: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/spatialRasterLayers" }
            ]
          }
        }
      },
      spatialCellsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/cellsLayer" }
            ]
          }
        }
      },
      spatialNeighborhoodsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/neighborhoodsLayer" }
            ]
          }
        }
      },
      spatialMoleculesLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/moleculesLayer" }
            ]
          }
        }
      },
      heatmapZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      cellFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cells will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      cellHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto cell set initialization is enabled, cell set selections will be automatically initialized."
              },
              { type: "array" }
            ]
          }
        }
      },
      cellSetHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell sets will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetColor: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, cell set colors will be automatically initialized."
              },
              {
                type: "array",
                items: {
                  type: "object",
                  additionalProperties: false,
                  required: ["path", "color"],
                  properties: {
                    path: {
                      type: "array",
                      items: { type: "string" }
                    },
                    color: {
                      type: "array",
                      items: { type: "number" }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      cellColorEncoding: {
        type: "object",
        patternProperties: {
          ".": {
            type: "string",
            enum: ["geneSelection", "cellSetSelection"],
            description: "How should data points representing cells be colored?"
          }
        }
      },
      geneFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      geneSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneExpressionTransform: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "string", pattern: "log1p" }
            ]
          }
        }
      },
      geneExpressionColormap: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneExpressionColormapRange: {
        type: "object",
        patternProperties: {
          ".": { type: "array", items: { type: "number" } }
        }
      },
      genomicZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      additionalCellSets: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              {
                $ref: "https://github.com/vitessce/vitessce/#cell-sets"
              }
            ]
          }
        }
      },
      moleculeHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no molecule will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      }
    }
  },
  layout: { $ref: "#/definitions/components" },
  initStrategy: {
    type: "string",
    enum: ["none", "auto"],
    description: "The initialization strategy determines how missing coordination objects and coordination scope mappings are initially filled in."
  },
  version: {
    type: "string",
    enum: ["1.0.5"],
    description: "The schema version for the view config."
  }
};
var config_1_0_5_schema_default = {
  $schema: $schema15,
  $id: $id15,
  title: title15,
  type: type15,
  definitions: definitions15,
  additionalProperties: additionalProperties9,
  required: required9,
  properties: properties9
};

// src/schemas/config-1.0.6.schema.json
var $schema16 = "http://json-schema.org/draft-07/schema#";
var $id16 = "https://github.com/vitessce/vitessce/#dataset";
var title16 = "Vitessce data set";
var type16 = "object";
var definitions16 = {
  components: {
    description: "The layout array defines the views, or components, rendered in the grid.",
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["component", "x", "y"],
      properties: {
        component: {
          type: "string",
          description: "Specify a component using a name defined in the component registry."
        },
        props: {
          type: "object",
          description: "Extra prop values for the component."
        },
        x: { type: "integer" },
        y: { type: "integer" },
        w: { type: "integer" },
        h: { type: "integer" },
        coordinationScopes: {
          type: "object",
          description: "Component-level coordination scope mappings define which coordination object values a particular component can read and write, for each coordination type.",
          additionalProperties: false,
          required: [],
          properties: {
            dataset: { type: "string" },
            embeddingType: { type: "string" },
            embeddingZoom: { type: "string" },
            embeddingRotation: { type: "string" },
            embeddingTargetX: { type: "string" },
            embeddingTargetY: { type: "string" },
            embeddingTargetZ: { type: "string" },
            embeddingCellSetPolygonsVisible: { type: "string" },
            embeddingCellSetLabelsVisible: { type: "string" },
            embeddingCellSetLabelSize: { type: "string" },
            embeddingCellRadius: { type: "string" },
            embeddingCellOpacity: { type: "string" },
            embeddingCellRadiusMode: { type: "string" },
            embeddingCellOpacityMode: { type: "string" },
            spatialZoom: { type: "string" },
            spatialRotation: { type: "string" },
            spatialTargetX: { type: "string" },
            spatialTargetY: { type: "string" },
            spatialTargetZ: { type: "string" },
            spatialRotationX: { type: "string" },
            spatialRotationY: { type: "string" },
            spatialRotationZ: { type: "string" },
            spatialRotationOrbit: { type: "string" },
            spatialOrbitAxis: { type: "string" },
            spatialAxisFixed: { type: "string" },
            heatmapZoomX: { type: "string" },
            heatmapZoomY: { type: "string" },
            heatmapTargetX: { type: "string" },
            heatmapTargetY: { type: "string" },
            cellFilter: { type: "string" },
            cellHighlight: { type: "string" },
            cellSetSelection: { type: "string" },
            cellSetHighlight: { type: "string" },
            cellSetColor: { type: "string" },
            geneFilter: { type: "string" },
            geneHighlight: { type: "string" },
            geneSelection: { type: "string" },
            geneExpressionTransform: { type: "string" },
            geneExpressionColormap: { type: "string" },
            geneExpressionColormapRange: { type: "string" },
            cellColorEncoding: { type: "string" },
            spatialRasterLayers: { type: "string" },
            spatialCellsLayer: { type: "string" },
            spatialMoleculesLayer: { type: "string" },
            spatialNeighborhoodsLayer: { type: "string" },
            genomicZoomX: { type: "string" },
            genomicZoomY: { type: "string" },
            genomicTargetX: { type: "string" },
            genomicTargetY: { type: "string" },
            additionalCellSets: { type: "string" },
            moleculeHighlight: { type: "string" }
          }
        }
      }
    }
  },
  annDataCellSets: {
    type: "array",
    description: "Array of cell set configuration, following closely the conventions of the tabular schema",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["groupName", "setName"],
      properties: {
        groupName: {
          type: "string",
          description: "The display name for the set, like 'Cell Type' or 'Louvain.'"
        },
        setName: {
          oneOf: [
            {
              type: "string",
              description: "The location in the AnnData store for the set, like 'obs/louvain' or 'obs/celltype.'"
            },
            {
              type: "array",
              items: { type: "string" },
              description: "An array of locations in the AnnData store for a hierarchy of set names, from coarse to fine levels."
            }
          ]
        },
        scoreName: {
          oneOf: [
            {
              type: "string",
              description: "The location in the AnnData store for the set confidence scores, like 'obs/celltype_prediction_score.'"
            }
          ]
        }
      }
    }
  },
  annDataCells: {
    type: "object",
    description: "The properties of this object are the configuration for how to layout scatterplots and spatial information",
    minProperties: 1,
    additionalProperties: false,
    required: [],
    properties: {
      xy: {
        type: "string",
        description: "The location in the AnnData store of cell centroids, like 'obsm/X_centroids.'"
      },
      poly: {
        type: "string",
        description: "The location in the AnnData store of cell polygon outlines, like 'obsm/X_polygons.'"
      },
      factors: {
        type: "array",
        description: "List of locations in the AnnData store of cell sets, like 'obs/louvain'",
        items: {
          type: "string"
        }
      },
      mappings: {
        patternProperties: {
          ".": {
            type: "object",
            description: "An object containing key-values for mappings like { UMAP: { key: 'obsm/X_umap', dims: [0, 1] } }.",
            additionalProperties: false,
            required: ["key"],
            properties: {
              key: {
                type: "string",
                description: "Where to look in the AnnData store for this mapping, like 'obsm/X_umap.'"
              },
              dims: {
                type: "array",
                description: "Which indices of the obsm object to take for a scatterplot, allowing for, for example, different PCs from obsm/X_pca",
                minItems: 2,
                maxItems: 2,
                items: { type: "number" }
              }
            }
          }
        }
      }
    }
  },
  annDataExpressionMatrix: {
    type: "object",
    description: "The properties of this object are the configuration for how to fetch the cell x genes matrix",
    additionalProperties: false,
    required: ["matrix"],
    properties: {
      matrix: {
        type: "string",
        description: "The location in the AnnData store of the cell x gene matrix, like 'obsm/hvg_subset.' or 'X'"
      },
      geneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the genes if using a subset of the data, like 'var.highly_variable.' if the matrix comes from 'obsm/hvg_subset.'"
      },
      matrixGeneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the matrix data (used in heatmap and histogram), like 'var.highly_variable.''"
      }
    }
  },
  requestInit: {
    type: "object",
    description: "The properties of this object correspond to the parameters of the JavaScript fetch() function.",
    additionalProperties: false,
    required: [],
    properties: {
      method: {
        type: "string"
      },
      headers: {
        type: "object"
      },
      body: {
        type: "string"
      },
      mode: {
        type: "string"
      },
      credentials: {
        type: "string"
      },
      cache: {
        type: "string"
      },
      redirect: {
        type: "string"
      },
      referrer: {
        type: "string"
      },
      integrity: {
        type: "string"
      }
    }
  },
  rasterLayer: {
    description: "The properties of this object are the rendering settings for the raster layer.",
    additionalProperties: false,
    required: ["channels", "colormap", "index", "opacity"],
    properties: {
      channels: {
        type: "array",
        items: {
          type: "object",
          additionalProperties: false,
          required: ["selection"],
          properties: {
            color: {
              type: "array",
              items: { type: "number" },
              description: "The color to use when rendering this channel under the null colormap."
            },
            selection: {
              type: "object",
              description: "Determines the channel selection, e.g. some Z and time slice."
            },
            slider: {
              type: "array",
              items: { type: "number" },
              description: "Determines the range for color mapping."
            },
            visible: {
              type: "boolean",
              description: "Determines whether this channel of the layer will be rendered in the spatial component."
            }
          }
        }
      },
      colormap: {
        oneOf: [
          {
            type: "string",
            description: "The name of the colormap to use for this layer."
          },
          {
            type: "null",
            description: "Use the solid color definitions."
          }
        ]
      },
      transparentColor: {
        oneOf: [
          {
            type: "array",
            minItems: 3,
            maxItems: 3,
            items: {
              type: "number",
              description: "One of R G or B (0 - 255)."
            },
            description: "Determines the color to be set to opacity 0"
          },
          {
            type: "null",
            description: "No selection."
          }
        ]
      },
      index: {
        type: "number",
        description: "The index of the layer among the array of layers available in the image file."
      },
      opacity: {
        type: "number"
      },
      modelMatrix: {
        oneOf: [
          {
            type: "array",
            minItems: 16,
            maxItems: 16,
            description: "transformation matrix for this layer"
          },
          {
            type: "null",
            description: "Use no transformation."
          }
        ]
      },
      domainType: {
        type: "string",
        enum: ["Full", "Min/Max"],
        description: "Determines the extent of the channel slider input element in the layer controller."
      },
      resolution: {
        type: "number",
        description: "Resolution of 3D volumetric rendering"
      },
      xSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      renderingMode: {
        type: "string",
        description: "Rendering mode of 3D volumetric rendering"
      },
      ySlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      zSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      type: {
        type: "string",
        enum: ["raster", "bitmask"]
      },
      use3d: {
        type: "boolean"
      },
      visible: {
        type: "boolean",
        description: "Determines whether this entire layer will be rendered in the spatial component."
      }
    }
  },
  moleculesLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the molecules layer.",
    additionalProperties: false,
    required: ["visible", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  cellsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the cells layer.",
    additionalProperties: false,
    required: ["visible", "stroked", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      stroked: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  neighborhoodsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the neighborhoods layer.",
    additionalProperties: false,
    required: ["visible"],
    properties: {
      visible: {
        type: "boolean"
      }
    }
  },
  spatialRasterLayers: {
    type: "array",
    description: "Array of Spatial Layers",
    items: {
      $ref: "#/definitions/rasterLayer"
    }
  }
};
var additionalProperties10 = false;
var required10 = ["version", "name", "datasets", "layout", "initStrategy"];
var properties10 = {
  name: { type: "string" },
  public: { type: "boolean" },
  description: { type: "string" },
  datasets: {
    type: "array",
    description: "The datasets array defines groups of files, where the files within each dataset reference the same entities (cells, genes, cell sets, etc).",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["uid", "files"],
      properties: {
        uid: { type: "string" },
        name: { type: "string" },
        description: { type: "string" },
        files: {
          type: "array",
          items: {
            type: "object",
            additionalProperties: false,
            required: ["type", "fileType"],
            properties: {
              name: { type: "string" },
              type: { type: "string" },
              fileType: { type: "string" },
              url: { type: "string" },
              options: { oneOf: [{ $ref: "#/definitions/annDataCellSets" }, { $ref: "https://github.com/vitessce/vitessce/#raster" }, { $ref: "#/definitions/annDataCells" }, { $ref: "#/definitions/annDataExpressionMatrix" }] },
              requestInit: { $ref: "#/definitions/requestInit" }
            }
          }
        }
      }
    }
  },
  coordinationSpace: {
    type: "object",
    description: "The coordination space stores the values for each scope of each coordination object.",
    additionalProperties: false,
    required: [],
    properties: {
      dataset: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetZ: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingType: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingCellSetPolygonsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelSize: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingCellRadius: {
        type: "object",
        patternProperties: {
          ".": {
            type: "number",
            description: "The cell radius value, used when embeddingCellRadiusMode is absolute or relative."
          }
        }
      },
      embeddingCellOpacity: {
        type: "object",
        patternProperties: {
          ".": {
            type: "number",
            description: "The cell opacity value, used when embeddingCellOpacityMode is static."
          }
        }
      },
      embeddingCellRadiusMode: {
        type: "object",
        patternProperties: {
          ".": {
            type: "string",
            enum: ["manual", "auto"],
            description: "Should data points representing cells be assigned a static (manual) or dynamic (auto, based on zoom level and data extent) radius?"
          }
        }
      },
      embeddingCellOpacityMode: {
        type: "object",
        patternProperties: {
          ".": {
            type: "string",
            enum: ["manual", "auto"],
            description: "Should data points representing cells be assigned a static (manual) or dynamic (auto, based on zoom level and data extent) opacity?"
          }
        }
      },
      spatialZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationOrbit: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialOrbitAxis: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "string" }
            ]
          }
        }
      },
      spatialAxisFixed: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "Whether or not to have a fixed axis for the camera. Only useful for 3D viewing."
              },
              { type: "boolean" }
            ]
          }
        }
      },
      spatialRasterLayers: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/spatialRasterLayers" }
            ]
          }
        }
      },
      spatialCellsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/cellsLayer" }
            ]
          }
        }
      },
      spatialNeighborhoodsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/neighborhoodsLayer" }
            ]
          }
        }
      },
      spatialMoleculesLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/moleculesLayer" }
            ]
          }
        }
      },
      heatmapZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      cellFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cells will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      cellHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto cell set initialization is enabled, cell set selections will be automatically initialized."
              },
              { type: "array" }
            ]
          }
        }
      },
      cellSetHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell sets will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetColor: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, cell set colors will be automatically initialized."
              },
              {
                type: "array",
                items: {
                  type: "object",
                  additionalProperties: false,
                  required: ["path", "color"],
                  properties: {
                    path: {
                      type: "array",
                      items: { type: "string" }
                    },
                    color: {
                      type: "array",
                      items: { type: "number" }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      cellColorEncoding: {
        type: "object",
        patternProperties: {
          ".": {
            type: "string",
            enum: ["geneSelection", "cellSetSelection"],
            description: "How should data points representing cells be colored?"
          }
        }
      },
      geneFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      geneSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneExpressionTransform: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "string", pattern: "log1p" }
            ]
          }
        }
      },
      geneExpressionColormap: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneExpressionColormapRange: {
        type: "object",
        patternProperties: {
          ".": { type: "array", items: { type: "number" } }
        }
      },
      genomicZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      additionalCellSets: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              {
                $ref: "https://github.com/vitessce/vitessce/#cell-sets"
              }
            ]
          }
        }
      },
      moleculeHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no molecule will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      }
    }
  },
  layout: { $ref: "#/definitions/components" },
  initStrategy: {
    type: "string",
    enum: ["none", "auto"],
    description: "The initialization strategy determines how missing coordination objects and coordination scope mappings are initially filled in."
  },
  version: {
    type: "string",
    enum: ["1.0.6"],
    description: "The schema version for the view config."
  }
};
var config_1_0_6_schema_default = {
  $schema: $schema16,
  $id: $id16,
  title: title16,
  type: type16,
  definitions: definitions16,
  additionalProperties: additionalProperties10,
  required: required10,
  properties: properties10
};

// src/app/view-config-upgraders.js


function upgradeReplaceViewProp(prefix, view, coordinationSpace) {
  const prevZScopes = Object.keys(coordinationSpace[`${prefix}Zoom`]);
  const prevTXScopes = Object.keys(coordinationSpace[`${prefix}TargetX`]);
  const prevTYScopes = Object.keys(coordinationSpace[`${prefix}TargetY`]);
  const nextZScope = getNextScope(prevZScopes);
  const nextTXScope = getNextScope(prevTXScopes);
  const nextTYScope = getNextScope(prevTYScopes);
  const { zoom, target: [targetX, targetY] } = view;
  coordinationSpace[`${prefix}Zoom`][nextZScope] = zoom;
  coordinationSpace[`${prefix}TargetX`][nextTXScope] = targetX;
  coordinationSpace[`${prefix}TargetY`][nextTYScope] = targetY;
  return {
    [`${prefix}Zoom`]: nextZScope,
    [`${prefix}TargetX`]: nextTXScope,
    [`${prefix}TargetY`]: nextTYScope
  };
}
function upgradeFrom0_1_0(config, datasetUid = null) {
  const coordinationSpace = {
    embeddingType: {},
    embeddingZoom: {},
    embeddingTargetX: {},
    embeddingTargetY: {},
    spatialZoom: {},
    spatialTargetX: {},
    spatialTargetY: {}
  };
  const layout = [];
  config.staticLayout.forEach((componentDef) => {
    var _a2;
    let newComponentDef = __spreadProps(__spreadValues({}, componentDef), {
      coordinationScopes: {}
    });
    if (componentDef.component === "scatterplot") {
      if (componentDef.props.mapping) {
        coordinationSpace.embeddingType[componentDef.props.mapping] = componentDef.props.mapping;
        newComponentDef = __spreadProps(__spreadValues({}, newComponentDef), {
          coordinationScopes: __spreadProps(__spreadValues({}, newComponentDef.coordinationScopes), {
            embeddingType: componentDef.props.mapping
          })
        });
      }
      if (componentDef.props.view) {
        const newScopeValues = upgradeReplaceViewProp("embedding", componentDef.props.view, coordinationSpace);
        newComponentDef = __spreadProps(__spreadValues({}, newComponentDef), {
          coordinationScopes: __spreadValues(__spreadValues({}, newComponentDef.coordinationScopes), newScopeValues)
        });
      }
    }
    if (componentDef.component === "spatial") {
      if ((_a2 = componentDef == null ? void 0 : componentDef.props) == null ? void 0 : _a2.view) {
        const newScopeValues = upgradeReplaceViewProp("spatial", componentDef.props.view, coordinationSpace);
        newComponentDef = __spreadProps(__spreadValues({}, newComponentDef), {
          coordinationScopes: __spreadValues(__spreadValues({}, newComponentDef.coordinationScopes), newScopeValues)
        });
      }
    }
    layout.push(newComponentDef);
  });
  const newDatasetUid = datasetUid || uuid_v4__WEBPACK_IMPORTED_MODULE_37___default()();
  return {
    version: "1.0.1",
    name: config.name,
    description: config.description,
    public: config.public,
    datasets: [
      {
        uid: newDatasetUid,
        name: newDatasetUid,
        files: config.layers.map((layer) => ({
          type: layer.type.toLowerCase(),
          fileType: layer.fileType,
          url: layer.url
        }))
      }
    ],
    initStrategy: "auto",
    coordinationSpace,
    layout
  };
}
function upgradeFrom1_0_0(config) {
  const coordinationSpace = __spreadValues({}, config.coordinationSpace);
  function replaceLayerType(layerType) {
    const isRaster = layerType === "raster";
    coordinationSpace[`spatial${capitalize(layerType)}Layer${isRaster ? "s" : ""}`] = {};
    Object.entries(coordinationSpace.spatialLayers).forEach(([scope, layers]) => {
      if (Array.isArray(layers) && layers.find((layer) => layer.type === layerType)) {
        const typedLayers = layers.filter((layer) => layer.type === layerType).map((layer) => {
          const newLayer = __spreadValues({}, layer);
          delete newLayer.type;
          return newLayer;
        });
        coordinationSpace[`spatial${capitalize(layerType)}Layer${isRaster ? "s" : ""}`][scope] = isRaster ? typedLayers : typedLayers[0];
      } else {
        coordinationSpace[`spatial${capitalize(layerType)}Layer${isRaster ? "s" : ""}`][scope] = null;
      }
    });
  }
  if (coordinationSpace.spatialLayers) {
    replaceLayerType("raster");
    replaceLayerType("cells");
    replaceLayerType("molecules");
    replaceLayerType("neighborhoods");
    delete coordinationSpace.spatialLayers;
  }
  const layout = config.layout.map((component) => {
    const newComponent = __spreadValues({}, component);
    function replaceCoordinationScope(layerType) {
      const isRaster = layerType === "raster";
      if (COMPONENT_COORDINATION_TYPES[newComponent.component].includes(`spatial${capitalize(layerType)}Layer${isRaster ? "s" : ""}`)) {
        newComponent.coordinationScopes[`spatial${capitalize(layerType)}Layer${isRaster ? "s" : ""}`] = newComponent.coordinationScopes.spatialLayers;
      }
    }
    if (newComponent.coordinationScopes && newComponent.coordinationScopes.spatialLayers) {
      replaceCoordinationScope("raster");
      replaceCoordinationScope("cells");
      replaceCoordinationScope("molecules");
      replaceCoordinationScope("neighborhoods");
      delete newComponent.coordinationScopes.spatialLayers;
    }
    return newComponent;
  });
  return __spreadProps(__spreadValues({}, config), {
    coordinationSpace,
    layout,
    version: "1.0.1"
  });
}
function upgradeFrom1_0_1(config) {
  var _a2;
  const layout = config.layout.map((component) => {
    const newComponent = __spreadValues({}, component);
    if (newComponent.component === "layerController") {
      newComponent.props = __spreadProps(__spreadValues({}, newComponent.props), {
        globalDisable3d: true
      });
    }
    return newComponent;
  });
  const newConfig = lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_74___default()(config);
  Object.keys(((_a2 = newConfig == null ? void 0 : newConfig.coordinationSpace) == null ? void 0 : _a2.spatialRasterLayers) || {}).forEach((key) => {
    if (newConfig.coordinationSpace.spatialRasterLayers[key]) {
      newConfig.coordinationSpace.spatialRasterLayers[key].forEach((layer, index) => {
        newConfig.coordinationSpace.spatialRasterLayers[key][index].type = ["bitmask", "raster"].includes(layer.type) ? layer.type : "raster";
      });
    }
  });
  return __spreadProps(__spreadValues({}, newConfig), {
    layout,
    version: "1.0.2"
  });
}
function upgradeFrom1_0_2(config) {
  const layout = config.layout.map((component) => {
    const newComponent = __spreadValues({}, component);
    if (newComponent.component === "layerController") {
      newComponent.props = __spreadProps(__spreadValues({}, newComponent.props), {
        disableChannelsIfRgbDetected: true
      });
    }
    return newComponent;
  });
  const newConfig = lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_74___default()(config);
  return __spreadProps(__spreadValues({}, newConfig), {
    layout,
    version: "1.0.3"
  });
}
function upgradeFrom1_0_3(config) {
  const newConfig = lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_74___default()(config);
  return __spreadProps(__spreadValues({}, newConfig), {
    version: "1.0.4"
  });
}
function upgradeFrom1_0_4(config) {
  const newConfig = lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_74___default()(config);
  return __spreadProps(__spreadValues({}, newConfig), {
    version: "1.0.5"
  });
}
function upgradeFrom1_0_5(config) {
  const newConfig = lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_74___default()(config);
  return __spreadProps(__spreadValues({}, newConfig), {
    version: "1.0.6"
  });
}

// src/app/view-config-versions.js
var LATEST_VERSION = "1.0.6";
var SCHEMA_HANDLERS = {
  "0.1.0": [new ajv__WEBPACK_IMPORTED_MODULE_70___default.a().compile(config_0_1_0_schema_default), upgradeFrom0_1_0],
  "1.0.0": [new ajv__WEBPACK_IMPORTED_MODULE_70___default.a().addSchema(cell_sets_schema_default).addSchema(raster_schema_default).compile(config_1_0_0_schema_default), upgradeFrom1_0_0],
  "1.0.1": [new ajv__WEBPACK_IMPORTED_MODULE_70___default.a().addSchema(cell_sets_schema_default).addSchema(raster_schema_default).compile(config_1_0_1_schema_default), upgradeFrom1_0_1],
  "1.0.2": [new ajv__WEBPACK_IMPORTED_MODULE_70___default.a().addSchema(cell_sets_schema_default).addSchema(raster_schema_default).compile(config_1_0_2_schema_default), upgradeFrom1_0_2],
  "1.0.3": [new ajv__WEBPACK_IMPORTED_MODULE_70___default.a().addSchema(cell_sets_schema_default).addSchema(raster_schema_default).compile(config_1_0_3_schema_default), upgradeFrom1_0_3],
  "1.0.4": [new ajv__WEBPACK_IMPORTED_MODULE_70___default.a().addSchema(cell_sets_schema_default).addSchema(raster_schema_default).compile(config_1_0_4_schema_default), upgradeFrom1_0_4],
  "1.0.5": [new ajv__WEBPACK_IMPORTED_MODULE_70___default.a().addSchema(cell_sets_schema_default).addSchema(raster_schema_default).compile(config_1_0_5_schema_default), upgradeFrom1_0_5],
  "1.0.6": [new ajv__WEBPACK_IMPORTED_MODULE_70___default.a().addSchema(cell_sets_schema_default).addSchema(raster_schema_default).compile(config_1_0_6_schema_default), null]
};

// src/app/CallbackPublisher.js
function validateViewConfig(viewConfig) {
  try {
    const validate = SCHEMA_HANDLERS[LATEST_VERSION][0];
    const valid = validate(viewConfig);
    if (!valid) {
      const failureReason = JSON.stringify(validate.errors, null, 2);
      throw new Error(`Config validation failed: ${failureReason}`);
    }
  } catch (e) {
    console.error(e);
  }
}
function CallbackPublisher(props) {
  const {
    onWarn,
    onConfigChange,
    onLoaderChange,
    validateOnConfigChange
  } = props;
  const warning = useWarning();
  const loaders = useLoaders();
  const viewConfigStoreApi = useViewConfigStoreApi();
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => viewConfigStoreApi.subscribe((viewConfig) => {
    if (validateOnConfigChange && viewConfig) {
      validateViewConfig(viewConfig);
    }
    if (onConfigChange && viewConfig) {
      onConfigChange(viewConfig);
    }
  }, (state) => state.viewConfig), [onConfigChange, validateOnConfigChange, viewConfigStoreApi]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (onWarn && warning) {
      onWarn(warning);
    }
  }, [warning, onWarn]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (onLoaderChange && loaders) {
      onLoaderChange(loaders);
    }
  }, [loaders, onLoaderChange]);
  return null;
}

// src/components/description/DescriptionSubscriber.js


// src/components/description/Description.js

function Description(props) {
  const { description: description2, metadata } = props;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "description"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", null, description2), metadata && Array.from(metadata.entries()).map(([layerIndex, { name: layerName, metadata: metadataRecord }]) => metadataRecord && Object.entries(metadataRecord).length > 0 ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("details", {
    key: layerIndex
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("summary", null, layerName), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "metadata-container"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("table", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tbody", null, Object.entries(metadataRecord).map(([key, value]) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", {
    key
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
    title: key
  }, key), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
    title: value
  }, value))))))) : null));
}

// src/components/description/DescriptionSubscriber.js
var DESCRIPTION_DATA_TYPES = ["raster"];
function DescriptionSubscriber(props) {
  const {
    coordinationScopes,
    description: descriptionOverride,
    removeGridComponent,
    theme,
    title: title17 = "Data Set"
  } = props;
  const loaders = useLoaders();
  const [{
    dataset,
    spatialRasterLayers: rasterLayers
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.description, coordinationScopes);
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(DESCRIPTION_DATA_TYPES);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    resetReadyItems();
  }, [loaders, dataset]);
  const [description2] = useDescription(loaders, dataset);
  const [raster, imageLayerLoaders, imageLayerMeta] = useRasterData(loaders, dataset, setItemIsReady, () => {
  }, false);
  const metadata = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => {
    const result = new Map();
    if (rasterLayers && rasterLayers.length > 0 && raster && imageLayerMeta && imageLayerLoaders) {
      rasterLayers.forEach((layer) => {
        if (imageLayerMeta[layer.index]) {
          const { format } = imageLayerLoaders[layer.index].metadata;
          result.set(`${layer.index}`, {
            name: raster.meta[layer.index].name,
            metadata: format && format()
          });
        }
      });
    }
    return result;
  }, [raster, rasterLayers, imageLayerMeta, imageLayerLoaders]);
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TitleInfo, {
    title: title17,
    removeGridComponent,
    isScroll: true,
    theme,
    isReady
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Description, {
    description: descriptionOverride || description2,
    metadata
  }));
}

// src/components/status/StatusSubscriber.js


// src/components/status/Status.js

function Status(props) {
  const warnClass = "alert alert-warning my-0 details";
  const { info, warn: warn2 } = props;
  const messages = [];
  if (info) {
    messages.push(/* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", {
      className: "details",
      key: "info"
    }, info));
  }
  if (warn2) {
    messages.push(/* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", {
      className: warnClass,
      key: "warn"
    }, warn2));
  }
  return messages;
}

// src/components/status/StatusSubscriber.js
function StatusSubscriber(props) {
  const {
    coordinationScopes,
    removeGridComponent,
    theme,
    title: title17 = "Status"
  } = props;
  const [{
    cellHighlight,
    geneHighlight,
    moleculeHighlight
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.status, coordinationScopes);
  const warn2 = useWarning();
  const infos = [
    ...cellHighlight ? [`Hovered cell ${cellHighlight}`] : [],
    ...geneHighlight ? [`Hovered gene ${geneHighlight}`] : [],
    ...moleculeHighlight ? [`Hovered gene ${moleculeHighlight}`] : []
  ];
  const info = infos.join("; ");
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TitleInfo, {
    title: title17,
    theme,
    removeGridComponent,
    isScroll: true,
    isReady: true
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Status, {
    warn: warn2,
    info
  }));
}

// src/components/genes/GenesSubscriber.js


// src/components/genes/Genes.js


// src/components/selectable-table/SelectableTable.js






function SelectableTable(props) {
  const {
    hasColorEncoding,
    columns,
    data,
    onChange,
    idKey = "id",
    valueKey = "value",
    allowMultiple = false,
    allowUncheck = false,
    showTableHead = true,
    showTableInputs = false,
    testHeight = void 0,
    testWidth = void 0
  } = props;
  const [selectedRows, setSelectedRows] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(null);
  const onSelectRow = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])((value, checked) => {
    if (checked || allowUncheck) {
      if (!allowMultiple) {
        setSelectedRows(checked ? [value] : []);
      } else {
        setSelectedRows(checked ? lodash_union__WEBPACK_IMPORTED_MODULE_76___default()(selectedRows || [], [value]) : lodash_difference__WEBPACK_IMPORTED_MODULE_77___default()(selectedRows || [], [value]));
      }
    }
  }, [allowMultiple, allowUncheck, selectedRows]);
  const handleInputChange = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])((event) => {
    const { target } = event;
    const { checked } = target;
    const { value } = target;
    onSelectRow(value, checked);
  }, [onSelectRow]);
  const getDataFromIds = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])((ids) => ids.map((id) => ({
    [idKey]: id,
    data: data.find((item) => item[idKey] === id)
  })), [data, idKey]);
  const isSelected = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])((id) => Array.isArray(selectedRows) && selectedRows.includes(id), [selectedRows]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    const initialSelectedRows = data.map((d) => {
      if (d[valueKey]) {
        return d[idKey];
      }
      return null;
    }).filter(Boolean);
    if (!lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(initialSelectedRows, selectedRows)) {
      if (initialSelectedRows.length > 0) {
        setSelectedRows(initialSelectedRows);
      } else {
        setSelectedRows(null);
      }
    }
  }, [data, idKey, valueKey]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (!onChange || !selectedRows) {
      return;
    }
    const selectedRowData = getDataFromIds(selectedRows);
    if (allowMultiple) {
      onChange(selectedRowData);
    } else if (selectedRows.length === 1) {
      onChange(selectedRowData[0]);
    } else if (selectedRows.length === 0) {
      onChange(null);
    }
  }, [selectedRows]);
  const inputUuid = uuid_v4__WEBPACK_IMPORTED_MODULE_37___default()();
  const hiddenInputsClass = showTableInputs ? "" : "hidden-input-column";
  const rowRenderer = ({ index, style }) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    key: data[index][idKey],
    className: `table-item table-row ${isSelected(data[index][idKey]) ? "row-checked " : ""}`,
    style,
    role: "button",
    onClick: () => onSelectRow(data[index][idKey], !isSelected(data[index][idKey]) || !hasColorEncoding)
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: `input-container ${hiddenInputsClass} table-cell`
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("label", {
    htmlFor: `${inputUuid}_${data[index][idKey]}`
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
    id: `${inputUuid}_${data[index][idKey]}`,
    type: "checkbox",
    className: allowMultiple ? "checkbox" : "radio",
    name: inputUuid,
    value: data[index][idKey],
    onChange: handleInputChange,
    checked: isSelected(data[index][idKey])
  }))), columns.map((column) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "table-cell",
    key: column
  }, data[index][column])));
  const headerRowRenderer = ({ style }) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: `${hiddenInputsClass} table-row`,
    style
  }, columns.map((column) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    key: column
  }, column)));
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "selectable-table"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_virtualized__WEBPACK_IMPORTED_MODULE_75__["AutoSizer"], null, ({ width, height }) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_virtualized__WEBPACK_IMPORTED_MODULE_75__["Table"], {
    height: testHeight || height,
    gridStyle: { outline: "none" },
    rowCount: data.length,
    rowHeight: 24,
    headerHeight: showTableHead ? 24 : void 0,
    rowRenderer,
    width: testWidth || width,
    headerRowRenderer: showTableHead ? headerRowRenderer : void 0,
    rowGetter: ({ index }) => data[index]
  })));
}

// src/components/genes/Genes.js
function Genes(props) {
  const {
    hasColorEncoding,
    geneList = [],
    geneSelection = [],
    geneFilter = null,
    setGeneSelection
  } = props;
  const [searchTerm, setSearchTerm] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])("");
  const [searchResults, setSearchResults] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(geneList);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    const results = geneList.filter((gene) => gene.toLowerCase().includes(searchTerm.toLowerCase()));
    setSearchResults(results);
  }, [searchTerm, geneList]);
  function onChange(selection) {
    if (setGeneSelection && selection && selection.name) {
      setGeneSelection([selection.name]);
    }
  }
  const data = searchResults.filter((gene) => geneFilter ? geneFilter.includes(gene) : true).sort((a, b) => a.localeCompare(b)).map((gene) => ({ name: gene, value: geneSelection ? geneSelection.includes(gene) : false }));
  const handleChange = (event) => {
    setSearchTerm(event.target.value);
  };
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
    className: "search-bar",
    type: "text",
    placeholder: "Search",
    value: searchTerm,
    onChange: handleChange
  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(SelectableTable, {
    columns: ["name"],
    data,
    hasColorEncoding,
    idKey: "name",
    valueKey: "value",
    onChange,
    allowUncheck: false,
    showTableHead: false
  }));
}

// src/components/genes/GenesSubscriber.js
var GENES_DATA_TYPES = ["expression-matrix"];
function GenesSubscriber(props) {
  const {
    coordinationScopes,
    removeGridComponent,
    variablesLabelOverride: variablesLabel = "gene",
    variablesPluralLabelOverride: variablesPluralLabel = `${variablesLabel}s`,
    theme,
    title: title17 = "Expression Levels"
  } = props;
  const loaders = useLoaders();
  const [{
    dataset,
    geneSelection,
    geneFilter,
    cellColorEncoding
  }, {
    setGeneSelection,
    setGeneFilter,
    setGeneHighlight,
    setCellColorEncoding
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.genes, coordinationScopes);
  const [urls, addUrl, resetUrls] = useUrls();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(GENES_DATA_TYPES);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    resetUrls();
    resetReadyItems();
  }, [loaders, dataset]);
  const [attrs] = useExpressionAttrs(loaders, dataset, setItemIsReady, addUrl, true);
  const geneList = attrs ? attrs.cols : [];
  const numGenes = geneList.length;
  function setGeneSelectionAndColorEncoding(newSelection) {
    setGeneSelection(newSelection);
    setCellColorEncoding("geneSelection");
  }
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TitleInfo, {
    title: title17,
    info: `${numGenes} ${pluralize(variablesLabel, variablesPluralLabel, numGenes)}`,
    theme,
    isScroll: true,
    removeGridComponent,
    isReady,
    urls
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Genes, {
    hasColorEncoding: cellColorEncoding === "geneSelection",
    geneList,
    geneSelection,
    geneFilter,
    setGeneSelection: setGeneSelectionAndColorEncoding,
    setGeneFilter,
    setGeneHighlight
  }));
}

// src/components/sets/CellSetsManagerSubscriber.js



// package.json
var name = "vitessce";
var version = "1.1.17";
var description = "Vitessce app and React component library";
var author = "C McCallum";
var homepage = "http://vitessce.io/";
var license = "MIT";
var repository = "https://github.com/vitessce/vitessce/";
var keywords = [
  "react-component"
];
var files = [
  "dist",
  "src"
];
var main = "dist/umd/production/index.min.js";
var module = "dist/esm/index.js";
var peerDependencies = {
  react: "^16.8.6",
  "react-dom": "^16.8.6"
};
var dependencies = {
  "@babel/runtime": "7.8.7",
  "@hms-dbmi/viv": "~0.12.0",
  "@loaders.gl/3d-tiles": "^3.0.0",
  "@loaders.gl/core": "^3.0.0",
  "@loaders.gl/images": "^3.0.0",
  "@loaders.gl/loader-utils": "^3.0.0",
  "@luma.gl/core": "~8.5.10",
  "@material-ui/core": "~4.12.3",
  "@material-ui/icons": "~4.11.2",
  "@math.gl/core": "^3.5.6",
  "@turf/area": "^6.5.0",
  "@turf/boolean-contains": "^6.0.1",
  "@turf/boolean-overlap": "^6.0.1",
  "@turf/boolean-point-in-polygon": "^6.0.1",
  "@turf/boolean-within": "^6.0.1",
  "@turf/centroid": "^6.0.2",
  "@turf/helpers": "^6.1.4",
  ajv: "^6.10.0",
  bowser: "^2.11.0",
  classnames: "^2.2.6",
  clsx: "^1.1.1",
  concaveman: "^1.2.1",
  "d3-array": "^2.4.0",
  "d3-dsv": "^1.1.1",
  "d3-force": "^2.1.1",
  "d3-quadtree": "^1.0.7",
  "d3-scale-chromatic": "^1.3.3",
  "deck.gl": "~8.6.0",
  "dynamic-import-polyfill": "^0.1.1",
  "fast-deep-equal": "^3.1.3",
  glslify: "^7.0.0",
  higlass: "1.11.4",
  "higlass-register": "^0.3.0",
  "higlass-zarr-datafetchers": "^0.2.1",
  internmap: "^2.0.3",
  json2csv: "^4.5.2",
  lodash: "^4.17.15",
  "lz-string": "^1.4.4",
  "math.gl": "^3.5.6",
  mathjs: "^9.2.0",
  "nebula.gl": "^0.23.8",
  "prop-types": "^15.7.2",
  "rc-tooltip": "^4.0.3",
  "rc-tree": "2.1.0",
  "react-color": "^2.18.0",
  "react-grid-layout": "^1.1.1",
  "react-vega": "^7.4.4",
  "react-virtualized": "^9.22.2",
  "short-number": "^1.0.6",
  store: "^2.0.12",
  tinycolor2: "^1.4.1",
  uuid: "^3.3.2",
  vega: "^5.21.0",
  "vega-lite": "^5.1.1",
  "vega-tooltip": "^0.27.0",
  "whatwg-fetch": "^3.0.0",
  "window-pixi": "5.3.3",
  zarr: "^0.5.1",
  zustand: "^3.5.10"
};
var devDependencies = {
  "@babel/core": "7.9.0",
  "@babel/plugin-proposal-class-properties": "7.14.5",
  "@svgr/webpack": "5.3.1",
  "@typescript-eslint/eslint-plugin": "^2.10.0",
  "@typescript-eslint/parser": "^2.10.0",
  "babel-eslint": "10.0.3",
  "babel-loader": "8.1.0",
  "babel-plugin-glsl": "^1.0.0",
  "babel-plugin-named-asset-import": "^0.3.6",
  "babel-preset-react-app": "9.1.2",
  camelcase: "^5.3.1",
  "case-sensitive-paths-webpack-plugin": "2.3.0",
  concurrently: "^5.3.0",
  "css-loader": "3.4.2",
  cypress: "^3.6.1",
  "cypress-fail-on-console-error": "^2.0.6",
  dotenv: "8.2.0",
  "dotenv-expand": "5.1.0",
  enzyme: "^3.9.0",
  "enzyme-adapter-react-16": "^1.11.2",
  esbuild: "^0.12.28",
  "esbuild-plugin-babel": "^0.2.3",
  "esbuild-plugin-sass": "^0.6.0",
  eslint: "^6.6.0",
  "eslint-config-airbnb": "^17.1.0",
  "eslint-config-react-app": "^5.2.0",
  "eslint-loader": "3.0.3",
  "eslint-plugin-cypress": "^2.2.1",
  "eslint-plugin-flowtype": "4.6.0",
  "eslint-plugin-import": "2.20.0",
  "eslint-plugin-jsx-a11y": "6.2.3",
  "eslint-plugin-react": "7.18.0",
  "eslint-plugin-react-hooks": "^1.6.1",
  "eslint-plugin-vitessce-rules": "file:eslint",
  expect: "^24.5.0",
  "file-loader": "4.3.0",
  "fs-extra": "^8.1.0",
  "glsl-colormap": "^1.0.1",
  "html-webpack-plugin": "4.0.0-beta.11",
  "http-server": "^0.12.3",
  "identity-obj-proxy": "3.0.0",
  "js-yaml": "^3.13.1",
  karma: "4.4.1",
  "karma-chrome-launcher": "3.1.0",
  "karma-mocha": "1.3.0",
  "karma-mocha-reporter": "2.2.5",
  "karma-sourcemap-loader": "0.3.7",
  "karma-webpack": "4.0.2",
  "mini-css-extract-plugin": "0.9.0",
  mocha: "7.1.0",
  "node-sass": "^6.0.0",
  "object.fromentries": "^2.0.2",
  "optimize-css-assets-webpack-plugin": "5.0.3",
  "pnp-webpack-plugin": "1.6.0",
  "postcss-flexbugs-fixes": "4.1.0",
  "postcss-loader": "3.0.0",
  "postcss-normalize": "8.0.1",
  "postcss-preset-env": "6.7.0",
  "postcss-safe-parser": "4.0.1",
  react: "^16.14.0",
  "react-app-polyfill": "^1.0.6",
  "react-dev-utils": "^10.2.0",
  "react-dom": "^16.14.0",
  resolve: "1.15.0",
  "resolve-url-loader": "3.1.1",
  "sass-loader": "^10.0.1",
  semver: "6.3.0",
  "style-loader": "0.23.1",
  "terser-webpack-plugin": "2.3.4",
  "url-loader": "2.3.0",
  "wait-on": "^3.2.0",
  webpack: "4.41.5",
  "webpack-dev-server": "3.10.2",
  "webpack-node-externals": "^2.5.2",
  "workbox-webpack-plugin": "4.3.1",
  "worker-loader": "^2.0.0"
};
var resolutions = {
  "@turf/difference": "6.0.1"
};
var scripts = {
  "build-demo:prod": "node scripts/build-demo.js production",
  "build-lib:prod": "NODE_ENV=production node scripts/build-esm.mjs && node scripts/build-lib.js production",
  "build-demo:dev": "node scripts/build-demo.js development",
  "build-lib:dev": "NODE_ENV=development node scripts/build-esm.mjs && node scripts/build-lib.js development",
  "build:prod": "npm run build-demo:prod && npm run build-lib:prod",
  "build:dev": "npm run build-demo:dev && npm run build-lib:dev",
  "build-lib:esm": "NODE_ENV=production node scripts/build-esm.mjs",
  prepublishOnly: "npm run build-lib:prod",
  clean: "rm -r dist-demo dist",
  start: "node scripts/start-demo.js",
  "start:fixtures": 'http-server src/loaders/fixtures/ --cors="*" -s',
  "start:fixtures-concurrently": 'concurrently --kill-others "npm run start:fixtures"',
  test: 'npm run start:fixtures-concurrently -- --success first "karma start scripts/karma.config.js --single-run"',
  "test:watch": 'npm run start:fixtures-concurrently -- "karma start scripts/karma.config.js --auto-watch"',
  "cypress:open": 'npm run start:fixtures-concurrently -- "cypress open"',
  "cypress:run": 'npm run start:fixtures-concurrently -- --success first --kill-others "cypress run"',
  "lint-fix": "eslint -c .eslintrc.yml --ext .js --fix src/"
};
var browserslist = {
  production: [
    ">0.2%",
    "not dead",
    "not op_mini all"
  ],
  development: [
    "last 1 chrome version",
    "last 1 firefox version",
    "last 1 safari version"
  ]
};
var babel = {
  presets: [
    "react-app"
  ],
  plugins: [
    "glsl"
  ]
};
var package_default = {
  name,
  version,
  description,
  author,
  homepage,
  license,
  repository,
  keywords,
  files,
  main,
  module,
  peerDependencies,
  dependencies,
  devDependencies,
  resolutions,
  scripts,
  browserslist,
  babel
};

// src/components/sets/SetsManager.js



// src/components/sets/Tree.js



var Tree = react__WEBPACK_IMPORTED_MODULE_0___default.a.forwardRef((props, ref) => {
  const {
    prefixCls,
    className,
    showIcon,
    blockNode,
    children,
    checkable
  } = props;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(rc_tree__WEBPACK_IMPORTED_MODULE_78__["default"], __spreadProps(__spreadValues({
    itemHeight: 32,
    ref
  }, props), {
    className: classnames__WEBPACK_IMPORTED_MODULE_79___default()(className, {
      [`${prefixCls}-icon-hide`]: !showIcon,
      [`${prefixCls}-block-node`]: blockNode
    }),
    checkable: checkable ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
      className: `${prefixCls}-checkbox-inner`
    }) : checkable
  }), children);
});
Tree.defaultProps = {
  virtual: false,
  checkable: false,
  showIcon: false,
  blockNode: true,
  prefixCls: "rc-tree"
};
var Tree_default = Tree;

// src/components/sets/TreeNode.js








// src/components/sets/PopoverMenu.js



// src/components/sets/Popover.js


// src/components/sets/HelpTooltip.js


function HelpTooltip(props) {
  const { title: title17, content, overlayClassName } = props;
  const spanRef = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])();
  const getTooltipContainer = useVitessceContainer(spanRef);
  const overlay = title17 || content;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
    ref: spanRef
  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(rc_tooltip__WEBPACK_IMPORTED_MODULE_83__["default"], __spreadValues({
    getTooltipContainer,
    overlayClassName,
    overlay
  }, props)));
}
HelpTooltip.defaultProps = {
  overlayClassName: "help-tooltip",
  placement: "top",
  trigger: "hover",
  mouseEnterDelay: 0.2,
  mouseLeaveDelay: 0
};

// src/components/sets/Popover.js
function Popover(props) {
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(HelpTooltip, __spreadValues({}, props));
}
Popover.defaultProps = {
  overlayClassName: "popover",
  placement: "top",
  trigger: "click",
  mouseEnterDelay: 0,
  mouseLeaveDelay: 0
};

// src/components/sets/PopoverMenu.js
function PopoverMenuListButton(props) {
  const {
    title: title17,
    subtitle,
    onClick,
    handler,
    handlerKey,
    confirm,
    visible
  } = props;
  const [isConfirming, setIsConfirming] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    setIsConfirming(false);
  }, [visible]);
  function handleOrRequireConfirm() {
    if (!confirm || isConfirming) {
      onClick();
      handler();
    } else {
      setIsConfirming(true);
    }
  }
  const titleWithConfirm = `${isConfirming ? "Confirm " : ""}${title17}`;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
    title: titleWithConfirm,
    type: "button",
    onClick: handleOrRequireConfirm,
    onKeyPress: (e) => callbackOnKeyPress(e, handlerKey, handleOrRequireConfirm)
  }, titleWithConfirm, subtitle && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br", null), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
    className: "small"
  }, subtitle)));
}
function PopoverMenuList(props) {
  const {
    menuConfig,
    onClick,
    color = null,
    palette = null,
    setColor = null,
    visible
  } = props;
  function handleColorChange({ rgb }) {
    if (rgb && setColor) {
      setColor([rgb.r, rgb.g, rgb.b]);
    }
  }
  const defaultPalette = palette ? palette.map(colorArrayToString) : PALETTE.concat([[255, 255, 255], [128, 128, 128], [0, 0, 0]]).map(colorArrayToString);
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, color && setColor && defaultPalette && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_color__WEBPACK_IMPORTED_MODULE_82__["TwitterPicker"], {
    className: "popover-menu-color",
    disableAlpha: true,
    width: 108,
    triangle: "hide",
    colors: defaultPalette,
    color: colorArrayToString(color),
    onChangeComplete: handleColorChange
  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul", {
    className: "popover-menu-list"
  }, menuConfig.map((item) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", {
    key: item.title + item.subtitle
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(PopoverMenuListButton, __spreadProps(__spreadValues({}, item), {
    onClick,
    visible
  }))))));
}
function PopoverMenu(props) {
  const {
    menuConfig,
    placement,
    children,
    color = null,
    setColor = null,
    palette = null
  } = props;
  const [visible, setVisible] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Popover, {
    content: /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(PopoverMenuList, {
      menuConfig,
      onClick: () => setVisible(false),
      color,
      setColor,
      palette,
      visible
    }),
    placement,
    visible,
    onVisibleChange: setVisible
  }, children);
}

// src/assets/menu.svg

function SvgMenu(props) {
  return /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("svg", __spreadValues({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24"
  }, props), /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("path", {
    d: "M12 18c1.657 0 3 1.343 3 3s-1.343 3-3 3-3-1.343-3-3 1.343-3 3-3zm0-9c1.657 0 3 1.343 3 3s-1.343 3-3 3-3-1.343-3-3 1.343-3 3-3zm0-9c1.657 0 3 1.343 3 3s-1.343 3-3 3-3-1.343-3-3 1.343-3 3-3z"
  }));
}
var ReactComponent4 = SvgMenu;

// src/components/sets/TreeNode.js
function makeNodeViewMenuConfig(props) {
  const {
    path,
    level,
    height,
    onCheckNode,
    onNodeRemove,
    onNodeSetIsEditing,
    onExportLevelZeroNodeJSON,
    onExportLevelZeroNodeTabular,
    onExportSetJSON,
    checkable,
    editable,
    exportable,
    checked
  } = props;
  return [
    ...editable ? [
      {
        title: "Rename",
        handler: () => {
          onNodeSetIsEditing(path, true);
        },
        handlerKey: "r"
      },
      {
        title: "Delete",
        confirm: true,
        handler: () => {
          onNodeRemove(path);
        },
        handlerKey: "d"
      }
    ] : [],
    ...level === 0 && exportable ? [
      {
        title: "Export hierarchy",
        subtitle: "(to JSON file)",
        handler: () => {
          onExportLevelZeroNodeJSON(path);
        },
        handlerKey: "j"
      },
      ...height <= 1 ? [
        {
          title: "Export hierarchy",
          subtitle: "(to CSV file)",
          handler: () => {
            onExportLevelZeroNodeTabular(path);
          },
          handlerKey: "t"
        }
      ] : []
    ] : [],
    ...level > 0 ? [
      ...checkable ? [
        {
          title: checked ? "Uncheck" : "Check",
          handler: () => {
            onCheckNode(path, !checked);
          },
          handlerKey: "s"
        }
      ] : [],
      ...exportable ? [
        {
          title: "Export set",
          subtitle: "(to JSON file)",
          handler: () => {
            onExportSetJSON(path);
          },
          handlerKey: "e"
        }
      ] : []
    ] : []
  ];
}
function NamedSetNodeStatic(props) {
  const {
    title: title17,
    path,
    nodeKey,
    level,
    height,
    color,
    checkbox,
    isChecking,
    isLeaf,
    onNodeSetColor,
    onNodeView,
    expanded,
    onCheckLevel,
    checkedLevelPath,
    checkedLevelIndex,
    disableTooltip,
    size,
    datatype,
    editable,
    theme
  } = props;
  const shouldCheckNextLevel = level === 0 && !expanded;
  const nextLevelToCheck = checkedLevelIndex && lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(path, checkedLevelPath) && checkedLevelIndex < height ? checkedLevelIndex + 1 : 1;
  const numberFormatter = new Intl.NumberFormat("en-US");
  const niceSize = numberFormatter.format(size);
  let tooltipText;
  if (shouldCheckNextLevel) {
    tooltipText = getLevelTooltipText(nextLevelToCheck);
  } else if (isLeaf || !expanded) {
    tooltipText = `Color individual set (${niceSize} ${datatype}${size === 1 ? "" : "s"})`;
  } else {
    tooltipText = "Color by expanded descendants";
  }
  const onClick = level === 0 && !expanded ? () => onCheckLevel(nodeKey, nextLevelToCheck) : () => onNodeView(path);
  const tooltipProps = disableTooltip ? { visible: false } : {};
  const popoverMenuConfig = makeNodeViewMenuConfig(props);
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(HelpTooltip, __spreadValues({
    title: tooltipText
  }, tooltipProps), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
    type: "button",
    onClick,
    onKeyPress: (e) => callbackOnKeyPress(e, "v", () => onNodeView(path)),
    className: "title-button"
  }, title17)), popoverMenuConfig.length > 0 ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(PopoverMenu, {
    menuConfig: makeNodeViewMenuConfig(props),
    color: level > 0 && editable ? color || getDefaultColor(theme) : null,
    setColor: (c) => onNodeSetColor(path, c)
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ReactComponent4, {
    className: "node-menu-icon"
  })) : null, level > 0 && isChecking ? checkbox : null, level > 0 && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
    className: "node-size-label"
  }, niceSize));
}
function NamedSetNodeEditing(props) {
  const {
    title: title17,
    path,
    onNodeSetName,
    onNodeCheckNewName
  } = props;
  const [currentTitle, setCurrentTitle] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(title17);
  const hasConflicts = onNodeCheckNewName(path, currentTitle);
  function trySetName() {
    if (!hasConflicts) {
      onNodeSetName(path, currentTitle, true);
    }
  }
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
    className: "title-button-with-input"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
    autoFocus: true,
    className: "title-input",
    type: "text",
    value: currentTitle,
    onChange: (e) => {
      setCurrentTitle(e.target.value);
    },
    onKeyPress: (e) => callbackOnKeyPress(e, "Enter", trySetName),
    onFocus: (e) => e.target.select()
  }), !hasConflicts && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
    type: "button",
    className: "title-save-button",
    onClick: trySetName
  }, "Save"));
}
function NamedSetNode(props) {
  const {
    isEditing,
    isCurrentSet
  } = props;
  return isEditing || isCurrentSet ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(NamedSetNodeEditing, __spreadValues({}, props)) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(NamedSetNodeStatic, __spreadValues({}, props));
}
function LevelsButtons(props) {
  const {
    nodeKey,
    path,
    height,
    onCheckLevel,
    checkedLevelPath,
    checkedLevelIndex,
    hasColorEncoding
  } = props;
  function onCheck(event) {
    if (event.target.checked) {
      const newLevel = parseInt(event.target.value, 10);
      onCheckLevel(nodeKey, newLevel);
    }
  }
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "level-buttons-container"
  }, lodash_range__WEBPACK_IMPORTED_MODULE_40___default()(1, height + 1).map((i) => {
    const isChecked = lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(path, checkedLevelPath) && i === checkedLevelIndex;
    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      className: "level-buttons",
      key: i
    }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(HelpTooltip, {
      title: getLevelTooltipText(i)
    }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
      className: Object(clsx__WEBPACK_IMPORTED_MODULE_80__["default"])("level-radio-button", { checked: isChecked && !hasColorEncoding }),
      type: "checkbox",
      value: i,
      checked: isChecked && hasColorEncoding,
      onChange: onCheck
    })));
  }));
}
function SwitcherIcon(props) {
  const {
    isLeaf,
    isOpen,
    color
  } = props;
  const hexColor = color ? colorArrayToString(color) : void 0;
  if (isLeaf) {
    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
      className: "anticon anticon-circle rc-tree-switcher-icon"
    }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("svg", {
      viewBox: "0 0 1024 1024",
      focusable: "false",
      "data-icon": "caret-down",
      width: "1em",
      height: "1em",
      "aria-hidden": "true"
    }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("rect", {
      fill: hexColor,
      x: 600 / 2,
      y: 600 / 2,
      width: 1024 - 600,
      height: 1024 - 600
    })));
  }
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
    className: "anticon anticon-caret-down rc-tree-switcher-icon"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("svg", {
    viewBox: "0 0 1024 1024",
    focusable: "false",
    "data-icon": "caret-down",
    width: "1em",
    height: "1em",
    "aria-hidden": "true"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("path", {
    fill: isOpen ? "#444" : hexColor,
    d: "M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z"
  })));
}
var TreeNode = class extends rc_tree__WEBPACK_IMPORTED_MODULE_78__["TreeNode"] {
  constructor() {
    super(...arguments);
    __publicField(this, "renderSelector", () => {
      const {
        title: title17,
        isCurrentSet,
        isSelected,
        isEditing,
        onDragStart: onDragStartProp
      } = this.props;
      const {
        rcTree: {
          prefixCls: prefixClass,
          draggable
        }
      } = this.context;
      const onDragStart = (e) => {
        onDragStartProp();
        this.onDragStart(e);
      };
      const wrapClass = `${prefixClass}-node-content-wrapper`;
      const isDraggable = !isCurrentSet && !isEditing && draggable;
      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
        ref: this.setSelectHandle,
        title: title17,
        className: classnames__WEBPACK_IMPORTED_MODULE_79___default()(wrapClass, `${wrapClass}-${this.getNodeState() || "normal"}`, isSelected && `${prefixClass}-node-selected`, isDraggable && "draggable"),
        draggable: isDraggable,
        "aria-grabbed": isDraggable,
        onDragStart: isDraggable ? onDragStart : void 0
      }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(NamedSetNode, __spreadProps(__spreadValues({}, this.props), {
        prefixClass,
        checkbox: this.renderCheckbox()
      })), this.renderLevels());
    });
    __publicField(this, "renderLevels", () => {
      const { level, expanded } = this.props;
      if (level !== 0 || expanded) {
        return null;
      }
      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(LevelsButtons, __spreadValues({}, this.props));
    });
    __publicField(this, "renderSwitcher", () => {
      const { expanded, isLeaf, color } = this.props;
      const {
        rcTree: {
          prefixCls: prefixClass,
          onNodeExpand
        }
      } = this.context;
      const onNodeExpandWrapper = (e) => {
        if (!isLeaf) {
          onNodeExpand(e, this);
        }
      };
      const switcherClass = classnames__WEBPACK_IMPORTED_MODULE_79___default()(`${prefixClass}-switcher`, { [`${prefixClass}-switcher_${expanded ? "open" : "close"}`]: !isLeaf });
      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
        className: switcherClass,
        onClick: onNodeExpandWrapper,
        onKeyPress: (e) => callbackOnKeyPress(e, "d", onNodeExpandWrapper),
        role: "button",
        tabIndex: "0"
      }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(SwitcherIcon, {
        isLeaf,
        isOpen: expanded,
        color
      }));
    });
  }
  render() {
    const _a2 = this.props, {
      style,
      loading,
      level,
      dragOver,
      dragOverGapTop,
      dragOverGapBottom,
      isLeaf,
      expanded,
      selected,
      checked,
      halfChecked,
      onDragEnd: onDragEndProp,
      expandable
    } = _a2, otherProps = __objRest(_a2, [
      "style",
      "loading",
      "level",
      "dragOver",
      "dragOverGapTop",
      "dragOverGapBottom",
      "isLeaf",
      "expanded",
      "selected",
      "checked",
      "halfChecked",
      "onDragEnd",
      "expandable"
    ]);
    const {
      rcTree: {
        prefixCls: prefixClass,
        filterTreeNode,
        draggable
      }
    } = this.context;
    const disabled = this.isDisabled();
    const dataAndAriaAttributeProps = Object(rc_tree_es_util__WEBPACK_IMPORTED_MODULE_81__["getDataAndAria"])(otherProps);
    const onDragEnd = (e) => {
      onDragEndProp();
      this.onDragEnd(e);
    };
    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", __spreadValues({
      className: classnames__WEBPACK_IMPORTED_MODULE_79___default()("rc-tree-treenode", `level-${level}-treenode`, {
        [`${prefixClass}-treenode-disabled`]: disabled,
        [`${prefixClass}-treenode-switcher-${expanded ? "open" : "close"}`]: !isLeaf,
        [`${prefixClass}-treenode-checkbox-checked`]: checked,
        [`${prefixClass}-treenode-checkbox-indeterminate`]: halfChecked,
        [`${prefixClass}-treenode-selected`]: selected,
        [`${prefixClass}-treenode-loading`]: loading,
        "drag-over": !disabled && dragOver,
        "drag-over-gap-top": !disabled && dragOverGapTop,
        "drag-over-gap-bottom": !disabled && dragOverGapBottom,
        "filter-node": filterTreeNode && filterTreeNode(this)
      }),
      style,
      role: "treeitem",
      onDragEnter: draggable ? this.onDragEnter : void 0,
      onDragOver: draggable ? this.onDragOver : void 0,
      onDragLeave: draggable ? this.onDragLeave : void 0,
      onDrop: draggable ? this.onDrop.bind(this) : void 0,
      onDragEnd: draggable ? onDragEnd : void 0
    }, dataAndAriaAttributeProps), expandable ? this.renderSwitcher() : null, this.renderSelector(), this.renderChildren());
  }
};

// src/components/sets/SetsManagerButtons.js


// src/assets/sets/union.svg

function SvgUnion(props) {
  return /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("svg", __spreadValues({
    viewBox: "0 0 16.433999 10.234",
    height: 12,
    width: 18
  }, props), /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("g", {
    transform: "translate(0.117,-2.883)"
  }, /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("path", {
    d: "m 11.467471,11.811278 c 0.198237,-0.322177 0.508,-1.011333 0.653661,-1.454255 0.659343,-2.0049141 0.44323,-4.2620847 -0.577734,-6.0340822 l -0.168844,-0.2930481 0.105744,0.017887 c 0.759902,0.1285441 1.368762,0.3699553 1.856675,0.7361658 1.988296,1.4923476 2.192477,4.3353549 0.434717,6.0529895 -0.641216,0.626581 -1.299647,0.94683 -2.294136,1.115833 l -0.108488,0.01844 z M 4.3162122,11.919169 C 1.9278944,11.487872 0.46692382,9.0323123 1.234873,6.7401372 1.5621727,5.763213 2.2610593,4.9489746 3.1840041,4.4693005 3.5978035,4.2542401 3.9427842,4.145371 4.5197023,4.0477802 L 4.6254464,4.0298927 4.4571836,4.3223069 C 3.4332707,6.1017061 3.2180432,8.3476022 3.878868,10.357023 c 0.1458466,0.443487 0.4554716,1.132155 0.6542959,1.455285 0.054471,0.08853 0.087814,0.159599 0.074096,0.157937 -0.013718,-0.0017 -0.1446898,-0.02465 -0.2910477,-0.05108 z M 5.0000001,3 C 2.2,3 0,5.2 0,8 c 0,2.8 2.2,5 5.0000001,5 0.6,0 1.1,-0.1 1.6,-0.3 C 5.3000001,11.6 4.5,9.7999998 4.5,8 4.5,6.2 5.3000001,4.5 6.6000001,3.3 c -0.5,-0.2 -1,-0.3 -1.6,-0.3 z M 4.65,4.02 C 3.92,5.17 3.51,6.54 3.51,8 c 0,1.4599998 0.42,2.83 1.14,3.98 C 2.61,11.8 1.01,10.08 1.01,8 1.01,5.92 2.61,4.2 4.65,4.02 Z M 8,4 C 6.8,4.9 6,6.4 6,8 6,9.6 6.8,11.1 8,12 9.2,11.1 10,9.7 10,8 10,6.3 9.2,4.9 8,4 Z m 3,-1 c 2.8,0 5,2.2 5,5 0,2.8 -2.2,5 -5,5 C 10.4,13 9.9,12.9 9.4,12.7 10.7,11.6 11.5,9.8 11.5,8 11.5,6.2 10.7,4.5 9.4,3.3 9.9,3.1 10.4,3 11,3 Z m 0.35,1.02 c 0.73,1.15 1.14,2.52 1.14,3.98 0,1.46 -0.42,2.83 -1.14,3.98 2.04,-0.18 3.64,-1.9 3.64,-3.98 0,-2.08 -1.6,-3.8 -3.64,-3.98 z",
    style: {
      strokeWidth: 0.234,
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeOpacity: 1
    }
  })));
}
var ReactComponent5 = SvgUnion;

// src/assets/sets/intersection.svg

function SvgIntersection(props) {
  return /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("svg", __spreadValues({
    width: 18,
    height: 12,
    viewBox: "0 0 16 10"
  }, props), /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("g", {
    transform: "translate(0,-3)"
  }, /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("path", {
    d: "M 5.0000001,3 C 2.2,3 0,5.2 0,8 c 0,2.8 2.2,5 5.0000001,5 0.6,0 1.1,-0.1 1.6,-0.3 C 5.3000001,11.6 4.5,9.7999998 4.5,8 4.5,6.2 5.3000001,4.5 6.6000001,3.3 c -0.5,-0.2 -1,-0.3 -1.6,-0.3 z M 4.65,4.02 C 3.92,5.17 3.51,6.54 3.51,8 c 0,1.4599998 0.42,2.83 1.14,3.98 C 2.61,11.8 1.01,10.08 1.01,8 1.01,5.92 2.61,4.2 4.65,4.02 Z M 8,4 C 6.8,4.9 6,6.4 6,8 6,9.6 6.8,11.1 8,12 9.2,11.1 10,9.7 10,8 10,6.3 9.2,4.9 8,4 Z m 3,-1 c 2.8,0 5,2.2 5,5 0,2.8 -2.2,5 -5,5 C 10.4,13 9.9,12.9 9.4,12.7 10.7,11.6 11.5,9.8 11.5,8 11.5,6.2 10.7,4.5 9.4,3.3 9.9,3.1 10.4,3 11,3 Z m 0.35,1.02 c 0.73,1.15 1.14,2.52 1.14,3.98 0,1.46 -0.42,2.83 -1.14,3.98 2.04,-0.18 3.64,-1.9 3.64,-3.98 0,-2.08 -1.6,-3.8 -3.64,-3.98 z",
    style: {
      strokeWidth: 0.234,
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeOpacity: 1
    }
  })));
}
var ReactComponent6 = SvgIntersection;

// src/assets/sets/complement.svg

function SvgComplement(props) {
  return /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("svg", __spreadValues({
    id: "svg14",
    viewBox: "0 0 25.3804963846 16",
    height: 16,
    width: 25.3804963846
  }, props), /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("defs", null, /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("mask", {
    id: "union-mask",
    x: 0,
    y: 0,
    width: 25.3804963846,
    height: 16
  }, /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("rect", {
    x: "5%",
    width: "90%",
    height: "100%",
    fill: "white"
  }), /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("g", {
    transform: "translate(4.69,0)"
  }, /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("path", {
    d: "m 11.467471,11.811278 c 0.198237,-0.322177 0.508,-1.011333 0.653661,-1.454255 0.659343,-2.0049141 0.44323,-4.2620847 -0.577734,-6.0340822 l -0.168844,-0.2930481 0.105744,0.017887 c 0.759902,0.1285441 1.368762,0.3699553 1.856675,0.7361658 1.988296,1.4923476 2.192477,4.3353549 0.434717,6.0529895 -0.641216,0.626581 -1.299647,0.94683 -2.294136,1.115833 l -0.108488,0.01844 z M 4.3162122,11.919169 C 1.9278944,11.487872 0.46692382,9.0323123 1.234873,6.7401372 1.5621727,5.763213 2.2610593,4.9489746 3.1840041,4.4693005 3.5978035,4.2542401 3.9427842,4.145371 4.5197023,4.0477802 L 4.6254464,4.0298927 4.4571836,4.3223069 C 3.4332707,6.1017061 3.2180432,8.3476022 3.878868,10.357023 c 0.1458466,0.443487 0.4554716,1.132155 0.6542959,1.455285 0.054471,0.08853 0.087814,0.159599 0.074096,0.157937 -0.013718,-0.0017 -0.1446898,-0.02465 -0.2910477,-0.05108 z M 5.0000001,3 C 2.2,3 0,5.2 0,8 c 0,2.8 2.2,5 5.0000001,5 0.6,0 1.1,-0.1 1.6,-0.3 C 5.3000001,11.6 4.5,9.7999998 4.5,8 4.5,6.2 5.3000001,4.5 6.6000001,3.3 c -0.5,-0.2 -1,-0.3 -1.6,-0.3 z M 4.65,4.02 C 3.92,5.17 3.51,6.54 3.51,8 c 0,1.4599998 0.42,2.83 1.14,3.98 C 2.61,11.8 1.01,10.08 1.01,8 1.01,5.92 2.61,4.2 4.65,4.02 Z M 8,4 C 6.8,4.9 6,6.4 6,8 6,9.6 6.8,11.1 8,12 9.2,11.1 10,9.7 10,8 10,6.3 9.2,4.9 8,4 Z m 3,-1 c 2.8,0 5,2.2 5,5 0,2.8 -2.2,5 -5,5 C 10.4,13 9.9,12.9 9.4,12.7 10.7,11.6 11.5,9.8 11.5,8 11.5,6.2 10.7,4.5 9.4,3.3 9.9,3.1 10.4,3 11,3 Z m 0.35,1.02 c 0.73,1.15 1.14,2.52 1.14,3.98 0,1.46 -0.42,2.83 -1.14,3.98 2.04,-0.18 3.64,-1.9 3.64,-3.98 0,-2.08 -1.6,-3.8 -3.64,-3.98 z",
    style: {
      strokeWidth: 0.234,
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeOpacity: 1
    },
    fill: "black"
  })))), /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("g", null, /* @__PURE__ */ Object(react__WEBPACK_IMPORTED_MODULE_0__["createElement"])("rect", {
    x: 0,
    y: 0,
    width: 25.3804963846,
    height: 16,
    mask: "url(#union-mask)"
  })));
}
var ReactComponent7 = SvgComplement;

// src/components/sets/SetsManagerButtons.js
function PlusButton(props) {
  const {
    datatype,
    onError,
    onImportTree,
    onCreateLevelZeroNode,
    importable,
    editable
  } = props;
  const onImport = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])((importHandler, mimeType) => () => {
    const uploadInputNode = document.createElement("input");
    uploadInputNode.setAttribute("type", "file");
    uploadInputNode.setAttribute("accept", mimeType);
    document.body.appendChild(uploadInputNode);
    uploadInputNode.click();
    uploadInputNode.addEventListener("change", (event) => {
      if (!(window.File && window.FileReader && window.FileList && window.Blob)) {
        onError("Local file reading APIs are not fully supported in this browser.");
        return;
      }
      const { files: files2 } = event.target;
      if (!files2 || files2.length !== 1) {
        onError("Incorrect number of files selected.");
        return;
      }
      const reader = new FileReader();
      reader.addEventListener("load", () => {
        const { result } = reader;
        try {
          const treeToImport = importHandler(result, datatype);
          onError(false);
          onImportTree(treeToImport);
        } catch (e) {
          onError(e.message);
        }
      }, false);
      reader.readAsText(files2[0]);
    });
    uploadInputNode.remove();
  }, [datatype, onError, onImportTree]);
  const menuConfig = [
    ...editable ? [
      {
        title: "Create hierarchy",
        handler: onCreateLevelZeroNode,
        handlerKey: "n"
      }
    ] : [],
    ...importable ? [
      {
        title: "Import hierarchy",
        subtitle: "(from CSV file)",
        handler: onImport(handleImportTabular, MIME_TYPE_TABULAR),
        handlerKey: "c"
      },
      {
        title: "Import hierarchy",
        subtitle: "(from JSON file)",
        handler: onImport(handleImportJSON, MIME_TYPE_JSON),
        handlerKey: "j"
      }
    ] : []
  ];
  return menuConfig.length > 0 ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(PopoverMenu, {
    menuConfig
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
    className: "plus-button",
    type: "submit"
  }, "+")) : null;
}
function SetOperationButtons(props) {
  const {
    onUnion,
    onIntersection,
    onComplement,
    operatable,
    hasCheckedSetsToUnion,
    hasCheckedSetsToIntersect,
    hasCheckedSetsToComplement
  } = props;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, operatable && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
    onClick: onUnion,
    title: "New set from union of checked sets",
    type: "submit",
    disabled: !hasCheckedSetsToUnion
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ReactComponent5, null)), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
    onClick: onIntersection,
    title: "New set from intersection of checked sets",
    type: "submit",
    disabled: !hasCheckedSetsToIntersect
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ReactComponent6, null)), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
    onClick: onComplement,
    title: "New set from complement of checked sets",
    type: "submit",
    disabled: !hasCheckedSetsToComplement
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ReactComponent7, null))));
}

// src/components/sets/SetsManager.js
function processNode(node, prevPath, setColor, theme) {
  var _a2;
  const nodePath = [...prevPath, node.name];
  return __spreadProps(__spreadValues(__spreadValues({}, node), node.children ? {
    children: node.children.map((c) => processNode(c, nodePath, setColor))
  } : {}), {
    color: ((_a2 = setColor == null ? void 0 : setColor.find((d) => lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(d.path, nodePath))) == null ? void 0 : _a2.color) || getDefaultColor(theme)
  });
}
function processSets(sets, setColor, theme) {
  return __spreadProps(__spreadValues({}, sets), {
    tree: sets ? sets.tree.map((lzn) => processNode(lzn, [], setColor, theme)) : []
  });
}
function getAllKeys(node, path = []) {
  if (!node) {
    return null;
  }
  const newPath = [...path, node.name];
  if (node.children) {
    return [pathToKey(newPath), ...node.children.flatMap((v) => getAllKeys(v, newPath))];
  }
  return pathToKey(newPath);
}
function SetsManager(props) {
  const {
    theme,
    sets,
    additionalSets,
    setColor,
    levelSelection: checkedLevel,
    setSelection,
    setExpansion,
    hasColorEncoding,
    datatype,
    draggable = true,
    checkable = true,
    editable = true,
    expandable = true,
    operatable = true,
    exportable = true,
    importable = true,
    onError,
    onCheckNode,
    onExpandNode,
    onDropNode,
    onCheckLevel,
    onNodeSetColor,
    onNodeSetName,
    onNodeCheckNewName,
    onNodeRemove,
    onNodeView,
    onImportTree,
    onCreateLevelZeroNode,
    onExportLevelZeroNodeJSON,
    onExportLevelZeroNodeTabular,
    onExportSetJSON,
    onUnion,
    onIntersection,
    onComplement,
    hasCheckedSetsToUnion,
    hasCheckedSetsToIntersect,
    hasCheckedSetsToComplement
  } = props;
  const isChecking = true;
  const autoExpandParent = true;
  const [isDragging, setIsDragging] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const [isEditingNodeName, setIsEditingNodeName] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(null);
  const processedSets = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => processSets(sets, setColor, theme), [sets, setColor, theme]);
  const processedAdditionalSets = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => processSets(additionalSets, setColor, theme), [additionalSets, setColor, theme]);
  const additionalSetKeys = processedAdditionalSets ? processedAdditionalSets.tree.flatMap((v) => getAllKeys(v, [])) : [];
  const allSetSelectionKeys = (setSelection || []).map(pathToKey);
  const allSetExpansionKeys = (setExpansion || []).map(pathToKey);
  const setSelectionKeys = allSetSelectionKeys.filter((k) => !additionalSetKeys.includes(k));
  const setExpansionKeys = allSetExpansionKeys.filter((k) => !additionalSetKeys.includes(k));
  const additionalSetSelectionKeys = allSetSelectionKeys.filter((k) => additionalSetKeys.includes(k));
  const additionalSetExpansionKeys = allSetExpansionKeys.filter((k) => additionalSetKeys.includes(k));
  function renderTreeNodes(nodes, readOnly, currPath) {
    if (!nodes) {
      return null;
    }
    return nodes.map((node) => {
      const newPath = [...currPath, node.name];
      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TreeNode, __spreadProps(__spreadValues({
        theme,
        key: pathToKey(newPath)
      }, nodeToRenderProps(node, newPath, setColor)), {
        isEditing: lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(isEditingNodeName, newPath),
        datatype,
        draggable: draggable && !readOnly,
        editable: editable && !readOnly,
        checkable,
        expandable,
        exportable,
        hasColorEncoding,
        isChecking,
        checkedLevelPath: checkedLevel ? checkedLevel.levelZeroPath : null,
        checkedLevelIndex: checkedLevel ? checkedLevel.levelIndex : null,
        onCheckNode,
        onCheckLevel,
        onNodeView,
        onNodeSetColor,
        onNodeSetName: (targetPath, name2) => {
          onNodeSetName(targetPath, name2);
          setIsEditingNodeName(null);
        },
        onNodeCheckNewName,
        onNodeSetIsEditing: setIsEditingNodeName,
        onNodeRemove,
        onExportLevelZeroNodeJSON,
        onExportLevelZeroNodeTabular,
        onExportSetJSON,
        disableTooltip: isDragging,
        onDragStart: () => setIsDragging(true),
        onDragEnd: () => setIsDragging(false)
      }), renderTreeNodes(node.children, readOnly, newPath, theme));
    });
  }
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "sets-manager"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "sets-manager-tree"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Tree_default, {
    draggable: false,
    checkable,
    checkedKeys: setSelectionKeys,
    expandedKeys: setExpansionKeys,
    autoExpandParent,
    onCheck: (checkedKeys, info) => onCheckNode(info.node.props.nodeKey, info.checked),
    onExpand: (expandedKeys, info) => onExpandNode(expandedKeys, info.node.props.nodeKey, info.expanded)
  }, renderTreeNodes(processedSets.tree, true, [], theme)), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Tree_default, {
    draggable: true,
    checkable,
    checkedKeys: additionalSetSelectionKeys,
    expandedKeys: additionalSetExpansionKeys,
    autoExpandParent,
    onCheck: (checkedKeys, info) => onCheckNode(info.node.props.nodeKey, info.checked),
    onExpand: (expandedKeys, info) => onExpandNode(expandedKeys, info.node.props.nodeKey, info.expanded),
    onDrop: (info) => {
      const { eventKey: dropKey } = info.node.props;
      const { eventKey: dragKey } = info.dragNode.props;
      const { dropToGap, dropPosition } = info;
      onDropNode(dropKey, dragKey, dropPosition, dropToGap);
    }
  }, renderTreeNodes(processedAdditionalSets.tree, false, [], theme)), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(PlusButton, {
    datatype,
    onError,
    onImportTree,
    onCreateLevelZeroNode,
    importable,
    editable
  })), isChecking ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "set-operation-buttons"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(SetOperationButtons, {
    onUnion,
    onIntersection,
    onComplement,
    operatable,
    hasCheckedSetsToUnion,
    hasCheckedSetsToIntersect,
    hasCheckedSetsToComplement
  })) : null);
}

// src/components/sets/CellSetsManagerSubscriber.js
var CELL_SETS_DATA_TYPES = ["cells", "cell-sets"];
function CellSetsManagerSubscriber(props) {
  const {
    coordinationScopes,
    removeGridComponent,
    theme,
    title: title17 = "Cell Sets"
  } = props;
  const loaders = useLoaders();
  const setWarning = useSetWarning();
  const [{
    dataset,
    cellSetSelection,
    cellSetColor,
    additionalCellSets,
    cellColorEncoding
  }, {
    setCellSetSelection,
    setCellColorEncoding,
    setCellSetColor,
    setAdditionalCellSets
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.cellSets, coordinationScopes);
  const [urls, addUrl, resetUrls] = useUrls();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(CELL_SETS_DATA_TYPES);
  const [cellSetExpansion, setCellSetExpansion] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    resetUrls();
    resetReadyItems();
    setCellSetExpansion([]);
  }, [loaders, dataset]);
  const [cells] = useCellsData(loaders, dataset, setItemIsReady, addUrl, true);
  const [cellSets] = useCellSetsData(loaders, dataset, setItemIsReady, addUrl, true, { setCellSetSelection, setCellSetColor }, { cellSetSelection, cellSetColor });
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (additionalCellSets) {
      let upgradedCellSets;
      try {
        upgradedCellSets = tryUpgradeTreeToLatestSchema(additionalCellSets, SETS_DATATYPE_CELL);
      } catch (e) {
        setWarning(e.message);
        return;
      }
      setAdditionalCellSets(upgradedCellSets);
    }
  }, [additionalCellSets, setAdditionalCellSets, setWarning]);
  const allCellIds = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => cells ? Object.keys(cells) : [], [cells]);
  function setCellSetColorEncoding() {
    setCellColorEncoding("cellSetSelection");
  }
  const mergedCellSets = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => mergeCellSets(cellSets, additionalCellSets), [cellSets, additionalCellSets]);
  const checkedLevel = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => {
    if (cellSetSelection && cellSetSelection.length > 0 && mergedCellSets && mergedCellSets.tree.length > 0) {
      return treeToExpectedCheckedLevel(mergedCellSets, cellSetSelection);
    }
    return null;
  }, [cellSetSelection, mergedCellSets]);
  function onCheckLevel(levelZeroName, levelIndex) {
    const lzn = mergedCellSets.tree.find((n) => n.name === levelZeroName);
    if (lzn) {
      const newCellSetSelection = nodeToLevelDescendantNamePaths(lzn, levelIndex, [], true);
      setCellSetSelection(newCellSetSelection);
      setCellSetColorEncoding();
    }
  }
  function onCheckNode(targetKey, checked) {
    const targetPath = Array.isArray(targetKey) ? targetKey : targetKey.split(PATH_SEP);
    if (!targetKey) {
      return;
    }
    if (checked) {
      setCellSetSelection([...cellSetSelection, targetPath]);
    } else {
      setCellSetSelection(cellSetSelection.filter((d) => !lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(d, targetPath)));
    }
    setCellSetColorEncoding();
  }
  function onExpandNode(expandedKeys, targetKey, expanded) {
    if (expanded) {
      setCellSetExpansion((prev) => [...prev, targetKey.split(PATH_SEP)]);
    } else {
      setCellSetExpansion((prev) => prev.filter((d) => !lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(d, targetKey.split(PATH_SEP))));
    }
  }
  function onDropNode(dropKey, dragKey, dropPosition, dropToGap) {
    const dropPath = dropKey.split(PATH_SEP);
    const dropNode = treeFindNodeByNamePath(additionalCellSets, dropPath);
    if (!dropNode.children && !dropToGap) {
      return;
    }
    const dropNodeLevel = dropPath.length - 1;
    const dropNodeIsLevelZero = dropNodeLevel === 0;
    const dragPath = dragKey.split(PATH_SEP);
    const dragNode = treeFindNodeByNamePath(additionalCellSets, dragPath);
    if (dropNodeIsLevelZero && dropToGap && !dragNode.children) {
      return;
    }
    let dropParentNode;
    let dropParentPath;
    let dropNodeCurrIndex;
    if (!dropNodeIsLevelZero) {
      dropParentPath = dropPath.slice(0, -1);
      dropParentNode = treeFindNodeByNamePath(additionalCellSets, dropParentPath);
      dropNodeCurrIndex = dropParentNode.children.findIndex((c) => c.name === dropNode.name);
    } else {
      dropNodeCurrIndex = additionalCellSets.tree.findIndex((lzn) => lzn.name === dropNode.name);
    }
    let hasSiblingNameConflict;
    const dragNodeName = dragNode.name;
    if (!dropNodeIsLevelZero && dropToGap) {
      hasSiblingNameConflict = dropParentNode.children.find((c) => c !== dragNode && c.name === dragNodeName);
    } else if (!dropToGap) {
      hasSiblingNameConflict = dropNode.children.find((c) => c !== dragNode && c.name === dragNodeName);
    } else {
      hasSiblingNameConflict = additionalCellSets.tree.find((lzn) => lzn !== dragNode && lzn.name === dragNodeName);
    }
    if (hasSiblingNameConflict) {
      return;
    }
    const nextAdditionalCellSets = __spreadProps(__spreadValues({}, additionalCellSets), {
      tree: additionalCellSets.tree.map((lzn) => filterNode(lzn, [], dragPath)).filter(Boolean)
    });
    if (!dropNodeIsLevelZero) {
      dropNodeCurrIndex = dropParentNode.children.findIndex((c) => c.name === dropNode.name);
    } else {
      dropNodeCurrIndex = nextAdditionalCellSets.tree.findIndex((lzn) => lzn.name === dropNode.name);
    }
    let newDragPath = [];
    if (!dropToGap || !dropNodeIsLevelZero) {
      let addChildFunction;
      let checkPathFunction;
      const newPath = [];
      if (!dropToGap) {
        addChildFunction = (n) => nodeAppendChild(n, dragNode);
        checkPathFunction = (path) => lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(path, dropPath);
      } else if (!dropNodeIsLevelZero) {
        checkPathFunction = (path) => lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(path, dropParentPath);
        if (dropPosition === -1) {
          addChildFunction = (n) => nodePrependChild(n, dragNode);
        } else {
          const insertIndex = dropNodeCurrIndex + (dropPosition > dropNodeCurrIndex ? 1 : 0);
          addChildFunction = (n) => nodeInsertChild(n, dragNode, insertIndex);
        }
      }
      nextAdditionalCellSets.tree = nextAdditionalCellSets.tree.map((node) => nodeTransform(node, (n, path) => checkPathFunction(path), (n) => {
        const newNode = addChildFunction(n);
        return newNode;
      }, newPath));
      setAdditionalCellSets(nextAdditionalCellSets);
      newDragPath = [...newPath[0], dragNode.name];
      setCellSetSelection([newDragPath]);
    } else if (dropPosition === -1) {
      nextAdditionalCellSets.tree.unshift(dragNode);
      setAdditionalCellSets(nextAdditionalCellSets);
      newDragPath = [dragNode.name];
      setCellSetSelection([newDragPath]);
    } else {
      const insertIndex = dropNodeCurrIndex + (dropPosition > dropNodeCurrIndex ? 1 : 0);
      const newLevelZero = Array.from(nextAdditionalCellSets.tree);
      newLevelZero.splice(insertIndex, 0, dragNode);
      nextAdditionalCellSets.tree = newLevelZero;
      setAdditionalCellSets(nextAdditionalCellSets);
      newDragPath = [dragNode.name];
      setCellSetSelection([newDragPath]);
    }
    const oldColors = cellSetColor.filter((i) => isEqualOrPrefix(dragPath, i.path));
    const newColors = oldColors.map((i) => __spreadProps(__spreadValues({}, i), {
      path: !lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(i.path, dragPath) ? newDragPath.concat(i.path.slice(dragPath.length)) : newDragPath
    }));
    const newCellSetColor = cellSetColor.filter((i) => !isEqualOrPrefix(dragPath, i.path));
    newCellSetColor.push(...newColors);
    setCellSetColor(newCellSetColor);
  }
  function onNodeSetColor(targetPath, color) {
    const prevNodeColor = cellSetColor == null ? void 0 : cellSetColor.find((d) => lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(d.path, targetPath));
    if (!prevNodeColor) {
      setCellSetColor([
        ...cellSetColor || [],
        {
          path: targetPath,
          color
        }
      ]);
    } else {
      setCellSetColor([
        ...cellSetColor.filter((d) => !lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(d.path, targetPath)),
        {
          path: targetPath,
          color
        }
      ]);
    }
  }
  function onNodeSetName(targetPath, name2) {
    const nextNamePath = [...targetPath];
    nextNamePath.pop();
    nextNamePath.push(name2);
    function renameNode(node, prevPath) {
      if (lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()([...prevPath, node.name], targetPath)) {
        return __spreadProps(__spreadValues({}, node), {
          name: name2
        });
      }
      if (!node.children) {
        return node;
      }
      return __spreadProps(__spreadValues({}, node), {
        children: node.children.map((c) => renameNode(c, [...prevPath, node.name]))
      });
    }
    const nextAdditionalCellSets = __spreadProps(__spreadValues({}, additionalCellSets), {
      tree: additionalCellSets.tree.map((lzn) => renameNode(lzn, []))
    });
    const nextCellSetColor = cellSetColor.map((d) => ({
      path: tryRenamePath(targetPath, d.path, nextNamePath),
      color: d.color
    }));
    const nextCellSetSelection = cellSetSelection.map((d) => tryRenamePath(targetPath, d, nextNamePath));
    const nextCellSetExpansion = cellSetExpansion.map((d) => tryRenamePath(targetPath, d, nextNamePath));
    setAdditionalCellSets(nextAdditionalCellSets);
    setCellSetColor(nextCellSetColor);
    setCellSetSelection(nextCellSetSelection);
    setCellSetExpansion(nextCellSetExpansion);
  }
  function onNodeCheckNewName(targetPath, name2) {
    const nextNamePath = [...targetPath];
    nextNamePath.pop();
    nextNamePath.push(name2);
    const hasConflicts = !lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(targetPath, nextNamePath) && treeFindNodeByNamePath(additionalCellSets, nextNamePath);
    return hasConflicts;
  }
  function onNodeRemove(targetPath) {
    const nextAdditionalCellSets = __spreadProps(__spreadValues({}, additionalCellSets), {
      tree: additionalCellSets.tree.map((lzn) => filterNode(lzn, [], targetPath)).filter(Boolean)
    });
    const nextCellSetColor = cellSetColor.filter((d) => !isEqualOrPrefix(targetPath, d.path));
    const nextCellSetSelection = cellSetSelection.filter((d) => !isEqualOrPrefix(targetPath, d));
    const nextCellSetExpansion = cellSetExpansion.filter((d) => !isEqualOrPrefix(targetPath, d));
    setAdditionalCellSets(nextAdditionalCellSets);
    setCellSetColor(nextCellSetColor);
    setCellSetSelection(nextCellSetSelection);
    setCellSetExpansion(nextCellSetExpansion);
  }
  function onNodeView(targetPath) {
    const setsToView = [];
    function viewNode(node, nodePath) {
      if (cellSetExpansion.find((expandedPath) => lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(nodePath, expandedPath))) {
        if (node.children) {
          node.children.forEach((c) => {
            viewNode(c, [...nodePath, c.name]);
          });
        } else {
          setsToView.push(nodePath);
        }
      } else {
        setsToView.push(nodePath);
      }
    }
    const targetNode = treeFindNodeByNamePath(mergedCellSets, targetPath);
    viewNode(targetNode, targetPath);
    setCellSetSelection(setsToView);
    setCellSetColorEncoding();
  }
  function onCreateLevelZeroNode() {
    const nextName = getNextNumberedNodeName(additionalCellSets == null ? void 0 : additionalCellSets.tree, "My hierarchy ");
    setAdditionalCellSets(__spreadProps(__spreadValues({}, additionalCellSets || treeInitialize(SETS_DATATYPE_CELL)), {
      tree: [
        ...additionalCellSets ? additionalCellSets.tree : [],
        {
          name: nextName,
          children: []
        }
      ]
    }));
  }
  function onUnion() {
    const newSet = treeToUnion(mergedCellSets, cellSetSelection);
    setCellSelection(newSet, additionalCellSets, cellSetColor, setCellSetSelection, setAdditionalCellSets, setCellSetColor, setCellColorEncoding, "Union ");
  }
  function onIntersection() {
    const newSet = treeToIntersection(mergedCellSets, cellSetSelection);
    setCellSelection(newSet, additionalCellSets, cellSetColor, setCellSetSelection, setAdditionalCellSets, setCellSetColor, setCellColorEncoding, "Intersection ");
  }
  function onComplement() {
    const newSet = treeToComplement(mergedCellSets, cellSetSelection, allCellIds);
    setCellSelection(newSet, additionalCellSets, cellSetColor, setCellSetSelection, setAdditionalCellSets, setCellSetColor, setCellColorEncoding, "Complement ");
  }
  function onImportTree(treeToImport) {
    const hasConflict = treesConflict(mergedCellSets, treeToImport);
    if (!hasConflict) {
      setAdditionalCellSets(__spreadProps(__spreadValues({}, additionalCellSets || treeInitialize(SETS_DATATYPE_CELL)), {
        tree: [
          ...additionalCellSets ? additionalCellSets.tree : [],
          ...treeToImport.tree
        ]
      }));
      const importAutoSetColors = initializeCellSetColor(treeToImport, cellSetColor);
      setCellSetColor([
        ...cellSetColor,
        ...importAutoSetColors
      ]);
    }
  }
  function onExportLevelZeroNodeJSON(nodePath) {
    const {
      treeToExport,
      nodeName
    } = treeExportLevelZeroNode(mergedCellSets, nodePath, SETS_DATATYPE_CELL, cellSetColor, theme);
    downloadForUser(handleExportJSON(treeToExport), `${nodeName}_${package_default.name}-${SETS_DATATYPE_CELL}-hierarchy.${FILE_EXTENSION_JSON}`);
  }
  function onExportLevelZeroNodeTabular(nodePath) {
    const {
      treeToExport,
      nodeName
    } = treeExportLevelZeroNode(mergedCellSets, nodePath, SETS_DATATYPE_CELL, cellSetColor, theme);
    downloadForUser(handleExportTabular(treeToExport), `${nodeName}_${package_default.name}-${SETS_DATATYPE_CELL}-hierarchy.${FILE_EXTENSION_TABULAR}`);
  }
  function onExportSetJSON(nodePath) {
    const { setToExport, nodeName } = treeExportSet(mergedCellSets, nodePath);
    downloadForUser(handleExportJSON(setToExport), `${nodeName}_${package_default.name}-${SETS_DATATYPE_CELL}-set.${FILE_EXTENSION_JSON}`, FILE_EXTENSION_JSON);
  }
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TitleInfo, {
    title: title17,
    isScroll: true,
    removeGridComponent,
    urls,
    theme,
    isReady
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(SetsManager, {
    setColor: cellSetColor,
    sets: cellSets,
    additionalSets: additionalCellSets,
    levelSelection: checkedLevel,
    setSelection: cellSetSelection,
    setExpansion: cellSetExpansion,
    hasColorEncoding: cellColorEncoding === "cellSetSelection",
    draggable: true,
    datatype: SETS_DATATYPE_CELL,
    onError: setWarning,
    onCheckNode,
    onExpandNode,
    onDropNode,
    onCheckLevel,
    onNodeSetColor,
    onNodeSetName,
    onNodeCheckNewName,
    onNodeRemove,
    onNodeView,
    onImportTree,
    onCreateLevelZeroNode,
    onExportLevelZeroNodeJSON,
    onExportLevelZeroNodeTabular,
    onExportSetJSON,
    onUnion,
    onIntersection,
    onComplement,
    hasCheckedSetsToUnion: (cellSetSelection == null ? void 0 : cellSetSelection.length) > 1,
    hasCheckedSetsToIntersect: (cellSetSelection == null ? void 0 : cellSetSelection.length) > 1,
    hasCheckedSetsToComplement: (cellSetSelection == null ? void 0 : cellSetSelection.length) > 0,
    theme
  }));
}

// src/components/layer-controller/LayerControllerSubscriber.js



// src/components/layer-controller/RasterChannelController.js






// src/components/layer-controller/ChannelOptions.js





// src/components/layer-controller/ColorPalette.js




var useStyles3 = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["makeStyles"])((theme) => ({
  container: {
    width: "70px",
    height: "40px",
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    flexWrap: "wrap"
  },
  button: {
    padding: "3px",
    width: "16px"
  },
  icon: {
    width: "17px",
    height: "17px",
    stroke: theme.palette.action.selected,
    "stroke-width": "1px"
  }
}));
var ColorPalette = ({ handleChange }) => {
  const classes = useStyles3();
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: classes.container,
    "aria-label": "color-swatch"
  }, VIEWER_PALETTE.map((color) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_4__["default"], {
    className: classes.button,
    key: color,
    onClick: () => handleChange(color)
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_icons_Lens__WEBPACK_IMPORTED_MODULE_86___default.a, {
    fontSize: "small",
    style: { color: `rgb(${color})` },
    className: classes.icon
  }))));
};
var ColorPalette_default = ColorPalette;

// src/components/layer-controller/ChannelOptions.js
var useStyles4 = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["makeStyles"])(() => ({
  menuButton: {
    backgroundColor: "transparent"
  },
  colors: {
    "&:hover": {
      backgroundColor: "transparent"
    },
    paddingLeft: "2px",
    paddingRight: "2px"
  }
}));
function ChannelOptions({ handlePropertyChange, handleChannelRemove, handleIQRUpdate }) {
  const [open, setOpen] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const classes = useStyles4();
  const handleColorSelect = (color) => {
    handlePropertyChange("color", color);
  };
  const handleRemove = () => {
    setOpen(false);
    handleChannelRemove();
  };
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(PopperMenu, {
    open,
    setOpen,
    buttonIcon: /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_icons_MoreVert__WEBPACK_IMPORTED_MODULE_85___default.a, {
      fontSize: "small"
    }),
    buttonClassName: classes.menuButton
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_MenuItem__WEBPACK_IMPORTED_MODULE_3__["default"], {
    dense: true,
    disableGutters: true,
    onClick: handleRemove
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(MuiSpan, null, "Remove")), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_MenuItem__WEBPACK_IMPORTED_MODULE_3__["default"], {
    dense: true,
    disableGutters: true,
    onClick: handleIQRUpdate
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(MuiSpan, null, "Use IQR")), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_MenuItem__WEBPACK_IMPORTED_MODULE_3__["default"], {
    dense: true,
    disableGutters: true,
    className: classes.colors
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ColorPalette_default, {
    handleChange: handleColorSelect
  })));
}
var ChannelOptions_default = ChannelOptions;

// src/components/layer-controller/constants.js
function getDomains() {
  const domains = {};
  const needMin = ["Int8", "Int16", "Int32"];
  Object.keys(DTYPE_VALUES).forEach((dtype) => {
    const { max: max2 } = DTYPE_VALUES[dtype];
    const min = needMin.includes(dtype) ? -(max2 + 1) : 0;
    domains[dtype] = [min, max2];
  });
  return domains;
}
var DOMAINS = getDomains();

// src/components/layer-controller/shared-channel-controls.js




// src/components/layer-controller/styles.js






var useSelectStyles = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["makeStyles"])(() => ({
  selectRoot: {
    padding: 0,
    height: "auto",
    margin: "4px 0"
  }
}));
var useOptionStyles = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["withStyles"])((theme) => ({
  paper: {
    backgroundColor: theme.palette.background.paper
  },
  span: {
    width: "70px",
    textAlign: "center",
    paddingLeft: "2px",
    paddingRight: "2px"
  },
  colors: {
    "&:hover": {
      backgroundColor: "transparent"
    },
    paddingLeft: "2px",
    paddingRight: "2px"
  },
  popper: {
    zIndex: 4
  }
}));
var sharedControllerStyles = {
  width: "100%",
  flexDirection: "column"
};
var useControllerSectionStyles = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["makeStyles"])(() => ({
  root: __spreadProps(__spreadValues({}, sharedControllerStyles), {
    padding: "0px 8px"
  })
}));
var StyledAccordionDetails = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["withStyles"])(() => ({
  root: __spreadProps(__spreadValues({}, sharedControllerStyles), {
    padding: "8px 8px 24px 8px"
  })
}))(_material_ui_core_AccordionDetails__WEBPACK_IMPORTED_MODULE_88__["default"]);
var StyledAccordionSummary = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["withStyles"])((theme) => ({
  root: {
    padding: "0px 8px"
  },
  content: {
    margin: "4px 0px",
    minWidth: "0px"
  },
  expanded: {
    marginBottom: theme.spacing(-3),
    top: theme.spacing(-1)
  },
  expandIcon: {
    "&$expanded": {
      top: theme.spacing(-1.3)
    }
  }
}))(_material_ui_core_AccordionSummary__WEBPACK_IMPORTED_MODULE_87__["default"]);
var StyledInputLabel = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["withStyles"])(() => ({
  root: {
    fontSize: "14px"
  }
}))(_material_ui_core_InputLabel__WEBPACK_IMPORTED_MODULE_89__["default"]);
var OverflowEllipsisGrid = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["withStyles"])(() => ({
  item: {
    width: "100%",
    overflow: "hidden",
    whiteSpace: "nowrap",
    textOverflow: "ellipsis"
  }
}))(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"]);
var StyledSelectionSlider = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["withStyles"])(() => ({
  root: {
    marginTop: "7px"
  },
  markActive: {
    backgroundColor: "rgba(128, 128, 128, 0.7)"
  }
}))(_material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_48__["default"]);

// src/components/layer-controller/shared-channel-controls.js
function ChannelSelectionDropdown({
  handleChange,
  disabled,
  channelOptions,
  selectionIndex
}) {
  const classes = useSelectStyles();
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Select__WEBPACK_IMPORTED_MODULE_55__["default"], {
    classes: { root: classes.selectRoot },
    native: true,
    value: selectionIndex,
    onChange: (e) => handleChange(Number(e.target.value))
  }, channelOptions.map((opt, i) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
    disabled,
    key: opt,
    value: i
  }, opt)));
}
function ChannelVisibilityCheckbox({
  color,
  checked,
  toggle,
  disabled
}) {
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Checkbox__WEBPACK_IMPORTED_MODULE_67__["default"], {
    onChange: toggle,
    checked,
    disabled,
    style: { color, "&$checked": { color } }
  });
}

// src/components/layer-controller/RasterChannelController.js
var toRgbUIString = (on, arr, theme) => {
  const color = on || theme === "light" && arr.every((i) => i === 255) ? [220, 220, 220] : arr;
  return `rgb(${color})`;
};
function abbreviateNumber2(value) {
  const maxLength = 5;
  let maxNaiveDigits = maxLength;
  if (!Number.isInteger(value)) {
    --maxNaiveDigits;
  }
  if (value < 1) {
    --maxNaiveDigits;
  }
  const naive = Intl.NumberFormat("en-US", {
    maximumSignificantDigits: maxNaiveDigits,
    useGrouping: false
  }).format(value);
  if (naive.length <= maxLength)
    return naive;
  return value.toExponential(0);
}
function ChannelSlider({
  color,
  slider = [0, 0],
  handleChange,
  domain = [0, 0],
  dtype,
  disabled
}) {
  const [min, max2] = domain;
  const handleChangeDebounced = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])(lodash_debounce__WEBPACK_IMPORTED_MODULE_16___default()(handleChange, 3, { trailing: true }), [handleChange]);
  const step = max2 - min < 500 && dtype === "Float32" ? (max2 - min) / 500 : 1;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_48__["default"], {
    value: slider,
    valueLabelFormat: abbreviateNumber2,
    onChange: (e, v) => handleChangeDebounced(v),
    valueLabelDisplay: "auto",
    getAriaLabel: () => `${color}-${slider}`,
    min,
    max: max2,
    step,
    orientation: "horizontal",
    style: { color, marginTop: "7px" },
    disabled
  });
}
function RasterChannelController({
  visibility = false,
  slider,
  color,
  channels: channels2,
  channelId,
  domainType: newDomainType,
  dimName,
  theme,
  loader,
  colormapOn,
  channelOptions,
  handlePropertyChange,
  handleChannelRemove,
  handleIQRUpdate,
  selectionIndex,
  isLoading,
  use3d: newUse3d
}) {
  const { dtype } = getSourceFromLoader(loader);
  const [domain, setDomain] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(null);
  const [domainType, setDomainType] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(null);
  const [use3d, setUse3d] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(null);
  const [selection, setSelection] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([
    __spreadValues({}, channels2[channelId].selection)
  ]);
  const rgbColor = toRgbUIString(colormapOn, color, theme);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    let mounted = true;
    if (dtype && loader && channels2) {
      const selections = [__spreadValues({}, channels2[channelId].selection)];
      let domains;
      const hasDomainChanged = newDomainType !== domainType;
      const has3dChanged = use3d !== newUse3d;
      const hasSelectionChanged = !lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(selections, selection);
      if (hasDomainChanged || hasSelectionChanged || has3dChanged) {
        if (newDomainType === "Full") {
          domains = [DOMAINS[dtype]];
          const [newDomain] = domains;
          if (mounted) {
            setDomain(newDomain);
            setDomainType(newDomainType);
            if (hasSelectionChanged) {
              setSelection(selections);
            }
            if (has3dChanged) {
              setUse3d(newUse3d);
            }
          }
        } else {
          getMultiSelectionStats({
            loader: loader.data,
            selections,
            use3d: newUse3d
          }).then((stats) => {
            domains = stats.domains;
            const [newDomain] = domains;
            if (mounted) {
              setDomain(newDomain);
              setDomainType(newDomainType);
              if (hasSelectionChanged) {
                setSelection(selections);
              }
              if (has3dChanged) {
                setUse3d(newUse3d);
              }
            }
          });
        }
      }
    }
    return () => {
      mounted = false;
    };
  }, [
    domainType,
    channels2,
    channelId,
    loader,
    dtype,
    newDomainType,
    selection,
    newUse3d,
    use3d
  ]);
  const createSelection = (index) => ({ [dimName]: index });
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    container: true,
    direction: "column",
    m: 1,
    justifyContent: "center"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    container: true,
    direction: "row",
    justifyContent: "space-between"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true,
    xs: 10
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ChannelSelectionDropdown, {
    handleChange: (v) => handlePropertyChange("selection", createSelection(v)),
    selectionIndex,
    channelOptions,
    disabled: isLoading
  })), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true,
    xs: 1,
    style: { marginTop: "4px" }
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ChannelOptions_default, {
    handlePropertyChange,
    handleChannelRemove,
    handleIQRUpdate,
    disabled: isLoading
  }))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    container: true,
    direction: "row",
    justifyContent: "space-between"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true,
    xs: 2
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ChannelVisibilityCheckbox, {
    color: rgbColor,
    checked: visibility,
    toggle: () => handlePropertyChange("visible", !visibility),
    disabled: isLoading
  })), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true,
    xs: 9
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ChannelSlider, {
    color: rgbColor,
    slider,
    domain: domain || DOMAINS[dtype],
    dtype,
    handleChange: (v) => handlePropertyChange("slider", v),
    disabled: isLoading
  }))));
}
var RasterChannelController_default = RasterChannelController;

// src/components/layer-controller/BitmaskChannelController.js




function BitmaskChannelController({
  visibility = false,
  dimName,
  channelOptions,
  handlePropertyChange,
  handleChannelRemove,
  selectionIndex,
  disableOptions = false
}) {
  const createSelection = (index) => ({ [dimName]: index });
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    container: true,
    direction: "row",
    justify: "space-between"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true,
    xs: 2
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ChannelVisibilityCheckbox, {
    color: [220, 220, 220],
    checked: visibility,
    toggle: () => handlePropertyChange("visible", !visibility)
  })), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true,
    xs: 9
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ChannelSelectionDropdown, {
    handleChange: (v) => handlePropertyChange("selection", createSelection(v)),
    selectionIndex,
    disableOptions,
    channelOptions
  })), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true,
    xs: 1
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_4__["default"], {
    onClick: handleChannelRemove,
    style: { padding: "6px 6px 6px 0px" }
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_icons_RemoveCircle__WEBPACK_IMPORTED_MODULE_90___default.a, null))));
}
var BitmaskChannelController_default = BitmaskChannelController;

// src/components/layer-controller/VectorLayerController.js






function VectorLayerController(props) {
  const {
    label,
    layer,
    layerType,
    handleLayerChange
  } = props;
  const slider = layer.opacity;
  const isOn = layer.visible;
  function handleSliderChange(v) {
    if (layerType === "cells") {
      const stroked = v < 0.7;
      handleLayerChange(__spreadProps(__spreadValues({}, layer), { opacity: v, stroked }));
    } else {
      handleLayerChange(__spreadProps(__spreadValues({}, layer), { opacity: v }));
    }
  }
  function handleCheckBoxChange(v) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { visible: v }));
  }
  const classes = useControllerSectionStyles();
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true,
    style: { marginTop: "10px" }
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_11__["default"], {
    className: classes.root
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_91__["default"], {
    style: {
      padding: "15px 8px 0px 8px",
      marginBottom: "-5px"
    }
  }, label), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    container: true,
    direction: "row",
    justifyContent: "space-between"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true,
    xs: 2
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Checkbox__WEBPACK_IMPORTED_MODULE_67__["default"], {
    color: "primary",
    checked: isOn,
    onChange: (e, v) => handleCheckBoxChange(v)
  })), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true,
    xs: 9,
    style: { paddingRight: "8px" }
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_48__["default"], {
    value: slider,
    min: 0,
    max: 1,
    step: 1e-3,
    onChange: (e, v) => handleSliderChange(v),
    style: { marginTop: "7px" },
    orientation: "horizontal"
  })))));
}

// src/components/layer-controller/LayerController.js












// src/components/layer-controller/LayerOptions.js








var DOMAIN_OPTIONS = ["Full", "Min/Max"];
function VolumeDropdown({
  loader: loaderWithMeta,
  handleMultiPropertyChange,
  resolution: currResolution,
  disable3d,
  setRasterLayerCallback,
  setAreAllChannelsLoading,
  setViewState,
  spatialHeight,
  spatialWidth,
  channels: channels2,
  use3d,
  modelMatrix
}) {
  const classes = useSelectStyles();
  const selections = channels2.map((i) => i.selection);
  const { data: loader } = loaderWithMeta;
  const handleChange = (val) => __async(this, null, function* () {
    const shouldUse3D = typeof val === "number";
    setAreAllChannelsLoading(true);
    setRasterLayerCallback(() => {
      setAreAllChannelsLoading(false);
      setRasterLayerCallback(null);
    });
    if (shouldUse3D) {
      const [xSlice, ySlice, zSlice] = getBoundingCube(loader);
      const propertiesChanged = {
        resolution: val,
        xSlice,
        ySlice,
        zSlice,
        use3d: shouldUse3D
      };
      if (!use3d) {
        const { sliders } = yield getMultiSelectionStats({
          loader,
          selections,
          use3d: shouldUse3D
        });
        propertiesChanged.channels = [...channels2];
        propertiesChanged.channels.forEach((ch, i) => {
          ch.slider = sliders[i];
        });
      }
      handleMultiPropertyChange(propertiesChanged);
      const defaultViewState = getDefaultInitialViewState(loader, { height: spatialHeight, width: spatialWidth }, 1.5, true, new math_gl__WEBPACK_IMPORTED_MODULE_23__["Matrix4"](modelMatrix));
      setViewState(__spreadProps(__spreadValues({}, defaultViewState), {
        rotationX: 0,
        rotationOrbit: 0
      }));
    } else {
      const { sliders } = yield getMultiSelectionStats({
        loader,
        selections,
        use3d: shouldUse3D
      });
      const newChannels = [...channels2];
      newChannels.forEach((ch, i) => {
        ch.slider = sliders[i];
      });
      handleMultiPropertyChange({
        resolution: val,
        use3d: shouldUse3D,
        spatialAxisFixed: false,
        channels: newChannels
      });
      const defaultViewState = getDefaultInitialViewState(loader, { height: spatialHeight, width: spatialWidth }, 0.5, false, new math_gl__WEBPACK_IMPORTED_MODULE_23__["Matrix4"](modelMatrix));
      setViewState(__spreadProps(__spreadValues({}, defaultViewState), {
        rotationX: null,
        rotationOrbit: null,
        orbitAxis: null
      }));
    }
  });
  const { labels, shape } = Array.isArray(loader) ? loader[0] : loader;
  const hasZStack = shape[labels.indexOf("z")] > 1;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Select__WEBPACK_IMPORTED_MODULE_55__["default"], {
    native: true,
    value: currResolution,
    onChange: (e) => handleChange(e.target.value === "2D" ? e.target.value : Number(e.target.value)),
    classes: { root: classes.selectRoot }
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
    key: "2D",
    value: "2D"
  }, "2D Visualization"), Array.from({ length: loader.length }).fill(0).map((_, resolution) => {
    if (loader) {
      if (canLoadResolution(loader, resolution)) {
        const {
          height,
          width,
          depthDownsampled,
          totalBytes
        } = getStatsForResolution(loader, resolution);
        return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
          key: `(${height}, ${width}, ${depthDownsampled})`,
          value: resolution,
          disabled: disable3d || !hasZStack
        }, `3D: ${resolution}x Downsampled, ~${formatBytes(totalBytes)} per channel, (${height}, ${width}, ${depthDownsampled})`);
      }
    }
    return null;
  })));
}
function ColormapSelect({ value, inputId, handleChange }) {
  const classes = useSelectStyles();
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Select__WEBPACK_IMPORTED_MODULE_55__["default"], {
    native: true,
    onChange: (e) => handleChange(e.target.value === "" ? null : e.target.value),
    value,
    inputProps: { name: "colormap", id: inputId },
    style: { width: "100%" },
    classes: { root: classes.selectRoot }
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
    "aria-label": "None",
    value: ""
  }, "None"), COLORMAP_OPTIONS.map((name2) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
    key: name2,
    value: name2
  }, name2)));
}
function TransparentColorCheckbox({ value, handleChange }) {
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Checkbox__WEBPACK_IMPORTED_MODULE_67__["default"], {
    style: { float: "left", padding: 0 },
    color: "default",
    onChange: () => {
      if (value) {
        handleChange(null);
      } else {
        handleChange([0, 0, 0]);
      }
    },
    checked: Boolean(value)
  });
}
function OpacitySlider({ value, handleChange }) {
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_48__["default"], {
    value,
    onChange: (e, v) => handleChange(v),
    valueLabelDisplay: "auto",
    getAriaLabel: () => "opacity slider",
    min: 0,
    max: 1,
    step: 0.01,
    orientation: "horizontal",
    style: { marginTop: "7px" }
  });
}
function SliderDomainSelector({ value, inputId, handleChange }) {
  const classes = useSelectStyles();
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Select__WEBPACK_IMPORTED_MODULE_55__["default"], {
    native: true,
    onChange: (e) => handleChange(e.target.value),
    value,
    inputProps: { name: "domain-selector", id: inputId },
    style: { width: "100%" },
    classes: { root: classes.selectRoot }
  }, DOMAIN_OPTIONS.map((name2) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
    key: name2,
    value: name2
  }, name2)));
}
function GlobalSelectionSlider({
  field,
  value,
  handleChange,
  possibleValues
}) {
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(StyledSelectionSlider, {
    value,
    onChange: (event, newValue) => {
      handleChange({ selection: { [field]: newValue }, event });
    },
    onChangeCommitted: (event, newValue) => {
      handleChange({ selection: { [field]: newValue }, event });
    },
    valueLabelDisplay: "auto",
    getAriaLabel: () => `${field} slider`,
    marks: possibleValues.map((val) => ({ value: val })),
    min: Number(possibleValues[0]),
    max: Number(possibleValues.slice(-1)),
    orientation: "horizontal",
    step: null
  });
}
function LayerOption({ name: name2, inputId, children }) {
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    container: true,
    direction: "row",
    alignItems: "center",
    justifyContent: "center"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true,
    xs: 6
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_InputLabel__WEBPACK_IMPORTED_MODULE_89__["default"], {
    htmlFor: inputId
  }, name2, ":")), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true,
    xs: 6
  }, children));
}
function LayerOptions({
  colormap,
  opacity,
  handleColormapChange,
  handleOpacityChange,
  handleTransparentColorChange,
  globalControlLabels,
  globalLabelValues,
  handleGlobalChannelsSelectionChange,
  handleSliderChange,
  handleDomainChange,
  transparentColor,
  channels: channels2,
  domainType,
  disableChannelsIfRgbDetected,
  shouldShowTransparentColor,
  shouldShowDomain,
  shouldShowColormap,
  use3d,
  loader,
  handleMultiPropertyChange,
  resolution,
  disable3d,
  setRasterLayerCallback,
  setAreAllChannelsLoading,
  setViewState,
  spatialHeight,
  spatialWidth,
  modelMatrix
}) {
  const { labels, shape } = Array.isArray(loader.data) ? loader.data[0] : loader.data;
  const hasDimensionsAndChannels = labels.length > 0 && channels2.length > 0;
  const hasZStack = shape[labels.indexOf("z")] > 1;
  const hasViewableResolutions = Boolean(Array.from({
    length: loader.data.length
  }).filter((_, res) => canLoadResolution(loader.data, res)).length);
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    container: true,
    direction: "column",
    style: { width: "100%" }
  }, hasZStack && !disable3d && hasViewableResolutions && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(VolumeDropdown, {
    loader,
    handleSliderChange,
    handleDomainChange,
    channels: channels2,
    handleMultiPropertyChange,
    resolution,
    disable3d,
    setRasterLayerCallback,
    setAreAllChannelsLoading,
    setViewState,
    spatialHeight,
    spatialWidth,
    use3d,
    modelMatrix
  }), hasDimensionsAndChannels && !use3d && globalControlLabels.map((field) => shape[labels.indexOf(field)] > 1 && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(LayerOption, {
    name: field,
    inputId: `${field}-slider`,
    key: field
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(GlobalSelectionSlider, {
    field,
    value: globalLabelValues[field],
    handleChange: handleGlobalChannelsSelectionChange,
    possibleValues: lodash_range__WEBPACK_IMPORTED_MODULE_40___default()(shape[labels.indexOf(field)])
  }))), !disableChannelsIfRgbDetected ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, shouldShowColormap && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(LayerOption, {
    name: "Colormap",
    inputId: "colormap-select"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ColormapSelect, {
    value: colormap || "",
    inputId: "colormap-select",
    handleChange: handleColormapChange
  }))), shouldShowDomain && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(LayerOption, {
    name: "Domain",
    inputId: "domain-selector"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(SliderDomainSelector, {
    value: domainType || DEFAULT_RASTER_DOMAIN_TYPE,
    handleChange: (value) => {
      handleDomainChange(value);
    }
  })))) : null, !use3d && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(LayerOption, {
    name: "Opacity",
    inputId: "opacity-slider"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(OpacitySlider, {
    value: opacity,
    handleChange: handleOpacityChange
  }))), shouldShowTransparentColor && !use3d && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(LayerOption, {
    name: "Zero Transparent",
    inputId: "transparent-color-selector"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TransparentColorCheckbox, {
    value: transparentColor,
    handleChange: handleTransparentColorChange
  }))));
}
var LayerOptions_default = LayerOptions;

// src/components/layer-controller/VolumeOptions.js










var useSlicerStyles = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["makeStyles"])((theme) => Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["createStyles"])({
  enabled: {},
  disabled: {
    color: theme.palette.text.disabled,
    "& .MuiSlider-thumb": {
      color: "rgb(100, 100, 100, 1.0)"
    },
    "&  .MuiSlider-track": {
      color: "rgb(100, 100, 100, 1.0)"
    }
  }
}));
var Slicer = ({
  xSlice,
  ySlice,
  zSlice,
  handleSlicerSetting,
  loader,
  use3d
}) => {
  const [xSliceInit, ySliceInit, zSliceInit] = getBoundingCube(loader.data);
  const sliceValuesAndSetSliceFunctions = [
    [
      xSlice,
      (xSliceNew) => handleSlicerSetting("x", xSliceNew),
      "x",
      xSliceInit
    ],
    [
      ySlice,
      (ySliceNew) => handleSlicerSetting("y", ySliceNew),
      "y",
      ySliceInit
    ],
    [
      zSlice,
      (zSliceNew) => handleSlicerSetting("z", zSliceNew),
      "z",
      zSliceInit
    ]
  ];
  const classes = useSlicerStyles();
  const Slicers = sliceValuesAndSetSliceFunctions.map(([val, setVal, label, [min, max2]]) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    container: true,
    direction: "row",
    justifyContent: "flex-start",
    alignItems: "center",
    key: label
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true,
    xs: 1
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_91__["default"], {
    className: !use3d ? classes.disabled : classes.enabled,
    style: { marginBottom: 0 }
  }, label, ":")), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true,
    xs: 11
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_48__["default"], {
    disabled: !use3d,
    className: !use3d ? classes.disabled : classes.enabled,
    value: val,
    onChange: (e, v) => setVal(v),
    valueLabelDisplay: "auto",
    valueLabelFormat: (v) => abbreviateNumber(v),
    getAriaLabel: () => `${label} slider`,
    min,
    max: max2,
    step: 5e-3,
    orientation: "horizontal"
  }))));
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_91__["default"], {
    className: !use3d ? classes.disabled : classes.enabled,
    style: { marginTop: 16, marginBottom: 0 }
  }, "Clipping Planes:", " "), " ", Slicers);
};
var renderingOptions = Object.values(RENDERING_MODES);
function RenderingModeSelect({
  handleRenderingModeChange,
  renderingMode,
  use3d
}) {
  const classes = useSelectStyles();
  const options = !use3d ? [...renderingOptions, ""] : renderingOptions;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_FormControl__WEBPACK_IMPORTED_MODULE_100__["default"], {
    fullWidth: true
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_InputLabel__WEBPACK_IMPORTED_MODULE_89__["default"], {
    htmlFor: "rendering-mode-select"
  }, "Rendering Mode"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Select__WEBPACK_IMPORTED_MODULE_55__["default"], {
    native: true,
    onChange: (e) => handleRenderingModeChange(e.target.value),
    value: use3d ? renderingMode : "",
    inputProps: {
      name: "rendering-mode",
      id: "rendering-mode-select"
    },
    disabled: !use3d,
    classes: { root: classes.selectRoot }
  }, options.map((name2) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
    key: name2,
    value: name2
  }, name2))));
}
var ReCenterButton = ({
  setViewState,
  use3d,
  spatialHeight,
  spatialWidth,
  loader,
  modelMatrix
}) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
  item: true,
  xs: "auto",
  key: "recenter"
}, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_92__["default"], {
  onClick: () => {
    const defaultViewState = getDefaultInitialViewState(loader.data, { height: spatialHeight, width: spatialWidth }, 1.5, use3d, new math_gl__WEBPACK_IMPORTED_MODULE_23__["Matrix4"](modelMatrix));
    setViewState(__spreadProps(__spreadValues({}, defaultViewState), {
      rotationX: 0,
      rotationOrbit: 0
    }));
  },
  disabled: !use3d,
  style: {
    padding: 0,
    marginBottom: 6
  }
}, "Re-Center"));
var VolumeOptions = ({
  handleSlicerSetting,
  handleRenderingModeChange,
  renderingMode,
  xSlice,
  ySlice,
  zSlice,
  use3d,
  loader,
  setViewState,
  spatialHeight,
  spatialWidth,
  modelMatrix
}) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(RenderingModeSelect, {
  handleRenderingModeChange,
  renderingMode,
  use3d
}), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Slicer, {
  xSlice,
  ySlice,
  zSlice,
  handleSlicerSetting,
  use3d,
  loader
}), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ReCenterButton, {
  setViewState,
  use3d,
  spatialHeight,
  spatialWidth,
  loader,
  modelMatrix
}));
var VolumeOptions_default = VolumeOptions;

// src/components/layer-controller/LayerController.js
function TabPanel(props) {
  const _a2 = props, {
    children,
    value,
    index
  } = _a2, other = __objRest(_a2, [
    "children",
    "value",
    "index"
  ]);
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", __spreadValues({
    role: "tabpanel",
    hidden: value !== index,
    id: `simple-tabpanel-${index}`,
    "aria-labelledby": `simple-tab-${index}`
  }, other), value === index && children);
}
function getDomainsAndSliders(loader, selections, domainType, use3d) {
  return __async(this, null, function* () {
    let domains;
    const stats = yield getMultiSelectionStats({
      loader: loader.data,
      selections,
      use3d
    });
    const { sliders } = stats;
    if (domainType === "Min/Max") {
      domains = stats.domains;
    }
    if (domainType === "Full") {
      const source = getSourceFromLoader(loader);
      domains = selections.map(() => DOMAINS[source.dtype]);
    }
    return { domains, sliders };
  });
}
var buttonStyles = {
  borderStyle: "dashed",
  marginTop: "10px",
  fontWeight: 400
};
function LayerController(props) {
  var _a2;
  const {
    layer,
    name: name2,
    loader,
    theme,
    handleLayerRemove,
    handleLayerChange,
    shouldShowTransparentColor,
    shouldShowDomain,
    shouldShowColormap,
    ChannelController,
    setViewState,
    disable3d,
    setRasterLayerCallback,
    setAreLayerChannelsLoading,
    areLayerChannelsLoading,
    disabled,
    spatialHeight,
    spatialWidth,
    disableChannelsIfRgbDetected,
    shouldShowRemoveLayerButton
  } = props;
  const {
    colormap,
    opacity,
    channels: channels2,
    transparentColor,
    renderingMode,
    xSlice,
    ySlice,
    zSlice,
    resolution,
    use3d,
    modelMatrix
  } = layer;
  const channelRef = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])(channels2);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    channelRef.current = channels2;
    return void 0;
  }, [channels2]);
  const firstSelection = ((_a2 = channels2[0]) == null ? void 0 : _a2.selection) || {};
  const { data, channels: channelOptions } = loader;
  const [tab, setTab] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(0);
  const handleTabChange = (event, newTab) => {
    setTab(newTab);
  };
  const { labels, shape } = Array.isArray(data) ? data[data.length - 1] : data;
  const [domainType, setDomainType] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(layer.domainType);
  const [isExpanded, setIsExpanded] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(true);
  const [globalLabelValues, setGlobalLabelValues] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(GLOBAL_LABELS.filter((field) => typeof firstSelection[field] === "number").reduce((o, key) => __spreadProps(__spreadValues({}, o), { [key]: firstSelection[key] }), {}));
  function setVisible(v) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { visible: v }));
  }
  function setColormap(v) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { colormap: v }));
  }
  function setOpacity(v) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { opacity: v }));
  }
  function setChannels(v) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { channels: v }));
  }
  function setTransparentColor(v) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { transparentColor: v }));
  }
  function setRenderingMode(v) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { renderingMode: v }));
  }
  function handleMultiPropertyChange(obj) {
    handleLayerChange(__spreadValues(__spreadValues({}, layer), obj));
  }
  function handleSlicerSetting(slice3, val) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { [`${slice3}Slice`]: val }));
  }
  function setChannelsAndDomainType(newChannels, newDomainType) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), {
      channels: newChannels,
      domainType: newDomainType
    }));
  }
  function setChannel(v, i) {
    const newChannels = [...channelRef.current];
    newChannels[i] = v;
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { channels: newChannels }));
  }
  function addChannel(v) {
    const newChannels = [...channelRef.current, v];
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { channels: newChannels }));
  }
  function removeChannel(i) {
    const newChannels = [...channelRef.current];
    newChannels.splice(i, 1);
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { channels: newChannels }));
  }
  const setAreAllChannelsLoading = (val) => {
    const newAreLayerChannelsLoading = channelRef.current.map(() => val);
    setAreLayerChannelsLoading(newAreLayerChannelsLoading);
  };
  const handleChannelAdd = () => __async(this, null, function* () {
    const selection = {};
    labels.forEach((label) => {
      selection[label] = GLOBAL_LABELS.includes(label) ? globalLabelValues[label] || 0 : 0;
    });
    const { domains, sliders } = yield getDomainsAndSliders(loader, [selection], domainType, use3d);
    const domain = domains[0];
    const slider = domain;
    const color = [255, 255, 255];
    const visible2 = true;
    const newChannelId = channels2.length;
    const newAreLayerChannelsLoading = [...areLayerChannelsLoading];
    newAreLayerChannelsLoading[newChannelId] = true;
    setAreLayerChannelsLoading(newAreLayerChannelsLoading);
    const channel = {
      selection,
      slider,
      visible: visible2,
      color
    };
    setRasterLayerCallback(() => {
      setChannel(__spreadProps(__spreadValues({}, channel), { slider: sliders[0] }), newChannelId);
      const areLayerChannelsLoadingCallback = [...newAreLayerChannelsLoading];
      areLayerChannelsLoadingCallback[newChannelId] = false;
      setAreLayerChannelsLoading(areLayerChannelsLoadingCallback);
      setRasterLayerCallback(null);
    });
    addChannel(channel);
  });
  const handleDomainChange = (value) => __async(this, null, function* () {
    setDomainType(value);
    const selections = channels2.map((channel) => channel.selection);
    let sliders = channels2.map((channel) => channel.slider);
    const { domains } = yield getDomainsAndSliders(loader, selections, value, use3d);
    sliders = sliders.map((slider, i) => {
      const [left, right] = slider;
      return [Math.max(left, domains[i][0]), Math.min(right, domains[i][1])];
    });
    const newChannels = channels2.map((c, i) => __spreadProps(__spreadValues({}, c), { slider: sliders[i] }));
    setChannelsAndDomainType(newChannels, value);
  });
  const handleGlobalChannelsSelectionChange = (_0) => __async(this, [_0], function* ({ selection, event }) {
    const selections = channels2.map((channel) => __spreadValues(__spreadValues({}, channel.selection), selection));
    const canUpdateChannels = event.type === "mouseup" || event.type === "keydown";
    if (canUpdateChannels) {
      setAreAllChannelsLoading(true);
      getDomainsAndSliders(loader, selections, domainType, use3d).then(({ sliders }) => {
        const newChannelsWithSelection = channels2.map((c) => __spreadProps(__spreadValues({}, c), {
          selection: __spreadValues(__spreadValues({}, c.selection), selection)
        }));
        setRasterLayerCallback(() => {
          setRasterLayerCallback(null);
          setAreAllChannelsLoading(false);
          const newChannelsWithSliders = [...newChannelsWithSelection].map((c, i) => __spreadProps(__spreadValues({}, c), {
            slider: sliders[i]
          }));
          setChannels(newChannelsWithSliders);
        });
        setChannels(newChannelsWithSelection);
      });
    }
    setGlobalLabelValues((prev) => __spreadValues(__spreadValues({}, prev), selection));
  });
  let channelControllers = [];
  if (labels.length > 0) {
    const channelLabel = labels.find((c) => c === "channel" || c === "c") || labels[0];
    channelControllers = channels2.map((c, channelId) => {
      const setIsLoading = (val) => {
        const newAreLayerChannelsLoading = [...areLayerChannelsLoading];
        newAreLayerChannelsLoading[channelId] = val;
        setAreLayerChannelsLoading(newAreLayerChannelsLoading);
      };
      const handleChannelPropertyChange = (property, value) => {
        const update = { [property]: value };
        if (property === "selection") {
          setIsLoading(true);
          update.selection = __spreadValues(__spreadValues({}, globalLabelValues), update.selection);
          setChannel(__spreadValues(__spreadValues({}, c), update), channelId);
          setRasterLayerCallback(() => __async(this, null, function* () {
            const selections = [
              __spreadValues(__spreadValues({}, channels2[channelId][property]), value)
            ];
            const { sliders } = yield getDomainsAndSliders(loader, selections, domainType, use3d);
            [update.slider] = sliders;
            setChannel(__spreadValues(__spreadValues({}, c), update), channelId);
            setRasterLayerCallback(null);
            setIsLoading(false);
          }));
        } else {
          setChannel(__spreadValues(__spreadValues({}, c), update), channelId);
        }
      };
      const handleChannelRemove = () => {
        removeChannel(channelId);
      };
      const handleIQRUpdate = () => __async(this, null, function* () {
        const { data: loaderData } = loader;
        const source = Array.isArray(loaderData) ? loaderData[loaderData.length - 1] : loaderData;
        const raster = yield source.getRaster({
          selection: channels2[channelId].selection
        });
        const stats = getChannelStats(raster.data);
        const { q1, q3 } = stats;
        setChannel(__spreadProps(__spreadValues({}, c), { slider: [q1, q3] }), channelId);
      });
      return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ChannelController, {
        key: `channel-controller-${channelId}`,
        dimName: channelLabel,
        visibility: c.visible,
        selectionIndex: c.selection[channelLabel],
        slider: c.slider,
        color: c.color,
        channels: channels2,
        channelId,
        domainType,
        loader,
        globalLabelValues,
        theme,
        channelOptions,
        colormapOn: Boolean(colormap),
        handlePropertyChange: handleChannelPropertyChange,
        handleChannelRemove,
        handleIQRUpdate,
        setRasterLayerCallback,
        isLoading: areLayerChannelsLoading[channelId],
        use3d
      });
    });
  }
  const controllerSectionClasses = useControllerSectionStyles();
  const { visible } = layer;
  const visibleSetting = typeof visible === "boolean" ? visible : true;
  const Visibility = visibleSetting ? _material_ui_icons_Visibility__WEBPACK_IMPORTED_MODULE_98___default.a : _material_ui_icons_VisibilityOff__WEBPACK_IMPORTED_MODULE_99___default.a;
  const hasViewableResolutions = Boolean(Array.from({
    length: loader.data.length
  }).filter((_, res) => canLoadResolution(loader.data, res)).length);
  const useVolumeTabs = !disable3d && shape[labels.indexOf("z")] > 1 && hasViewableResolutions;
  const FullController = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(LayerOptions_default, {
    channels: channels2,
    opacity,
    colormap,
    transparentColor,
    domainType,
    globalControlLabels: labels.filter((label) => GLOBAL_LABELS.includes(label)),
    globalLabelValues,
    handleOpacityChange: setOpacity,
    handleColormapChange: setColormap,
    handleGlobalChannelsSelectionChange,
    handleTransparentColorChange: setTransparentColor,
    disableChannelsIfRgbDetected: isRgb(loader) && disableChannelsIfRgbDetected,
    handleDomainChange,
    shouldShowTransparentColor,
    shouldShowDomain,
    shouldShowColormap,
    use3d,
    loader,
    handleMultiPropertyChange,
    resolution,
    disable3d,
    setRasterLayerCallback,
    setAreAllChannelsLoading,
    setViewState,
    spatialHeight,
    spatialWidth,
    modelMatrix
  }), isRgb(loader) && disableChannelsIfRgbDetected ? null : channelControllers, isRgb(loader) && disableChannelsIfRgbDetected ? null : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_92__["default"], {
    disabled: channels2.length === MAX_CHANNELS,
    onClick: handleChannelAdd,
    fullWidth: true,
    variant: "outlined",
    style: buttonStyles,
    startIcon: /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_icons_Add__WEBPACK_IMPORTED_MODULE_93___default.a, null),
    size: "small"
  }, "Add Channel"));
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Accordion__WEBPACK_IMPORTED_MODULE_96__["default"], {
    className: controllerSectionClasses.root,
    onChange: (e, expanded) => {
      var _a3, _b2, _c;
      return !disabled && setIsExpanded(expanded && ((_c = (_b2 = (_a3 = e == null ? void 0 : e.target) == null ? void 0 : _a3.attributes) == null ? void 0 : _b2.role) == null ? void 0 : _c.value) === "presentation");
    },
    TransitionProps: { enter: false },
    expanded: !disabled && isExpanded
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(StyledAccordionSummary, {
    expandIcon: /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_icons_ExpandMore__WEBPACK_IMPORTED_MODULE_97___default.a, {
      role: "presentation"
    }),
    "aria-controls": `layer-${name2}-controls`
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    container: true,
    direction: "column",
    m: 1,
    justifyContent: "center"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(OverflowEllipsisGrid, {
    item: true
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_92__["default"], {
    onClick: (e) => {
      if (!disabled) {
        e.stopPropagation();
        const nextVisible = typeof visible === "boolean" ? !visible : false;
        setVisible(nextVisible);
      }
    },
    style: {
      marginRight: 8,
      marginBottom: 2,
      padding: 0,
      minWidth: 0
    }
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Visibility, null)), name2), !disabled && !isExpanded && !use3d && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    container: true,
    direction: "row",
    alignItems: "center",
    justifyContent: "center"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true,
    xs: 6
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(StyledInputLabel, {
    htmlFor: `layer-${name2}-opacity-closed`
  }, "Opacity:")), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true,
    xs: 6
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_48__["default"], {
    id: `layer-${name2}-opacity-closed`,
    value: opacity,
    onChange: (e, v) => setOpacity(v),
    valueLabelDisplay: "auto",
    getAriaLabel: () => "opacity slider",
    min: 0,
    max: 1,
    step: 0.01,
    orientation: "horizontal"
  }))))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(StyledAccordionDetails, null, useVolumeTabs ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Tabs__WEBPACK_IMPORTED_MODULE_94__["default"], {
    value: tab,
    onChange: handleTabChange,
    "aria-label": "simple tabs example",
    style: { height: "24px", minHeight: "24px" }
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Tab__WEBPACK_IMPORTED_MODULE_95__["default"], {
    label: "Channels",
    style: {
      fontSize: ".75rem",
      bottom: 12,
      width: "50%",
      minWidth: "50%"
    },
    disableRipple: true
  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Tab__WEBPACK_IMPORTED_MODULE_95__["default"], {
    label: "Volume",
    style: {
      fontSize: ".75rem",
      bottom: 12,
      width: "50%",
      minWidth: "50%"
    }
  })), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TabPanel, {
    value: tab,
    index: 0
  }, FullController), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TabPanel, {
    value: tab,
    index: 1,
    style: { marginTop: 4 }
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(VolumeOptions_default, {
    loader,
    handleSlicerSetting,
    handleRenderingModeChange: setRenderingMode,
    renderingMode,
    xSlice,
    ySlice,
    zSlice,
    use3d,
    setViewState,
    spatialHeight,
    spatialWidth,
    modelMatrix
  }))) : FullController, shouldShowRemoveLayerButton ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_92__["default"], {
    onClick: handleLayerRemove,
    fullWidth: true,
    variant: "outlined",
    style: buttonStyles,
    size: "small"
  }, "Remove Image Layer") : null));
}

// src/components/layer-controller/ImageAddButton.js




var useStyles5 = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["makeStyles"])(() => ({
  addButton: {
    marginTop: "10px",
    marginBottom: "10px",
    fontWeight: 400
  }
}));
function ImageAddIcon() {
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_icons_Add__WEBPACK_IMPORTED_MODULE_93___default.a, null), "Add Image Layer");
}
function ImageAddButton({ imageOptions, handleImageAdd }) {
  const [open, setOpen] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const classes = useStyles5();
  const handleAdd = (imgData) => {
    setOpen((prev) => !prev);
    handleImageAdd(imgData);
  };
  if (!imageOptions)
    return null;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(PopperMenu, {
    open,
    setOpen,
    buttonIcon: /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ImageAddIcon, null),
    buttonClassName: classes.addButton,
    placement: "bottom-start"
  }, imageOptions.map((imgData, i) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_MenuItem__WEBPACK_IMPORTED_MODULE_3__["default"], {
    dense: true,
    key: imgData.name,
    onClick: () => handleAdd(i)
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", null, imgData.name))));
}
var ImageAddButton_default = ImageAddButton;

// src/components/layer-controller/LayerControllerSubscriber.js
var LAYER_CONTROLLER_DATA_TYPES = ["raster"];
var LayerControllerMemoized = react__WEBPACK_IMPORTED_MODULE_0___default.a.memo(Object(react__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])((props, ref) => {
  const {
    title: title17,
    removeGridComponent,
    theme,
    isReady,
    moleculesLayer,
    dataset,
    setMoleculesLayer,
    cellsLayer,
    canShowCellVecmask,
    setCellsLayer,
    rasterLayers,
    imageLayerLoaders,
    imageLayerMeta,
    rasterLayersCallbacks,
    setRasterLayersCallbacks,
    areLoadingRasterChannnels,
    setAreLoadingRasterChannnels,
    handleRasterLayerChange,
    handleRasterLayerRemove,
    disable3d,
    globalDisable3d,
    disableChannelsIfRgbDetected,
    layerIs3DIndex,
    setZoom,
    setTargetX,
    setTargetY,
    setTargetZ,
    setRotationX,
    setRotationOrbit,
    componentHeight,
    componentWidth,
    spatialLayout,
    handleImageAdd,
    enableLayerButtonsWithOneLayer
  } = props;
  const shouldShowImageLayerButton = Boolean(enableLayerButtonsWithOneLayer || (imageLayerLoaders == null ? void 0 : imageLayerLoaders.length) > 1);
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TitleInfo, {
    title: title17,
    isScroll: true,
    removeGridComponent,
    theme,
    isReady
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "layer-controller-container",
    ref
  }, moleculesLayer && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(VectorLayerController, {
    key: `${dataset}-molecules`,
    label: "Molecules",
    layerType: "molecules",
    layer: moleculesLayer,
    handleLayerChange: setMoleculesLayer
  }), cellsLayer && canShowCellVecmask && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(VectorLayerController, {
    key: `${dataset}-cells`,
    label: "Cell Segmentations",
    layerType: "cells",
    layer: cellsLayer,
    handleLayerChange: setCellsLayer
  }), rasterLayers && rasterLayers.map((layer, i) => {
    var _a2;
    const { index } = layer;
    const loader = imageLayerLoaders[index];
    const layerMeta = imageLayerMeta[index];
    const isRaster = !((_a2 = layerMeta == null ? void 0 : layerMeta.metadata) == null ? void 0 : _a2.isBitmask);
    const ChannelController = isRaster ? RasterChannelController_default : BitmaskChannelController_default;
    const setRasterLayerCallback = (cb) => {
      const newRasterLayersCallbacks = [
        ...rasterLayersCallbacks || []
      ];
      newRasterLayersCallbacks[i] = cb;
      setRasterLayersCallbacks(newRasterLayersCallbacks);
    };
    const areLayerChannelsLoading = (areLoadingRasterChannnels || [])[i] || [];
    const setAreLayerChannelsLoading = (v) => {
      const newAreLoadingRasterChannnels = [
        ...areLoadingRasterChannnels || []
      ];
      newAreLoadingRasterChannnels[i] = v;
      setAreLoadingRasterChannnels(newAreLoadingRasterChannnels);
    };
    return loader && layerMeta ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
      key: `${dataset}-raster-${index}-${i}`,
      item: true,
      style: { marginTop: "10px" }
    }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(LayerController, {
      name: layerMeta.name,
      layer,
      loader,
      theme,
      handleLayerChange: (v) => handleRasterLayerChange(v, i),
      handleLayerRemove: () => handleRasterLayerRemove(i),
      ChannelController,
      shouldShowTransparentColor: isRaster,
      shouldShowDomain: isRaster,
      shouldShowColormap: isRaster,
      disable3d: globalDisable3d || (disable3d || []).indexOf(layerMeta.name) >= 0 || typeof layerIs3DIndex === "number" && layerIs3DIndex !== -1 && layerIs3DIndex !== i,
      disabled: typeof layerIs3DIndex === "number" && layerIs3DIndex !== -1 && layerIs3DIndex !== i,
      disableChannelsIfRgbDetected,
      rasterLayersCallbacks,
      setRasterLayerCallback,
      setViewState: ({
        zoom: newZoom,
        target,
        rotationX: newRotationX,
        rotationOrbit: newRotationOrbit
      }) => {
        setZoom(newZoom);
        setTargetX(target[0]);
        setTargetY(target[1]);
        setTargetZ(target[2]);
        setRotationX(newRotationX);
        setRotationOrbit(newRotationOrbit);
      },
      setAreLayerChannelsLoading,
      areLayerChannelsLoading,
      spatialHeight: componentHeight * (spatialLayout ? spatialLayout.h : 1) / 12,
      spatialWidth: componentWidth * (spatialLayout ? spatialLayout.w : 1) / 12,
      shouldShowRemoveLayerButton: shouldShowImageLayerButton
    })) : null;
  }), shouldShowImageLayerButton ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_84__["default"], {
    item: true
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ImageAddButton_default, {
    imageOptions: imageLayerMeta,
    handleImageAdd
  })) : null));
}));
function LayerControllerSubscriber(props) {
  const {
    coordinationScopes,
    removeGridComponent,
    theme,
    title: title17 = "Spatial Layers",
    disable3d,
    globalDisable3d,
    disableChannelsIfRgbDetected,
    enableLayerButtonsWithOneLayer
  } = props;
  const loaders = useLoaders();
  const [
    {
      dataset,
      spatialRasterLayers: rasterLayers,
      spatialCellsLayer: cellsLayer,
      spatialMoleculesLayer: moleculesLayer
    },
    {
      setSpatialRasterLayers: setRasterLayers,
      setSpatialCellsLayer: setCellsLayer,
      setSpatialMoleculesLayer: setMoleculesLayer,
      setSpatialTargetX: setTargetX,
      setSpatialTargetY: setTargetY,
      setSpatialTargetZ: setTargetZ,
      setSpatialRotationX: setRotationX,
      setSpatialRotationOrbit: setRotationOrbit,
      setSpatialZoom: setZoom
    }
  ] = useCoordination(COMPONENT_COORDINATION_TYPES.layerController, coordinationScopes);
  const [
    {
      rasterLayersCallbacks,
      areLoadingRasterChannnels
    },
    {
      setRasterLayersCallbacks,
      setAreLoadingRasterChannnels
    }
  ] = useAuxiliaryCoordination(COMPONENT_COORDINATION_TYPES.layerController, coordinationScopes);
  const [spatialLayout] = useComponentLayout("spatial", ["spatialRasterLayers"], coordinationScopes);
  const layerControllerRef = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])();
  const [componentWidth, componentHeight] = useClosestVitessceContainerSize(layerControllerRef);
  const { height: windowHeight, width: windowWidth } = useWindowDimensions();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(LAYER_CONTROLLER_DATA_TYPES);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    resetReadyItems();
  }, [loaders, dataset]);
  const [raster, imageLayerLoaders, imageLayerMeta] = useRasterData(loaders, dataset, setItemIsReady, () => {
  }, false, { setSpatialRasterLayers: setRasterLayers }, { spatialRasterLayers: rasterLayers });
  useCellsData(loaders, dataset, setItemIsReady, () => {
  }, false, { setSpatialCellsLayer: setCellsLayer }, { spatialCellsLayer: cellsLayer });
  useMoleculesData(loaders, dataset, setItemIsReady, () => {
  }, false, { setSpatialMoleculesLayer: setMoleculesLayer }, { spatialMoleculesLayer: moleculesLayer });
  const handleImageAdd = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])((index) => __async(this, null, function* () {
    var _a2, _b2, _c, _d, _e;
    const loader = imageLayerLoaders[index];
    const newChannels = yield initializeLayerChannels(loader, (rasterLayers[index] || {}).use3d);
    const newLayer = __spreadProps(__spreadValues({
      index,
      modelMatrix: (_c = (_b2 = (_a2 = imageLayerMeta[index]) == null ? void 0 : _a2.metadata) == null ? void 0 : _b2.transform) == null ? void 0 : _c.matrix
    }, DEFAULT_RASTER_LAYER_PROPS), {
      channels: newChannels,
      type: ((_e = (_d = imageLayerMeta[index]) == null ? void 0 : _d.metadata) == null ? void 0 : _e.isBitmask) ? "bitmask" : "raster"
    });
    const newLayers = [...rasterLayers, newLayer];
    setRasterLayers(newLayers);
  }), [imageLayerLoaders, imageLayerMeta, rasterLayers, setRasterLayers]);
  const handleRasterLayerChange = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])((newLayer, i) => {
    const newLayers = [...rasterLayers];
    newLayers[i] = newLayer;
    setRasterLayers(newLayers);
  }, [rasterLayers, setRasterLayers]);
  const handleRasterLayerRemove = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])((i) => {
    const newLayers = [...rasterLayers];
    newLayers.splice(i, 1);
    setRasterLayers(newLayers);
  }, [rasterLayers, setRasterLayers]);
  const hasNoBitmask = (imageLayerMeta.length ? imageLayerMeta : [{ metadata: { isBitmask: true } }]).every((l) => {
    var _a2;
    return !((_a2 = l == null ? void 0 : l.metadata) == null ? void 0 : _a2.isBitmask);
  });
  const canShowCellVecmask = hasNoBitmask;
  const layerIs3DIndex = (rasterLayers == null ? void 0 : rasterLayers.findIndex) && rasterLayers.findIndex((layer) => layer.use3d);
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(LayerControllerMemoized, {
    ref: layerControllerRef,
    title: title17,
    removeGridComponent,
    theme,
    isReady,
    moleculesLayer,
    dataset,
    setMoleculesLayer,
    cellsLayer,
    canShowCellVecmask,
    setCellsLayer,
    rasterLayers,
    imageLayerLoaders,
    imageLayerMeta,
    rasterLayersCallbacks,
    setRasterLayersCallbacks,
    areLoadingRasterChannnels,
    setAreLoadingRasterChannnels,
    handleRasterLayerChange,
    handleRasterLayerRemove,
    disable3d,
    globalDisable3d,
    layerIs3DIndex,
    disableChannelsIfRgbDetected,
    enableLayerButtonsWithOneLayer,
    setZoom,
    setTargetX,
    setTargetY,
    setTargetZ,
    setRotationX,
    setRotationOrbit,
    componentHeight: componentHeight || windowHeight,
    componentWidth: componentWidth || windowWidth,
    spatialLayout,
    handleImageAdd
  });
}
var LayerControllerSubscriber_default = LayerControllerSubscriber;

// src/components/higlass/HiGlassSubscriber.js


// src/components/higlass/HiGlassLazy.js





var PIXI_BUNDLE_VERSION = package_default.dependencies["window-pixi"];
var HIGLASS_BUNDLE_VERSION = package_default.dependencies.higlass;
var BUNDLE_FILE_EXT = true ? "js" : undefined;
var PIXI_BUNDLE_URL = `https://unpkg.com/window-pixi@${PIXI_BUNDLE_VERSION}/dist/pixi.${BUNDLE_FILE_EXT}`;
var HIGLASS_BUNDLE_URL = `https://unpkg.com/higlass@${HIGLASS_BUNDLE_VERSION}/dist/hglib.${BUNDLE_FILE_EXT}`;
if (dynamic_import_polyfill__WEBPACK_IMPORTED_MODULE_102__["default"]) {
  dynamic_import_polyfill__WEBPACK_IMPORTED_MODULE_102__["default"].initialize();
}
Object(higlass_register__WEBPACK_IMPORTED_MODULE_103__["default"])({ dataFetcher: higlass_zarr_datafetchers__WEBPACK_IMPORTED_MODULE_104__["ZarrMultivecDataFetcher"], config: higlass_zarr_datafetchers__WEBPACK_IMPORTED_MODULE_104__["ZarrMultivecDataFetcher"].config }, { pluginType: "dataFetcher" });
var HiGlassComponent = react__WEBPACK_IMPORTED_MODULE_0___default.a.lazy(() => {
  if (!window.React) {
    window.React = react__WEBPACK_IMPORTED_MODULE_0___default.a;
  }
  if (!window.ReactDOM) {
    window.ReactDOM = react_dom__WEBPACK_IMPORTED_MODULE_101___default.a;
  }
  return new Promise((resolve) => {
    const handleImportError = (e) => {
      console.warn(e);
      resolve(asEsModule(createWarningComponent({
        title: "Could not load HiGlass",
        message: "The HiGlass scripts could not be dynamically imported."
      })));
    };
    __import__(PIXI_BUNDLE_URL).then(() => {
      __import__(HIGLASS_BUNDLE_URL).then(() => {
        resolve(asEsModule(window.hglib.HiGlassComponent));
      }).catch(handleImportError);
    }).catch(handleImportError);
  });
});
var HG_SIZE = 800;
function HiGlassLazy(props) {
  const {
    coordinationScopes,
    theme,
    hgViewConfig: hgViewConfigProp,
    hgOptions: hgOptionsProp,
    genomeSize,
    height
  } = props;
  const [{
    genomicZoomX,
    genomicZoomY,
    genomicTargetX,
    genomicTargetY
  }, {
    setGenomicZoomX,
    setGenomicZoomY,
    setGenomicTargetX,
    setGenomicTargetY
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.higlass, coordinationScopes);
  const [width, computedHeight, containerRef] = useGridItemSize();
  const [hgInstance, setHgInstance] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])();
  const isActiveRef = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])();
  const hgOptions = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => __spreadProps(__spreadValues({}, hgOptionsProp), {
    theme
  }), [hgOptionsProp, theme]);
  const hgViewConfig = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => {
    const centerX = genomicTargetX;
    const genomesPerUnitX = genomeSize / __pow(2, genomicZoomX);
    const unitX = width / HG_SIZE;
    const initialXDomain = [
      centerX - genomesPerUnitX * unitX / 2,
      centerX + genomesPerUnitX * unitX / 2
    ];
    const centerY = genomicTargetY;
    const genomesPerUnitY = genomeSize / __pow(2, genomicZoomY);
    const unitY = height / HG_SIZE;
    const initialYDomain = [
      centerY - genomesPerUnitY * unitY / 2,
      centerY + genomesPerUnitY * unitY / 2
    ];
    return {
      editable: false,
      zoomFixed: false,
      trackSourceServers: [
        "//higlass.io/api/v1"
      ],
      exportViewUrl: "//higlass.io/api/v1/viewconfs",
      views: [
        __spreadProps(__spreadValues({
          uid: "main"
        }, hgViewConfigProp), {
          initialXDomain,
          initialYDomain
        })
      ],
      zoomLocks: {
        locksByViewUid: {},
        locksDict: {}
      },
      locationLocks: {
        locksByViewUid: {},
        locksDict: {}
      },
      valueScaleLocks: {
        locksByViewUid: {},
        locksDict: {}
      }
    };
  }, [
    genomicTargetX,
    genomeSize,
    genomicZoomX,
    width,
    genomicTargetY,
    genomicZoomY,
    height,
    hgViewConfigProp
  ]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    const handleMouseEnter = () => {
      isActiveRef.current = true;
    };
    const handleMouseLeave = () => {
      isActiveRef.current = false;
    };
    const container = containerRef.current;
    container.addEventListener("mouseenter", handleMouseEnter);
    container.addEventListener("mouseleave", handleMouseLeave);
    return () => {
      container.removeEventListener("mouseenter", handleMouseEnter);
      container.removeEventListener("mouseenter", handleMouseLeave);
    };
  }, [containerRef]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (!hgInstance) {
      return () => {
      };
    }
    hgInstance.api.on("viewConfig", (viewConfigString) => {
      if (!isActiveRef.current) {
        return;
      }
      const viewConfig = JSON.parse(viewConfigString);
      const xDomain = viewConfig.views[0].initialXDomain;
      const yDomain = viewConfig.views[0].initialYDomain;
      const nextGenomicZoomX = Math.log2(genomeSize / ((xDomain[1] - xDomain[0]) * (HG_SIZE / width)));
      const nextGenomicZoomY = Math.log2(genomeSize / ((yDomain[1] - yDomain[0]) * (HG_SIZE / height)));
      const nextGenomicTargetX = xDomain[0] + (xDomain[1] - xDomain[0]) / 2;
      const nextGenomicTargetY = yDomain[0] + (yDomain[1] - yDomain[0]) / 2;
      setGenomicZoomX(nextGenomicZoomX);
      setGenomicZoomY(nextGenomicZoomY);
      setGenomicTargetX(nextGenomicTargetX);
      setGenomicTargetY(nextGenomicTargetY);
    });
    return () => hgInstance.api.off("viewConfig");
  }, [
    hgInstance,
    genomeSize,
    width,
    height,
    setGenomicZoomX,
    setGenomicZoomY,
    setGenomicTargetX,
    setGenomicTargetY
  ]);
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "higlass-wrapper-parent"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "higlass-wrapper",
    ref: containerRef,
    style: { height: `${height}px` }
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__["Suspense"], {
    fallback: /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, "Loading...")
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(HiGlassComponent, {
    ref: setHgInstance,
    zoomFixed: false,
    viewConfig: hgViewConfig,
    options: hgOptions
  }))));
}
HiGlassLazy.defaultProps = {
  hgOptions: {
    bounded: true,
    pixelPreciseMarginPadding: true,
    containerPaddingX: 0,
    containerPaddingY: 0,
    sizeMode: "default"
  },
  genomeSize: 31e8
};

// src/components/higlass/HiGlassSubscriber.js
var HIGLASS_DATA_TYPES = [];
function HiGlassSubscriber(props) {
  const {
    coordinationScopes,
    theme,
    hgViewConfig,
    removeGridComponent
  } = props;
  const [width, height, containerRef] = useGridItemSize();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(HIGLASS_DATA_TYPES);
  const [urls, addUrl, resetUrls] = useUrls();
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "higlass-title-wrapper"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TitleInfo, {
    title: "HiGlass",
    removeGridComponent,
    theme,
    isReady,
    urls
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "higlass-lazy-wrapper",
    ref: containerRef
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(HiGlassLazy, {
    coordinationScopes,
    theme,
    hgViewConfig,
    height
  }))));
}

// src/components/sets/CellSetSizesPlotSubscriber.js


// src/components/sets/CellSetSizesPlot.js



// src/components/vega/VegaPlot.js



// src/components/vega/ReactVega.js


// src/components/vega/VegaPlot.js
var DATASET_NAME = "table";
function isVega(spec) {
  return spec.$schema === "https://vega.github.io/schema/vega/v5.json";
}
function VegaPlot(props) {
  const {
    spec: partialSpec,
    data,
    signalListeners
  } = props;
  const spec = __spreadProps(__spreadValues({}, partialSpec), {
    data: isVega(partialSpec) ? [
      { name: DATASET_NAME },
      ...partialSpec.data
    ] : { name: DATASET_NAME }
  });
  const vegaComponent = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_vega__WEBPACK_IMPORTED_MODULE_106__["Vega"], {
    spec,
    data: {
      [DATASET_NAME]: data
    },
    signalListeners,
    tooltip: new vega_tooltip__WEBPACK_IMPORTED_MODULE_105__["Handler"]().call,
    renderer: "canvas",
    scaleFactor: 3
  }), [spec, data, signalListeners]);
  return spec && data && data.length > 0 ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0__["Suspense"], {
    fallback: /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, "Loading...")
  }, vegaComponent) : null;
}

// src/components/vega/utils.js
var VEGA_THEMES = {
  dark: {
    background: null,
    title: { color: "#fff" },
    style: {
      "guide-label": {
        fill: "#fff"
      },
      "guide-title": {
        fill: "#fff"
      }
    },
    axis: {
      domainColor: "#fff",
      gridColor: "#888",
      tickColor: "#fff"
    }
  },
  light: {
    background: null
  }
};

// src/components/sets/CellSetSizesPlot.js
function CellSetSizesPlot(props) {
  const {
    data: rawData,
    theme,
    width,
    height,
    marginRight = 90,
    marginBottom = 120,
    keyLength = 36
  } = props;
  const data = rawData.map((d) => __spreadProps(__spreadValues({}, d), {
    keyName: d.key + d.name,
    colorString: colorArrayToString(d.color)
  }));
  const colors = {
    domain: data.map((d) => d.key),
    range: data.map((d) => d.colorString)
  };
  const keys = data.map((d) => d.keyName);
  const spec = {
    mark: { type: "bar" },
    encoding: {
      x: {
        field: "keyName",
        type: "nominal",
        axis: { labelExpr: `substring(datum.label, ${keyLength})` },
        title: "Cell Set",
        sort: keys
      },
      y: {
        field: "size",
        type: "quantitative",
        title: "Cell Set Size"
      },
      color: {
        field: "key",
        type: "nominal",
        scale: colors,
        legend: null
      },
      tooltip: {
        field: "size",
        type: "quantitative"
      }
    },
    width: lodash_clamp__WEBPACK_IMPORTED_MODULE_46___default()(width - marginRight, 10, Infinity),
    height: lodash_clamp__WEBPACK_IMPORTED_MODULE_46___default()(height - marginBottom, 10, Infinity),
    config: VEGA_THEMES[theme]
  };
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(VegaPlot, {
    data,
    spec
  });
}

// src/components/sets/CellSetSizesPlotSubscriber.js
var CELL_SET_SIZES_DATA_TYPES = ["cell-sets"];
function CellSetSizesPlotSubscriber(props) {
  const {
    coordinationScopes,
    removeGridComponent,
    theme,
    title: title17 = "Cell Set Sizes"
  } = props;
  const loaders = useLoaders();
  const [{
    dataset,
    cellSetSelection,
    cellSetColor,
    additionalCellSets
  }, {
    setCellSetSelection,
    setCellSetColor
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.cellSetSizes, coordinationScopes);
  const [width, height, containerRef] = useGridItemSize();
  const [urls, addUrl, resetUrls] = useUrls();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(CELL_SET_SIZES_DATA_TYPES);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    resetUrls();
    resetReadyItems();
  }, [loaders, dataset]);
  const [cellSets] = useCellSetsData(loaders, dataset, setItemIsReady, addUrl, true, { setCellSetSelection, setCellSetColor }, { cellSetSelection, cellSetColor });
  const mergedCellSets = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => mergeCellSets(cellSets, additionalCellSets), [cellSets, additionalCellSets]);
  const data = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => mergedCellSets && cellSetSelection && cellSetColor ? treeToSetSizesBySetNames(mergedCellSets, cellSetSelection, cellSetColor, theme) : [], [mergedCellSets, cellSetSelection, cellSetColor, theme]);
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TitleInfo, {
    title: title17,
    removeGridComponent,
    urls,
    theme,
    isReady
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    ref: containerRef,
    className: "vega-container"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(CellSetSizesPlot, {
    data,
    theme,
    width,
    height
  })));
}

// src/components/higlass/GenomicProfilesSubscriber.js



var GENOMIC_PROFILES_DATA_TYPES = ["genomic-profiles"];
var REFERENCE_TILESETS = {
  hg38: {
    chromosomes: "NyITQvZsS_mOFNlz5C2LJg",
    genes: "P0PLbQMwTYGy-5uPIQid7A"
  },
  hg19: {
    chromosomes: "N12wVGG9SPiTkk03yUayUw",
    genes: "OHJakQICQD6gTD7skx4EWA"
  },
  mm9: {
    chromosomes: "WAVhNHYxQVueq6KulwgWiQ",
    genes: "GUm5aBiLRCyz2PsBea7Yzg"
  },
  mm10: {
    chromosomes: "EtrWT0VtScixmsmwFSd7zg",
    genes: "QDutvmyiSrec5nX4pA5WGQ"
  }
};
function GenomicProfilesSubscriber(props) {
  const {
    coordinationScopes,
    theme,
    removeGridComponent,
    profileTrackUidKey = "path",
    profileTrackNameKey = null,
    higlassServer = "https://higlass.io/api/v1",
    assembly = "hg38",
    title: title17 = "Genomic Profiles"
  } = props;
  const [width, height, containerRef] = useGridItemSize();
  const loaders = useLoaders();
  const [{
    dataset,
    cellSetColor,
    cellSetSelection
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.genomicProfiles, coordinationScopes);
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(GENOMIC_PROFILES_DATA_TYPES);
  const [urls, addUrl, resetUrls] = useUrls();
  const [genomicProfilesAttrs] = useGenomicProfilesData(loaders, dataset, setItemIsReady, addUrl, true);
  const hgViewConfig = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => {
    if (!genomicProfilesAttrs || urls.length !== 1) {
      return null;
    }
    const { url } = urls[0];
    const foregroundColor = theme === "dark" ? "#C0C0C0" : "#000000";
    const backgroundColor = theme === "dark" ? "#000000" : "#f1f1f1";
    const dimColor = theme === "dark" ? "dimgray" : "silver";
    const referenceTracks = [
      {
        type: "horizontal-chromosome-labels",
        server: higlassServer,
        tilesetUid: REFERENCE_TILESETS[assembly].chromosomes,
        uid: "chromosome-labels",
        options: {
          color: foregroundColor,
          fontSize: 12,
          fontIsLeftAligned: false,
          showMousePosition: true,
          mousePositionColor: foregroundColor
        },
        height: 30
      },
      {
        type: "horizontal-gene-annotations",
        server: higlassServer,
        tilesetUid: REFERENCE_TILESETS[assembly].genes,
        uid: "gene-annotations",
        options: {
          name: "Gene Annotations (hg38)",
          fontSize: 10,
          labelPosition: "hidden",
          labelLeftMargin: 0,
          labelRightMargin: 0,
          labelTopMargin: 0,
          labelBottomMargin: 0,
          minHeight: 24,
          geneAnnotationHeight: 16,
          geneLabelPosition: "outside",
          geneStrandSpacing: 4,
          showMousePosition: true,
          mousePositionColor: foregroundColor,
          plusStrandColor: foregroundColor,
          minusStrandColor: foregroundColor,
          labelColor: "black",
          labelBackgroundColor: backgroundColor,
          trackBorderWidth: 0,
          trackBorderColor: "black"
        },
        height: 70
      }
    ];
    const referenceTracksHeightSum = Object(d3_array__WEBPACK_IMPORTED_MODULE_47__["sum"])(referenceTracks.map((t) => t.height));
    const profileTracksHeightSum = height - referenceTracksHeightSum - 10;
    const profileTrackHeight = profileTracksHeightSum / genomicProfilesAttrs.row_infos.length;
    const profileTracks = genomicProfilesAttrs.row_infos.map((rowInfo, i) => {
      var _a2;
      const trackUid = rowInfo[profileTrackUidKey];
      const isPath = Array.isArray(trackUid);
      const trackName = profileTrackNameKey ? rowInfo[profileTrackNameKey] : isPath ? trackUid[trackUid.length - 1] : trackUid;
      const setInSelection = isPath ? cellSetSelection == null ? void 0 : cellSetSelection.find((s) => lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(s, trackUid)) : false;
      const setColor = isPath ? (_a2 = cellSetColor == null ? void 0 : cellSetColor.find((s) => lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(s.path, trackUid))) == null ? void 0 : _a2.color : null;
      const trackUidString = isPath ? trackUid.join("__") : trackUid;
      const track = {
        type: "horizontal-bar",
        uid: `bar-track-${trackUidString}`,
        data: {
          type: "zarr-multivec",
          url,
          row: i
        },
        options: {
          name: trackName,
          showMousePosition: true,
          mousePositionColor: foregroundColor,
          labelColor: theme === "dark" ? "white" : "black",
          labelBackgroundColor: theme === "dark" ? "black" : "white",
          labelShowAssembly: false
        },
        height: profileTrackHeight
      };
      if (setColor && setInSelection) {
        const c = setColor;
        track.options.barFillColor = `rgb(${c[0]},${c[1]},${c[2]})`;
      } else {
        track.options.barFillColor = dimColor;
      }
      return track;
    });
    const hgView = {
      tracks: {
        top: [
          ...referenceTracks,
          ...profileTracks
        ],
        left: [],
        center: [],
        right: [],
        bottom: [],
        whole: [],
        gallery: []
      },
      layout: {
        w: 12,
        h: 12,
        x: 0,
        y: 0,
        static: false
      }
    };
    return hgView;
  }, [
    genomicProfilesAttrs,
    urls,
    theme,
    height,
    profileTrackUidKey,
    profileTrackNameKey,
    cellSetSelection,
    cellSetColor,
    higlassServer,
    assembly
  ]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    resetUrls();
    resetReadyItems();
  }, [loaders, dataset]);
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "higlass-title-wrapper"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TitleInfo, {
    title: title17,
    removeGridComponent,
    theme,
    isReady,
    urls
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    className: "higlass-lazy-wrapper",
    ref: containerRef
  }, hgViewConfig ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(HiGlassLazy, {
    coordinationScopes,
    theme,
    hgViewConfig,
    height
  }) : null)));
}

// src/components/genes/ExpressionHistogramSubscriber.js



// src/components/genes/ExpressionHistogram.js


function ExpressionHistogram(props) {
  const {
    geneSelection,
    data,
    theme,
    width,
    height,
    marginRight = 90,
    marginBottom = 50
  } = props;
  const xTitle = geneSelection && geneSelection.length >= 1 ? "Normalized Expression Value" : "Total Normalized Transcript Count";
  const spec = {
    mark: { type: "bar" },
    encoding: {
      x: {
        field: "value",
        type: "quantitative",
        bin: { maxbins: 50 },
        title: xTitle
      },
      y: {
        type: "quantitative",
        aggregate: "count",
        title: "Number of Cells"
      },
      color: { value: "gray" }
    },
    width: lodash_clamp__WEBPACK_IMPORTED_MODULE_46___default()(width - marginRight, 10, Infinity),
    height: lodash_clamp__WEBPACK_IMPORTED_MODULE_46___default()(height - marginBottom, 10, Infinity),
    config: VEGA_THEMES[theme]
  };
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(VegaPlot, {
    data,
    spec
  });
}

// src/components/genes/ExpressionHistogramSubscriber.js
var EXPRESSION_HISTOGRAM_DATA_TYPES = ["expression-matrix"];
function ExpressionHistogramSubscriber(props) {
  const {
    coordinationScopes,
    removeGridComponent,
    theme
  } = props;
  const loaders = useLoaders();
  const [{
    dataset,
    geneSelection
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.expressionHistogram, coordinationScopes);
  const [width, height, containerRef] = useGridItemSize();
  const [urls, addUrl, resetUrls] = useUrls();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(EXPRESSION_HISTOGRAM_DATA_TYPES);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    resetUrls();
    resetReadyItems();
  }, [loaders, dataset]);
  const [expressionMatrix] = useExpressionMatrixData(loaders, dataset, setItemIsReady, addUrl, true);
  const [expressionData] = useGeneSelection(loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady);
  const firstGeneSelected = geneSelection && geneSelection.length >= 1 ? geneSelection[0] : null;
  const data = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => {
    if (firstGeneSelected && expressionMatrix && expressionData) {
      return Array.from(expressionData[0]).map((_, index) => {
        const value = expressionData[0][index];
        const normValue = value * 100 / 255;
        return { value: normValue, gene: firstGeneSelected };
      });
    }
    if (expressionMatrix) {
      const numGenes = expressionMatrix.cols.length;
      return expressionMatrix.rows.map((cellId, cellIndex) => {
        const values = expressionMatrix.matrix.subarray(cellIndex * numGenes, (cellIndex + 1) * numGenes);
        const sumValue = Object(d3_array__WEBPACK_IMPORTED_MODULE_47__["sum"])(values) * 100 / 255;
        return { value: sumValue, gene: null };
      });
    }
    return null;
  }, [expressionMatrix, firstGeneSelected, expressionData]);
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TitleInfo, {
    title: `Expression Histogram${firstGeneSelected ? ` (${firstGeneSelected})` : ""}`,
    removeGridComponent,
    urls,
    theme,
    isReady
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    ref: containerRef,
    className: "vega-container"
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ExpressionHistogram, {
    geneSelection,
    data,
    theme,
    width,
    height
  })));
}

// src/components/sets/CellSetExpressionPlotSubscriber.js


// src/components/sets/hooks.js

function useExpressionByCellSet(expressionData, expressionDataAttrs, cellSets, additionalCellSets, geneSelection, cellSetSelection, cellSetColor, useGeneExpressionTransform, theme) {
  const mergedCellSets = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => mergeCellSets(cellSets, additionalCellSets), [cellSets, additionalCellSets]);
  const [expressionArr, expressionMax] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => {
    if (mergedCellSets && cellSetSelection && geneSelection && geneSelection.length >= 1 && expressionData) {
      const cellObjects = treeToObjectsBySetNames(mergedCellSets, cellSetSelection, cellSetColor, theme);
      const firstGeneSelected = geneSelection[0];
      let exprMax = -Infinity;
      const cellIndices = {};
      for (let i = 0; i < expressionDataAttrs.rows.length; i += 1) {
        cellIndices[expressionDataAttrs.rows[i]] = i;
      }
      const exprValues = cellObjects.map((cell) => {
        const cellIndex = cellIndices[cell.obsId];
        const value = expressionData[0][cellIndex];
        const normValue = value * 100 / 255;
        const transformedValue = useGeneExpressionTransform ? Math.log(1 + normValue) : normValue;
        exprMax = Math.max(transformedValue, exprMax);
        return { value: transformedValue, gene: firstGeneSelected, set: cell.name };
      });
      return [exprValues, exprMax];
    }
    return [null, null];
  }, [
    expressionData,
    expressionDataAttrs,
    geneSelection,
    theme,
    mergedCellSets,
    cellSetSelection,
    cellSetColor,
    useGeneExpressionTransform
  ]);
  const setArr = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => mergedCellSets && cellSetSelection && cellSetColor ? treeToSetSizesBySetNames(mergedCellSets, cellSetSelection, cellSetColor, theme) : [], [mergedCellSets, cellSetSelection, cellSetColor, theme]);
  return [expressionArr, setArr, expressionMax];
}

// src/components/sets/CellSetExpressionPlotOptions.js




function CellSetExpressionPlotOptions(props) {
  const { toggleGeneExpressionTransform, useGeneExpressionTransform } = props;
  const classes = useStyles2();
  function handleGeneExpressionTransformChange() {
    toggleGeneExpressionTransform();
  }
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(OptionsContainer, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_50__["default"], null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.labelCell
  }, "Log Transform"), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_49__["default"], {
    className: classes.inputCell
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_Checkbox__WEBPACK_IMPORTED_MODULE_67__["default"], {
    className: classes.checkbox,
    checked: Boolean(useGeneExpressionTransform),
    onChange: handleGeneExpressionTransformChange,
    name: "scatterplot-option-cell-set-labels",
    color: "default"
  }))));
}

// src/components/sets/CellSetExpressionPlot.js


function CellSetExpressionPlot(props) {
  const {
    domainMax = 100,
    colors,
    data,
    theme,
    width,
    height,
    marginRight = 90,
    marginBottom,
    useGeneExpressionTransform
  } = props;
  const maxCharactersForLabel = data.reduce((acc, val) => {
    acc = acc === void 0 || val.set.length > acc ? val.set.length : acc;
    return acc;
  }, 0);
  const autoMarginBottom = marginBottom || 30 + Math.sqrt(maxCharactersForLabel / 2) * 30;
  const colorScale = {
    domain: colors.map((d) => d.name),
    range: colors.map((d) => colorArrayToString(d.color))
  };
  const plotWidth = lodash_clamp__WEBPACK_IMPORTED_MODULE_46___default()(width - marginRight, 10, Infinity);
  const plotHeight = lodash_clamp__WEBPACK_IMPORTED_MODULE_46___default()(height - autoMarginBottom, 10, Infinity);
  const numBands = colors.length;
  const bandWidth = plotWidth / numBands;
  const rectColor = theme === "dark" ? "white" : "black";
  const spec = {
    $schema: "https://vega.github.io/schema/vega/v5.json",
    description: "A violin plot showing distributions of expression levels for selected cell sets.",
    width: plotWidth,
    height: plotHeight,
    config: __spreadProps(__spreadValues({}, VEGA_THEMES[theme]), {
      axisBand: {
        bandPosition: 1,
        tickExtra: true,
        tickOffset: 0
      }
    }),
    signals: [
      { name: "bandWidth", value: bandWidth },
      { name: "width", value: plotWidth },
      { name: "height", value: plotHeight },
      { name: "trim", value: true }
    ],
    data: [
      {
        name: "density",
        source: DATASET_NAME,
        transform: [
          {
            type: "kde",
            field: "value",
            groupby: ["set"],
            bandwidth: 0,
            extent: [0, domainMax]
          }
        ]
      },
      {
        name: "stats",
        source: DATASET_NAME,
        transform: [
          {
            type: "aggregate",
            groupby: ["set"],
            fields: ["value", "value", "value"],
            ops: ["q1", "median", "q3"],
            as: ["q1", "median", "q3"]
          }
        ]
      }
    ],
    scales: [
      {
        name: "layout",
        type: "band",
        range: "width",
        domain: { data: DATASET_NAME, field: "set" }
      },
      {
        name: "yscale",
        type: "linear",
        range: "height",
        domain: [0, domainMax]
      },
      {
        name: "wscale",
        type: "linear",
        range: [0, { signal: "bandWidth" }],
        domain: { data: "density", field: "density" }
      },
      {
        name: "wscaleReversed",
        type: "linear",
        reverse: true,
        range: [0, { signal: "bandWidth" }],
        domain: { data: "density", field: "density" }
      },
      __spreadValues({
        name: "color",
        type: "ordinal"
      }, colorScale)
    ],
    axes: [
      {
        orient: "left",
        scale: "yscale",
        zindex: 1,
        title: useGeneExpressionTransform ? ["Log-Transformed", "Normalized Expression Values"] : "Normalized Expression Values"
      },
      {
        orient: "bottom",
        scale: "layout",
        tickCount: 5,
        zindex: 1,
        title: "Cell Set",
        labelAngle: -45,
        labelAlign: "right"
      }
    ],
    marks: [
      {
        type: "group",
        from: {
          facet: {
            data: "density",
            name: "violin",
            groupby: "set"
          }
        },
        encode: {
          enter: {
            xc: { scale: "layout", field: "set", band: 0.5 },
            width: { signal: "bandWidth" },
            height: { signal: "height" }
          }
        },
        data: [
          {
            name: "summary",
            source: "stats",
            transform: [
              {
                type: "filter",
                expr: "datum.set === parent.set"
              }
            ]
          }
        ],
        marks: [
          {
            type: "area",
            orient: "vertical",
            from: { data: "violin" },
            encode: {
              enter: {
                fill: { scale: "color", field: { parent: "set" } }
              },
              update: {
                width: { scale: "wscale", field: "density" },
                xc: { signal: "bandWidth / 2" },
                y2: { scale: "yscale", field: "value" },
                y: { scale: "yscale", value: 0 }
              }
            }
          },
          {
            type: "area",
            orient: "vertical",
            from: { data: "violin" },
            encode: {
              enter: {
                fill: { scale: "color", field: { parent: "set" } }
              },
              update: {
                width: { scale: "wscaleReversed", field: "density" },
                xc: { signal: "bandWidth" },
                y2: { scale: "yscale", field: "value" },
                y: { scale: "yscale", value: 0 }
              }
            }
          },
          {
            type: "rect",
            from: { data: "summary" },
            encode: {
              enter: {
                fill: { value: rectColor },
                width: { value: 2 }
              },
              update: {
                y: { scale: "yscale", field: "q1" },
                y2: { scale: "yscale", field: "q3" },
                xc: { signal: "bandWidth / 2" }
              }
            }
          },
          {
            type: "rect",
            from: { data: "summary" },
            encode: {
              enter: {
                fill: { value: rectColor },
                height: { value: 2 },
                width: { value: 8 }
              },
              update: {
                y: { scale: "yscale", field: "median" },
                xc: { signal: "bandWidth / 2" }
              }
            }
          }
        ]
      }
    ]
  };
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(VegaPlot, {
    data,
    spec
  });
}

// src/components/sets/CellSetExpressionPlotSubscriber.js
var CELL_SET_EXPRESSION_DATA_TYPES = ["cell-sets", "expression-matrix"];
function CellSetExpressionPlotSubscriber(props) {
  const {
    coordinationScopes,
    removeGridComponent,
    theme
  } = props;
  const loaders = useLoaders();
  const [{
    dataset,
    geneSelection,
    geneExpressionTransform,
    cellSetSelection,
    cellSetColor,
    additionalCellSets
  }, {
    setGeneExpressionTransform
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.cellSetExpression, coordinationScopes);
  const [width, height, containerRef] = useGridItemSize();
  const [urls, addUrl, resetUrls] = useUrls();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(CELL_SET_EXPRESSION_DATA_TYPES);
  const [useGeneExpressionTransform, toggleGeneExpressionTransform] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useReducer"])((v) => {
    const newValue = !v;
    setGeneExpressionTransform(newValue ? "log1p" : null);
    return newValue;
  }, geneExpressionTransform);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    resetUrls();
    resetReadyItems();
  }, [loaders, dataset]);
  const [expressionData] = useGeneSelection(loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady);
  const [attrs] = useExpressionAttrs(loaders, dataset, setItemIsReady, addUrl, false);
  const [cellSets] = useCellSetsData(loaders, dataset, setItemIsReady, addUrl, true);
  const [expressionArr, setArr, expressionMax] = useExpressionByCellSet(expressionData, attrs, cellSets, additionalCellSets, geneSelection, cellSetSelection, cellSetColor, useGeneExpressionTransform, theme);
  const firstGeneSelected = geneSelection && geneSelection.length >= 1 ? geneSelection[0] : null;
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TitleInfo, {
    title: `Expression by Cell Set${firstGeneSelected ? ` (${firstGeneSelected})` : ""}`,
    removeGridComponent,
    urls,
    theme,
    isReady,
    options: /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(CellSetExpressionPlotOptions, {
      useGeneExpressionTransform,
      toggleGeneExpressionTransform
    })
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    ref: containerRef,
    className: "vega-container"
  }, expressionArr ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(CellSetExpressionPlot, {
    domainMax: expressionMax,
    colors: setArr,
    data: expressionArr,
    theme,
    width,
    height,
    useGeneExpressionTransform
  }) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", null, "Select a gene.")));
}

// src/app/component-registry.js
var registry = {
  [Component.DESCRIPTION]: DescriptionSubscriber,
  [Component.STATUS]: StatusSubscriber,
  [Component.GENES]: GenesSubscriber,
  [Component.CELL_SETS]: CellSetsManagerSubscriber,
  [Component.SCATTERPLOT]: ScatterplotSubscriber,
  [Component.SPATIAL]: SpatialSubscriber,
  [Component.HEATMAP]: HeatmapSubscriber,
  [Component.LAYER_CONTROLLER]: LayerControllerSubscriber_default,
  [Component.CELL_SET_SIZES]: CellSetSizesPlotSubscriber,
  [Component.GENOMIC_PROFILES]: GenomicProfilesSubscriber,
  [Component.EXPRESSION_HISTOGRAM]: ExpressionHistogramSubscriber,
  [Component.CELL_SET_EXPRESSION]: CellSetExpressionPlotSubscriber,
  higlass: HiGlassSubscriber
};
function getComponent(name2) {
  const component = registry[name2];
  if (component === void 0) {
    throw new Error(`Could not find definition for "${name2}" in registry.`);
  }
  return registry[name2];
}

// src/app/view-config-utils.js
function getExistingScopesForCoordinationType(config, coordinationType) {
  var _a2;
  const spaceScopes = Object.keys(((_a2 = config == null ? void 0 : config.coordinationSpace) == null ? void 0 : _a2[coordinationType]) || {});
  const componentScopes = config.layout.map((c) => {
    var _a3;
    return (_a3 = c.coordinationScopes) == null ? void 0 : _a3[coordinationType];
  });
  return Array.from(new Set([...spaceScopes, ...componentScopes]));
}
function coordinateComponentsTogether(config, coordinationType, scopeValue) {
  var _a2;
  const scopeName = getNextScope(getExistingScopesForCoordinationType(config, coordinationType));
  const newConfig = __spreadProps(__spreadValues({}, config), {
    coordinationSpace: __spreadProps(__spreadValues({}, config.coordinationSpace), {
      [coordinationType]: __spreadProps(__spreadValues({}, (_a2 = config == null ? void 0 : config.coordinationSpace) == null ? void 0 : _a2[coordinationType]), {
        [scopeName]: scopeValue
      })
    }),
    layout: config.layout.map((component) => {
      var _a3;
      return __spreadProps(__spreadValues({}, component), {
        coordinationScopes: __spreadValues(__spreadValues({}, component.coordinationScopes), COMPONENT_COORDINATION_TYPES[component.component].includes(coordinationType) && !((_a3 = component.coordinationScopes) == null ? void 0 : _a3[coordinationType]) ? {
          [coordinationType]: scopeName
        } : {})
      });
    })
  });
  return newConfig;
}
function coordinateComponentsIndependent(config, coordinationType, scopeValue) {
  const newConfig = __spreadProps(__spreadValues({}, config), {
    layout: [...config.layout]
  });
  const newScopes = {};
  newConfig.layout.forEach((component, i) => {
    var _a2;
    if (COMPONENT_COORDINATION_TYPES[component.component].includes(coordinationType) && !((_a2 = component.coordinationScopes) == null ? void 0 : _a2[coordinationType])) {
      const scopeName = getNextScope([
        ...getExistingScopesForCoordinationType(config, coordinationType),
        ...Object.keys(newScopes)
      ]);
      newScopes[scopeName] = scopeValue;
      newConfig.layout[i] = __spreadProps(__spreadValues({}, component), {
        coordinationScopes: __spreadProps(__spreadValues({}, component.coordinationScopes), {
          [coordinationType]: scopeName
        })
      });
    }
  });
  newConfig.coordinationSpace = __spreadProps(__spreadValues({}, newConfig.coordinationSpace), {
    [coordinationType]: __spreadValues(__spreadValues({}, newConfig.coordinationSpace[coordinationType]), newScopes)
  });
  return newConfig;
}
function initializeAuto(config) {
  let newConfig = config;
  const { layout, datasets } = newConfig;
  Object.values(CoordinationType).forEach((coordinationType) => {
    const requiresCoordination = !layout.every((c) => {
      var _a2;
      return !COMPONENT_COORDINATION_TYPES[c.component].includes(coordinationType) || ((_a2 = c.coordinationScopes) == null ? void 0 : _a2[coordinationType]);
    });
    if (requiresCoordination) {
      let defaultValue = DEFAULT_COORDINATION_VALUES[coordinationType];
      if (coordinationType === "dataset" && datasets.length >= 1) {
        defaultValue = datasets[0].uid;
      }
      if (AUTO_INDEPENDENT_COORDINATION_TYPES.includes(coordinationType)) {
        newConfig = coordinateComponentsIndependent(newConfig, coordinationType, defaultValue);
      } else {
        newConfig = coordinateComponentsTogether(newConfig, coordinationType, defaultValue);
      }
    }
  });
  return newConfig;
}
function initialize(config) {
  if (config.initStrategy === "auto") {
    return initializeAuto(config);
  }
  return config;
}
function upgradeAndValidate(oldConfig) {
  let nextConfig = oldConfig;
  let fromVersion;
  let upgradeFunction;
  let validateFunction;
  do {
    fromVersion = nextConfig.version;
    if (!Object.keys(SCHEMA_HANDLERS).includes(fromVersion)) {
      return [{
        title: "Config validation failed",
        preformatted: "Unknown config version."
      }, false];
    }
    [validateFunction, upgradeFunction] = SCHEMA_HANDLERS[fromVersion];
    const validLegacy = validateFunction(nextConfig);
    if (!validLegacy) {
      const failureReason = JSON.stringify(validateFunction.errors, null, 2);
      return [{
        title: "Config validation failed",
        preformatted: failureReason
      }, false];
    }
    if (upgradeFunction) {
      nextConfig = upgradeFunction(nextConfig);
    }
  } while (upgradeFunction);
  console.groupCollapsed(`\u{1F684} Vitessce (${package_default.version}) view configuration`);
  console.info(`data:,${JSON.stringify(nextConfig)}`);
  console.info(JSON.stringify(nextConfig, null, 2));
  console.groupEnd();
  return [nextConfig, true];
}

// src/app/Vitessce.js
var generateClassName = Object(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["createGenerateClassName"])({
  disableGlobal: true
});
function Vitessce(props) {
  const {
    config,
    rowHeight,
    height,
    theme,
    onWarn,
    onConfigChange,
    onLoaderChange,
    validateOnConfigChange = false
  } = props;
  const [configOrWarning, success] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => {
    if (!config) {
      return [{
        title: "No such dataset",
        unformatted: "The dataset configuration could not be found."
      }, false];
    }
    if (!config.version) {
      return [{
        title: "Missing version",
        unformatted: "The dataset configuration is missing a version, preventing validation."
      }, false];
    }
    const [upgradedConfig, upgradeSuccess] = upgradeAndValidate(config);
    if (upgradeSuccess) {
      const initializedConfig = initialize(upgradedConfig);
      return [initializedConfig, true];
    }
    return [upgradedConfig, false];
  }, [config]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (success && !lodash_isEqual__WEBPACK_IMPORTED_MODULE_39___default()(configOrWarning, config) && onConfigChange) {
      onConfigChange(configOrWarning);
    }
  }, [success, config, configOrWarning, onConfigChange]);
  return success ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["StylesProvider"], {
    generateClassName
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__["ThemeProvider"], {
    theme: muiTheme[theme]
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ViewConfigProvider, {
    createStore: createViewConfigStore
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(AuxiliaryProvider, {
    createStore: createAuxiliaryStore
  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(VitessceGrid, {
    config: configOrWarning,
    getComponent,
    rowHeight,
    height,
    theme
  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(CallbackPublisher, {
    onWarn,
    onConfigChange,
    onLoaderChange,
    validateOnConfigChange
  }))))) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Warning, __spreadValues({
    theme
  }, configOrWarning));
}

// src/app/app.js
function AwaitResponse(props) {
  const {
    response,
    theme
  } = props;
  const [isLoading, setIsLoading] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(true);
  const responseRef = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])();
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    response.then((c) => {
      responseRef.current = c;
      setIsLoading(false);
    });
  }, [response]);
  return !isLoading ? react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(responseRef.current) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Warning, {
    title: "Loading...",
    theme
  });
}
function preformattedDetails(response) {
  return `
    ok: ${response.ok}
    status: ${response.status}
    statusText: ${response.statusText}
    redirected: ${response.redirected}
    type: ${response.type}
    url: ${response.url}`;
}
function checkResponse(response, theme, debug) {
  if (!response.ok) {
    return Promise.resolve(() => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Warning, {
      title: "Fetch response not OK",
      preformatted: preformattedDetails(response),
      theme
    }));
  }
  return response.text().then((text) => {
    try {
      const config = JSON.parse(text);
      return Promise.resolve(() => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Vitessce, {
        config,
        theme,
        onConfigChange: debug ? console.log : void 0,
        validateOnConfigChange: debug
      }));
    } catch (e) {
      return Promise.resolve(() => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Warning, {
        title: "Error parsing JSON",
        preformatted: preformattedDetails(response),
        unformatted: `${e.message}: ${text}`,
        theme
      }));
    }
  });
}
function validateTheme(theme) {
  return ["light", "dark"].includes(theme) ? theme : "dark";
}
function createApp(params) {
  const { rowHeight = null } = params || {};
  const urlParams = new URLSearchParams(window.location.search);
  const datasetId = urlParams.get("dataset");
  const debug = urlParams.get("debug") === "true";
  const datasetUrl = urlParams.get("url");
  const showAll = urlParams.get("show") === "all";
  const theme = validateTheme(urlParams.get("theme"));
  if (datasetId) {
    const config = getConfig6(datasetId);
    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Vitessce, {
      config,
      rowHeight,
      theme,
      onConfigChange: debug ? console.log : void 0,
      validateOnConfigChange: debug
    });
  }
  if (datasetUrl) {
    const responsePromise = fetch(datasetUrl).then((response) => checkResponse(response, theme, debug)).catch((error) => Promise.resolve(() => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Warning, {
      title: "Error fetching",
      unformatted: error.message,
      theme
    })));
    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(AwaitResponse, {
      response: responsePromise,
      theme
    });
  }
  const configs2 = listConfigs(showAll);
  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Welcome, {
    configs: configs2,
    theme
  });
}

// src/app/export-utils.js


var CURRENT_VERSION = "0.0.1";
var VITESSCE_CONF_QUERY_STRING = "vitessce_conf";
var VERSION_QUERY_STRING = "vitessce_conf_version";
var LENGTH_QUERY_STRING = "vitessce_conf_length";
function sniffBrowser() {
  const { browser } = bowser__WEBPACK_IMPORTED_MODULE_107___default.a.parse(window.navigator.userAgent);
  return browser.name;
}
var MAX_BROWSER_URL_LENGTHS = {
  Chrome: 32779,
  "Internet Explorer": 2047,
  Edge: 2047,
  Safari: 65e3,
  Firefox: 65e3
};
var CompressedConfLengthError = class {
  constructor(message) {
    this.message = message;
  }
};
function encodeConfInUrl({
  conf,
  onOverMaximumUrlLength = () => {
  }
}) {
  const compressedConf = Object(lz_string__WEBPACK_IMPORTED_MODULE_108__["compressToEncodedURIComponent"])(JSON.stringify(conf));
  const newParams = `${LENGTH_QUERY_STRING}=${compressedConf.length}&${VERSION_QUERY_STRING}=${CURRENT_VERSION}&${VITESSCE_CONF_QUERY_STRING}=${compressedConf}`;
  const browser = sniffBrowser();
  const maxLength = MAX_BROWSER_URL_LENGTHS[browser];
  if (newParams.length > maxLength) {
    const willWorkOn = Object.entries(MAX_BROWSER_URL_LENGTHS).filter((entry) => entry[1] > newParams.length).map((entry) => entry[0]);
    const message = `Configuration is ${compressedConf.length} characters; max URL for ${browser} is ${maxLength}: it will work on ${willWorkOn.join(", ") || "no browser"}.`;
    console.error(message);
    onOverMaximumUrlLength({ message, willWorkOn });
  }
  return newParams;
}
function decodeURLParamsToConf(queryString) {
  const params = new URLSearchParams(queryString.replace("#", "&"));
  const compressedConfString = params.get(VITESSCE_CONF_QUERY_STRING);
  const expectedConfLength = Number(params.get(LENGTH_QUERY_STRING));
  if (expectedConfLength !== compressedConfString.length) {
    throw new CompressedConfLengthError(`Compressed conf length (${compressedConfString.length}) != expected (${expectedConfLength}). URL truncated?`);
  }
  const version2 = params.get(VERSION_QUERY_STRING);
  if (version2 === CURRENT_VERSION) {
    const conf = JSON.parse(Object(lz_string__WEBPACK_IMPORTED_MODULE_108__["decompressFromEncodedURIComponent"])(compressedConfString));
    return conf;
  }
  throw new Error("Unrecognized URL Param Version");
}

//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./node_modules/vitessce/node_modules/json2csv/dist/json2csv.umd.js":
/*!**************************************************************************!*\
  !*** ./node_modules/vitessce/node_modules/json2csv/dist/json2csv.umd.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {
   true ? factory(exports) :
  undefined;
}(this, function (exports) { 'use strict';

  var domain;

  // This constructor is used to store event handlers. Instantiating this is
  // faster than explicitly calling `Object.create(null)` to get a "clean" empty
  // object (tested with v8 v4.9).
  function EventHandlers() {}
  EventHandlers.prototype = Object.create(null);

  function EventEmitter() {
    EventEmitter.init.call(this);
  }

  // nodejs oddity
  // require('events') === require('events').EventEmitter
  EventEmitter.EventEmitter = EventEmitter;

  EventEmitter.usingDomains = false;

  EventEmitter.prototype.domain = undefined;
  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  EventEmitter.defaultMaxListeners = 10;

  EventEmitter.init = function() {
    this.domain = null;
    if (EventEmitter.usingDomains) {
      // if there is an active domain, then attach to it.
      if (domain.active && !(this instanceof domain.Domain)) ;
    }

    if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
      this._events = new EventHandlers();
      this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
  };

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || isNaN(n))
      throw new TypeError('"n" argument must be a positive number');
    this._maxListeners = n;
    return this;
  };

  function $getMaxListeners(that) {
    if (that._maxListeners === undefined)
      return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }

  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $getMaxListeners(this);
  };

  // These standalone emit* functions are used to optimize calling of event
  // handlers for fast cases because emit() itself often has a variable number of
  // arguments and can be deoptimized because of that. These functions always have
  // the same number of arguments and thus do not get deoptimized, so the code
  // inside them can execute faster.
  function emitNone(handler, isFn, self) {
    if (isFn)
      handler.call(self);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self);
    }
  }
  function emitOne(handler, isFn, self, arg1) {
    if (isFn)
      handler.call(self, arg1);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1);
    }
  }
  function emitTwo(handler, isFn, self, arg1, arg2) {
    if (isFn)
      handler.call(self, arg1, arg2);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2);
    }
  }
  function emitThree(handler, isFn, self, arg1, arg2, arg3) {
    if (isFn)
      handler.call(self, arg1, arg2, arg3);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2, arg3);
    }
  }

  function emitMany(handler, isFn, self, args) {
    if (isFn)
      handler.apply(self, args);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].apply(self, args);
    }
  }

  EventEmitter.prototype.emit = function emit(type) {
    var er, handler, len, args, i, events, domain;
    var doError = (type === 'error');

    events = this._events;
    if (events)
      doError = (doError && events.error == null);
    else if (!doError)
      return false;

    domain = this.domain;

    // If there is no 'error' event listener then throw.
    if (doError) {
      er = arguments[1];
      if (domain) {
        if (!er)
          er = new Error('Uncaught, unspecified "error" event');
        er.domainEmitter = this;
        er.domain = domain;
        er.domainThrown = false;
        domain.emit('error', er);
      } else if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
      return false;
    }

    handler = events[type];

    if (!handler)
      return false;

    var isFn = typeof handler === 'function';
    len = arguments.length;
    switch (len) {
      // fast cases
      case 1:
        emitNone(handler, isFn, this);
        break;
      case 2:
        emitOne(handler, isFn, this, arguments[1]);
        break;
      case 3:
        emitTwo(handler, isFn, this, arguments[1], arguments[2]);
        break;
      case 4:
        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
        break;
      // slower
      default:
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        emitMany(handler, isFn, this, args);
    }

    return true;
  };

  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;

    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');

    events = target._events;
    if (!events) {
      events = target._events = new EventHandlers();
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener) {
        target.emit('newListener', type,
                    listener.listener ? listener.listener : listener);

        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }

    if (!existing) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [listener, existing] :
                                            [existing, listener];
      } else {
        // If we've already got an array, just append.
        if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
      }

      // Check for listener leak
      if (!existing.warned) {
        m = $getMaxListeners(target);
        if (m && m > 0 && existing.length > m) {
          existing.warned = true;
          var w = new Error('Possible EventEmitter memory leak detected. ' +
                              existing.length + ' ' + type + ' listeners added. ' +
                              'Use emitter.setMaxListeners() to increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          emitWarning(w);
        }
      }
    }

    return target;
  }
  function emitWarning(e) {
    typeof console.warn === 'function' ? console.warn(e) : console.log(e);
  }
  EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };

  function _onceWrap(target, type, listener) {
    var fired = false;
    function g() {
      target.removeListener(type, g);
      if (!fired) {
        fired = true;
        listener.apply(target, arguments);
      }
    }
    g.listener = listener;
    return g;
  }

  EventEmitter.prototype.once = function once(type, listener) {
    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };

  EventEmitter.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };

  // emits a 'removeListener' event iff the listener was removed
  EventEmitter.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;

        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');

        events = this._events;
        if (!events)
          return this;

        list = events[type];
        if (!list)
          return this;

        if (list === listener || (list.listener && list.listener === listener)) {
          if (--this._eventsCount === 0)
            this._events = new EventHandlers();
          else {
            delete events[type];
            if (events.removeListener)
              this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length; i-- > 0;) {
            if (list[i] === listener ||
                (list[i].listener && list[i].listener === listener)) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (list.length === 1) {
            list[0] = undefined;
            if (--this._eventsCount === 0) {
              this._events = new EventHandlers();
              return this;
            } else {
              delete events[type];
            }
          } else {
            spliceOne(list, position);
          }

          if (events.removeListener)
            this.emit('removeListener', type, originalListener || listener);
        }

        return this;
      };

  EventEmitter.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var listeners, events;

        events = this._events;
        if (!events)
          return this;

        // not listening for removeListener, no need to emit
        if (!events.removeListener) {
          if (arguments.length === 0) {
            this._events = new EventHandlers();
            this._eventsCount = 0;
          } else if (events[type]) {
            if (--this._eventsCount === 0)
              this._events = new EventHandlers();
            else
              delete events[type];
          }
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          for (var i = 0, key; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = new EventHandlers();
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners) {
          // LIFO order
          do {
            this.removeListener(type, listeners[listeners.length - 1]);
          } while (listeners[0]);
        }

        return this;
      };

  EventEmitter.prototype.listeners = function listeners(type) {
    var evlistener;
    var ret;
    var events = this._events;

    if (!events)
      ret = [];
    else {
      evlistener = events[type];
      if (!evlistener)
        ret = [];
      else if (typeof evlistener === 'function')
        ret = [evlistener.listener || evlistener];
      else
        ret = unwrapListeners(evlistener);
    }

    return ret;
  };

  EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount.call(emitter, type);
    }
  };

  EventEmitter.prototype.listenerCount = listenerCount;
  function listenerCount(type) {
    var events = this._events;

    if (events) {
      var evlistener = events[type];

      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener) {
        return evlistener.length;
      }
    }

    return 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
  };

  // About 1.5x faster than the two-arg version of Array#splice().
  function spliceOne(list, index) {
    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
      list[i] = list[k];
    list.pop();
  }

  function arrayClone(arr, i) {
    var copy = new Array(i);
    while (i--)
      copy[i] = arr[i];
    return copy;
  }

  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }

  var global$1 = (typeof global !== "undefined" ? global :
              typeof self !== "undefined" ? self :
              typeof window !== "undefined" ? window : {});

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;
  function init () {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;
  }

  function toByteArray (b64) {
    if (!inited) {
      init();
    }
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(len * 3 / 4 - placeHolders);

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len;

    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = (tmp >> 16) & 0xFF;
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr
  }

  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
  }

  function encodeChunk (uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
      output.push(tripletToBase64(tmp));
    }
    return output.join('')
  }

  function fromByteArray (uint8) {
    if (!inited) {
      init();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[(tmp << 4) & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
      output += lookup[tmp >> 10];
      output += lookup[(tmp >> 4) & 0x3F];
      output += lookup[(tmp << 2) & 0x3F];
      output += '=';
    }

    parts.push(output);

    return parts.join('')
  }

  function read (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  function write (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  var toString = {}.toString;

  var isArray = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };

  var INSPECT_MAX_BYTES = 50;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
    ? global$1.TYPED_ARRAY_SUPPORT
    : true;

  function kMaxLength () {
    return Buffer.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  function createBuffer (that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length')
    }
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer(length);
      }
      that.length = length;
    }

    return that
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer (arg, encodingOrOffset, length) {
    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
      return new Buffer(arg, encodingOrOffset, length)
    }

    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error(
          'If encoding is specified then the first argument must be a string'
        )
      }
      return allocUnsafe(this, arg)
    }
    return from(this, arg, encodingOrOffset, length)
  }

  Buffer.poolSize = 8192; // not used by this implementation

  // TODO: Legacy, not needed anymore. Remove in next major version.
  Buffer._augment = function (arr) {
    arr.__proto__ = Buffer.prototype;
    return arr
  };

  function from (that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset)
    }

    return fromObject(that, value)
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length)
  };

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype;
    Buffer.__proto__ = Uint8Array;
  }

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }
  }

  function alloc (that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(that, size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(that, size).fill(fill, encoding)
        : createBuffer(that, size).fill(fill)
    }
    return createBuffer(that, size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding)
  };

  function allocUnsafe (that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(null, size)
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size)
  };

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }

    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);

    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that
  }

  function fromArrayLike (that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that
  }

  function fromArrayBuffer (that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array);
    }
    return that
  }

  function fromObject (that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that
      }

      obj.copy(that, 0, 0, len);
      return that
    }

    if (obj) {
      if ((typeof ArrayBuffer !== 'undefined' &&
          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0)
        }
        return fromArrayLike(that, obj)
      }

      if (obj.type === 'Buffer' && isArray(obj.data)) {
        return fromArrayLike(that, obj.data)
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }
  Buffer.isBuffer = isBuffer;
  function internalIsBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer.compare = function compare (a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  };

  Buffer.concat = function concat (list, length) {
    if (!isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer.alloc(0)
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos);
      pos += buf.length;
    }
    return buffer
  };

  function byteLength (string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.byteLength = byteLength;

  function slowToString (encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return ''
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.
  Buffer.prototype._isBuffer = true;

  function swap (b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer.prototype.swap16 = function swap16 () {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this
  };

  Buffer.prototype.swap32 = function swap32 () {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this
  };

  Buffer.prototype.swap64 = function swap64 () {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this
  };

  Buffer.prototype.toString = function toString () {
    var length = this.length | 0;
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  };

  Buffer.prototype.equals = function equals (b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  };

  Buffer.prototype.inspect = function inspect () {
    var str = '';
    var max = INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }
    return '<Buffer ' + str + '>'
  };

  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer')
    }

    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;

    if (this === target) return 0

    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);

    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset;  // Coerce to Number.
    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1);
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (Buffer.TYPED_ARRAY_SUPPORT &&
          typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break
          }
        }
        if (found) return i
      }
    }

    return -1
  }

  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  };

  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  };

  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  };

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }

    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i
      buf[offset + i] = parsed;
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8';

    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  };

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf)
    } else {
      return fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];

    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret
  }

  function latin1Slice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length;

    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;

    var out = '';
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res
  }

  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;

    var newBuf;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer(sliceLen, undefined);
      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val
  };

  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val
  };

  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset]
  };

  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | (this[offset + 1] << 8)
  };

  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return (this[offset] << 8) | this[offset + 1]
  };

  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  };

  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  };

  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  };

  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | (this[offset + 1] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | (this[offset] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  };

  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  };

  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, true, 23, 4)
  };

  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, false, 23, 4)
  };

  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, true, 52, 8)
  };

  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, false, 52, 8)
  };

  function checkInt (buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = (value & 0xff);
    return offset + 1
  };

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
    }
  }

  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = (value & 0xff);
    return offset + 1
  };

  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
    }
    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  };

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
    }
    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      );
    }

    return len
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (code < 256) {
          val = code;
        }
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;

    if (!val) val = 0;

    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val)
        ? val
        : utf8ToBytes(new Buffer(val, encoding).toString());
      var len = bytes.length;
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          }

          // valid lead
          leadSurrogate = codePoint;

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray
  }


  function base64ToBytes (str) {
    return toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i];
    }
    return i
  }

  function isnan (val) {
    return val !== val // eslint-disable-line no-self-compare
  }


  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  function isBuffer(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
  }

  function isFastBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }

  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
  }

  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;
  if (typeof global$1.setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
  }
  if (typeof global$1.clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }


  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }



  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  function nextTick(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  }
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  var title = 'browser';
  var platform = 'browser';
  var browser = true;
  var env = {};
  var argv = [];
  var version = ''; // empty string to avoid regexp issues
  var versions = {};
  var release = {};
  var config = {};

  function noop() {}

  var on = noop;
  var addListener = noop;
  var once = noop;
  var off = noop;
  var removeListener = noop;
  var removeAllListeners = noop;
  var emit = noop;

  function binding(name) {
      throw new Error('process.binding is not supported');
  }

  function cwd () { return '/' }
  function chdir (dir) {
      throw new Error('process.chdir is not supported');
  }function umask() { return 0; }

  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
  var performance = global$1.performance || {};
  var performanceNow =
    performance.now        ||
    performance.mozNow     ||
    performance.msNow      ||
    performance.oNow       ||
    performance.webkitNow  ||
    function(){ return (new Date()).getTime() };

  // generate timestamp or delta
  // see http://nodejs.org/api/process.html#process_process_hrtime
  function hrtime(previousTimestamp){
    var clocktime = performanceNow.call(performance)*1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor((clocktime%1)*1e9);
    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];
      if (nanoseconds<0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }
    return [seconds,nanoseconds]
  }

  var startTime = new Date();
  function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
  }

  var process = {
    nextTick: nextTick,
    title: title,
    browser: browser,
    env: env,
    argv: argv,
    version: version,
    versions: versions,
    on: on,
    addListener: addListener,
    once: once,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config,
    uptime: uptime
  };

  var inherits;
  if (typeof Object.create === 'function'){
    inherits = function inherits(ctor, superCtor) {
      // implementation from standard node.js 'util' module
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    inherits = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  var inherits$1 = inherits;

  var formatRegExp = /%[sdj%]/g;
  function format(f) {
    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  }

  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  function deprecate(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(global$1.process)) {
      return function() {
        return deprecate(fn, msg).apply(this, arguments);
      };
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  }

  var debugs = {};
  var debugEnviron;
  function debuglog(set) {
    if (isUndefined(debugEnviron))
      debugEnviron = process.env.NODE_DEBUG || '';
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = 0;
        debugs[set] = function() {
          var msg = format.apply(null, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  }

  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      _extend(ctx, opts);
    }
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }

  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };

  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };


  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }


  function stylizeNoColor(str, styleType) {
    return str;
  }


  function arrayToHash(array) {
    var hash = {};

    array.forEach(function(val, idx) {
      hash[val] = true;
    });

    return hash;
  }


  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }

    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '', array = false, braces = ['{', '}'];

    // Make Array say that they are Array
    if (isArray$1(value)) {
      array = true;
      braces = ['[', ']'];
    }

    // Make functions say that they are functions
    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }


  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value))
      return ctx.stylize('' + value, 'number');
    if (isBoolean(value))
      return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      return ctx.stylize('null', 'null');
  }


  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }


  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }


  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }


  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function(prev, cur) {
      if (cur.indexOf('\n') >= 0) ;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }


  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray$1(ar) {
    return Array.isArray(ar);
  }

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }

  function isNull(arg) {
    return arg === null;
  }

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  function isString(arg) {
    return typeof arg === 'string';
  }

  function isUndefined(arg) {
    return arg === void 0;
  }

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }

  function isError(e) {
    return isObject(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }

  function _extend(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  }
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  function BufferList() {
    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function (v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function (v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function () {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function () {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function (s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function (n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      p.data.copy(ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  // Copyright Joyent, Inc. and other Node contributors.
  var isBufferEncoding = Buffer.isEncoding
    || function(encoding) {
         switch (encoding && encoding.toLowerCase()) {
           case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
           default: return false;
         }
       };


  function assertEncoding(encoding) {
    if (encoding && !isBufferEncoding(encoding)) {
      throw new Error('Unknown encoding: ' + encoding);
    }
  }

  // StringDecoder provides an interface for efficiently splitting a series of
  // buffers into a series of JS strings without breaking apart multi-byte
  // characters. CESU-8 is handled as part of the UTF-8 encoding.
  //
  // @TODO Handling all encodings inside a single object makes it very difficult
  // to reason about this code, so it should be split up in the future.
  // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
  // points as used by CESU-8.
  function StringDecoder(encoding) {
    this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
    assertEncoding(encoding);
    switch (this.encoding) {
      case 'utf8':
        // CESU-8 represents each of Surrogate Pair by 3-bytes
        this.surrogateSize = 3;
        break;
      case 'ucs2':
      case 'utf16le':
        // UTF-16 represents each of Surrogate Pair by 2-bytes
        this.surrogateSize = 2;
        this.detectIncompleteChar = utf16DetectIncompleteChar;
        break;
      case 'base64':
        // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
        this.surrogateSize = 3;
        this.detectIncompleteChar = base64DetectIncompleteChar;
        break;
      default:
        this.write = passThroughWrite;
        return;
    }

    // Enough space to store all bytes of a single character. UTF-8 needs 4
    // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
    this.charBuffer = new Buffer(6);
    // Number of bytes received for the current incomplete multi-byte character.
    this.charReceived = 0;
    // Number of bytes expected for the current incomplete multi-byte character.
    this.charLength = 0;
  }

  // write decodes the given buffer and returns it as JS string that is
  // guaranteed to not contain any partial multi-byte characters. Any partial
  // character found at the end of the buffer is buffered up, and will be
  // returned when calling write again with the remaining bytes.
  //
  // Note: Converting a Buffer containing an orphan surrogate to a String
  // currently works, but converting a String to a Buffer (via `new Buffer`, or
  // Buffer#write) will replace incomplete surrogates with the unicode
  // replacement character. See https://codereview.chromium.org/121173009/ .
  StringDecoder.prototype.write = function(buffer) {
    var charStr = '';
    // if our last write ended with an incomplete multibyte character
    while (this.charLength) {
      // determine how many remaining bytes this buffer has to offer for this char
      var available = (buffer.length >= this.charLength - this.charReceived) ?
          this.charLength - this.charReceived :
          buffer.length;

      // add the new bytes to the char buffer
      buffer.copy(this.charBuffer, this.charReceived, 0, available);
      this.charReceived += available;

      if (this.charReceived < this.charLength) {
        // still not enough chars in this buffer? wait for more ...
        return '';
      }

      // remove bytes belonging to the current character from the buffer
      buffer = buffer.slice(available, buffer.length);

      // get the character that was split
      charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
      var charCode = charStr.charCodeAt(charStr.length - 1);
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        this.charLength += this.surrogateSize;
        charStr = '';
        continue;
      }
      this.charReceived = this.charLength = 0;

      // if there are no more bytes in this buffer, just emit our char
      if (buffer.length === 0) {
        return charStr;
      }
      break;
    }

    // determine and set charLength / charReceived
    this.detectIncompleteChar(buffer);

    var end = buffer.length;
    if (this.charLength) {
      // buffer the incomplete character bytes we got
      buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
      end -= this.charReceived;
    }

    charStr += buffer.toString(this.encoding, 0, end);

    var end = charStr.length - 1;
    var charCode = charStr.charCodeAt(end);
    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      var size = this.surrogateSize;
      this.charLength += size;
      this.charReceived += size;
      this.charBuffer.copy(this.charBuffer, size, 0, size);
      buffer.copy(this.charBuffer, 0, 0, size);
      return charStr.substring(0, end);
    }

    // or just emit the charStr
    return charStr;
  };

  // detectIncompleteChar determines if there is an incomplete UTF-8 character at
  // the end of the given buffer. If so, it sets this.charLength to the byte
  // length that character, and sets this.charReceived to the number of bytes
  // that are available for this character.
  StringDecoder.prototype.detectIncompleteChar = function(buffer) {
    // determine how many bytes we have to check at the end of this buffer
    var i = (buffer.length >= 3) ? 3 : buffer.length;

    // Figure out if one of the last i bytes of our buffer announces an
    // incomplete char.
    for (; i > 0; i--) {
      var c = buffer[buffer.length - i];

      // See http://en.wikipedia.org/wiki/UTF-8#Description

      // 110XXXXX
      if (i == 1 && c >> 5 == 0x06) {
        this.charLength = 2;
        break;
      }

      // 1110XXXX
      if (i <= 2 && c >> 4 == 0x0E) {
        this.charLength = 3;
        break;
      }

      // 11110XXX
      if (i <= 3 && c >> 3 == 0x1E) {
        this.charLength = 4;
        break;
      }
    }
    this.charReceived = i;
  };

  StringDecoder.prototype.end = function(buffer) {
    var res = '';
    if (buffer && buffer.length)
      res = this.write(buffer);

    if (this.charReceived) {
      var cr = this.charReceived;
      var buf = this.charBuffer;
      var enc = this.encoding;
      res += buf.slice(0, cr).toString(enc);
    }

    return res;
  };

  function passThroughWrite(buffer) {
    return buffer.toString(this.encoding);
  }

  function utf16DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 2;
    this.charLength = this.charReceived ? 2 : 0;
  }

  function base64DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 3;
    this.charLength = this.charReceived ? 3 : 0;
  }

  Readable.ReadableState = ReadableState;

  var debug = debuglog('stream');
  inherits$1(Readable, EventEmitter);

  function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') {
      return emitter.prependListener(event, fn);
    } else {
      // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
  }
  function listenerCount$1 (emitter, type) {
    return emitter.listeners(type).length;
  }
  function ReadableState(options, stream) {

    options = options || {};

    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

    // cast to ints.
    this.highWaterMark = ~ ~this.highWaterMark;

    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // when piping, we only care about 'readable' events that happen
    // after read()ing all the bytes and not getting any pushback.
    this.ranOut = false;

    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;

    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;

    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable(options) {

    if (!(this instanceof Readable)) return new Readable(options);

    this._readableState = new ReadableState(options, this);

    // legacy
    this.readable = true;

    if (options && typeof options.read === 'function') this._read = options.read;

    EventEmitter.call(this);
  }

  // Manually shove something into the read() buffer.
  // This returns true if the highWaterMark has not been hit yet,
  // similar to how Writable.write() returns true if you should
  // write() some more.
  Readable.prototype.push = function (chunk, encoding) {
    var state = this._readableState;

    if (!state.objectMode && typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
    }

    return readableAddChunk(this, state, chunk, encoding, false);
  };

  // Unshift should *always* be something directly out of read()
  Readable.prototype.unshift = function (chunk) {
    var state = this._readableState;
    return readableAddChunk(this, state, chunk, '', true);
  };

  Readable.prototype.isPaused = function () {
    return this._readableState.flowing === false;
  };

  function readableAddChunk(stream, state, chunk, encoding, addToFront) {
    var er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (chunk === null) {
      state.reading = false;
      onEofChunk(stream, state);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (state.ended && !addToFront) {
        var e = new Error('stream.push() after EOF');
        stream.emit('error', e);
      } else if (state.endEmitted && addToFront) {
        var _e = new Error('stream.unshift() after end event');
        stream.emit('error', _e);
      } else {
        var skipAdd;
        if (state.decoder && !addToFront && !encoding) {
          chunk = state.decoder.write(chunk);
          skipAdd = !state.objectMode && chunk.length === 0;
        }

        if (!addToFront) state.reading = false;

        // Don't add to the buffer if we've decoded to an empty string chunk and
        // we're not in object mode
        if (!skipAdd) {
          // if we want the data now, just emit it.
          if (state.flowing && state.length === 0 && !state.sync) {
            stream.emit('data', chunk);
            stream.read(0);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

            if (state.needReadable) emitReadable(stream);
          }
        }

        maybeReadMore(stream, state);
      }
    } else if (!addToFront) {
      state.reading = false;
    }

    return needMoreData(state);
  }

  // if it's past the high water mark, we can push in some more.
  // Also, if we have no data yet, we can stand some
  // more bytes.  This is to work around cases where hwm=0,
  // such as the repl.  Also, if the push() triggered a
  // readable event, and the user called read(largeNumber) such that
  // needReadable was set, then we ought to push more, so that another
  // 'readable' event will be triggered.
  function needMoreData(state) {
    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
  }

  // backwards compatibility.
  Readable.prototype.setEncoding = function (enc) {
    this._readableState.decoder = new StringDecoder(enc);
    this._readableState.encoding = enc;
    return this;
  };

  // Don't raise the hwm > 8MB
  var MAX_HWM = 0x800000;
  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      // Get the next highest power of 2 to prevent increasing hwm excessively in
      // tiny amounts
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }
    return n;
  }

  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
      // Only flow one buffer at a time
      if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }
    return state.length;
  }

  // you can override either this method, or the async _read(n) below.
  Readable.prototype.read = function (n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;

    if (n !== 0) state.emittedReadable = false;

    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
      debug('read: emitReadable', state.length, state.ended);
      if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
      return null;
    }

    n = howMuchToRead(n, state);

    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
      if (state.length === 0) endReadable(this);
      return null;
    }

    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.

    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead);

    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug('length less than watermark', doRead);
    }

    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
      doRead = false;
      debug('reading or ended', doRead);
    } else if (doRead) {
      debug('do read');
      state.reading = true;
      state.sync = true;
      // if the length is currently zero, then we *need* a readable event.
      if (state.length === 0) state.needReadable = true;
      // call internal read method
      this._read(state.highWaterMark);
      state.sync = false;
      // If _read pushed data synchronously, then `reading` will be false,
      // and we need to re-evaluate how much data we can return to the user.
      if (!state.reading) n = howMuchToRead(nOrig, state);
    }

    var ret;
    if (n > 0) ret = fromList(n, state);else ret = null;

    if (ret === null) {
      state.needReadable = true;
      n = 0;
    } else {
      state.length -= n;
    }

    if (state.length === 0) {
      // If we have nothing in the buffer, then we want to know
      // as soon as we *do* get something into the buffer.
      if (!state.ended) state.needReadable = true;

      // If we tried to read() past the EOF, then emit end on the next tick.
      if (nOrig !== n && state.ended) endReadable(this);
    }

    if (ret !== null) this.emit('data', ret);

    return ret;
  };

  function chunkInvalid(state, chunk) {
    var er = null;
    if (!isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    return er;
  }

  function onEofChunk(stream, state) {
    if (state.ended) return;
    if (state.decoder) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;

    // emit 'readable' now to make sure it gets picked up.
    emitReadable(stream);
  }

  // Don't emit readable right away in sync mode, because this can trigger
  // another read() call => stack overflow.  This way, it might trigger
  // a nextTick recursion warning, but that's not so bad.
  function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug('emitReadable', state.flowing);
      state.emittedReadable = true;
      if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
    }
  }

  function emitReadable_(stream) {
    debug('emit readable');
    stream.emit('readable');
    flow(stream);
  }

  // at this point, the user has presumably seen the 'readable' event,
  // and called read() to consume some data.  that may have triggered
  // in turn another _read(n) call, in which case reading = true if
  // it's in progress.
  // However, if we're not ended, or reading, and the length < hwm,
  // then go ahead and try to read some more preemptively.
  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      nextTick(maybeReadMore_, stream, state);
    }
  }

  function maybeReadMore_(stream, state) {
    var len = state.length;
    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
      debug('maybeReadMore read 0');
      stream.read(0);
      if (len === state.length)
        // didn't get any data, stop spinning.
        break;else len = state.length;
    }
    state.readingMore = false;
  }

  // abstract method.  to be overridden in specific implementation classes.
  // call cb(er, data) where data is <= n in length.
  // for virtual (non-string, non-buffer) streams, "length" is somewhat
  // arbitrary, and perhaps not very meaningful.
  Readable.prototype._read = function (n) {
    this.emit('error', new Error('not implemented'));
  };

  Readable.prototype.pipe = function (dest, pipeOpts) {
    var src = this;
    var state = this._readableState;

    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
      case 1:
        state.pipes = [state.pipes, dest];
        break;
      default:
        state.pipes.push(dest);
        break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

    var doEnd = (!pipeOpts || pipeOpts.end !== false);

    var endFn = doEnd ? onend : cleanup;
    if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

    dest.on('unpipe', onunpipe);
    function onunpipe(readable) {
      debug('onunpipe');
      if (readable === src) {
        cleanup();
      }
    }

    function onend() {
      debug('onend');
      dest.end();
    }

    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);

    var cleanedUp = false;
    function cleanup() {
      debug('cleanup');
      // cleanup event handlers once the pipe is broken
      dest.removeListener('close', onclose);
      dest.removeListener('finish', onfinish);
      dest.removeListener('drain', ondrain);
      dest.removeListener('error', onerror);
      dest.removeListener('unpipe', onunpipe);
      src.removeListener('end', onend);
      src.removeListener('end', cleanup);
      src.removeListener('data', ondata);

      cleanedUp = true;

      // if the reader is waiting for a drain event from this
      // specific writer, then it would cause it to never start
      // flowing again.
      // So, if this is awaiting a drain, then we just call it now.
      // If we don't know, then assume that we are waiting for one.
      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }

    // If the user pushes more data while we're writing to dest then we'll end up
    // in ondata again. However, we only want to increase awaitDrain once because
    // dest will only emit one 'drain' event for the multiple writes.
    // => Introduce a guard on increasing awaitDrain.
    var increasedAwaitDrain = false;
    src.on('data', ondata);
    function ondata(chunk) {
      debug('ondata');
      increasedAwaitDrain = false;
      var ret = dest.write(chunk);
      if (false === ret && !increasedAwaitDrain) {
        // If the user unpiped during `dest.write()`, it is possible
        // to get stuck in a permanently paused state if that write
        // also returned false.
        // => Check whether `dest` is still a piping destination.
        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
          debug('false write response, pause', src._readableState.awaitDrain);
          src._readableState.awaitDrain++;
          increasedAwaitDrain = true;
        }
        src.pause();
      }
    }

    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
      debug('onerror', er);
      unpipe();
      dest.removeListener('error', onerror);
      if (listenerCount$1(dest, 'error') === 0) dest.emit('error', er);
    }

    // Make sure our error handler is attached before userland ones.
    prependListener(dest, 'error', onerror);

    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
      dest.removeListener('finish', onfinish);
      unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
      debug('onfinish');
      dest.removeListener('close', onclose);
      unpipe();
    }
    dest.once('finish', onfinish);

    function unpipe() {
      debug('unpipe');
      src.unpipe(dest);
    }

    // tell the dest that it's being piped to
    dest.emit('pipe', src);

    // start the flow if it hasn't been started already.
    if (!state.flowing) {
      debug('pipe resume');
      src.resume();
    }

    return dest;
  };

  function pipeOnDrain(src) {
    return function () {
      var state = src._readableState;
      debug('pipeOnDrain', state.awaitDrain);
      if (state.awaitDrain) state.awaitDrain--;
      if (state.awaitDrain === 0 && src.listeners('data').length) {
        state.flowing = true;
        flow(src);
      }
    };
  }

  Readable.prototype.unpipe = function (dest) {
    var state = this._readableState;

    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;

    // just one destination.  most common case.
    if (state.pipesCount === 1) {
      // passed in one, but it's not the right one.
      if (dest && dest !== state.pipes) return this;

      if (!dest) dest = state.pipes;

      // got a match.
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest) dest.emit('unpipe', this);
      return this;
    }

    // slow case. multiple pipe destinations.

    if (!dest) {
      // remove all.
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;

      for (var _i = 0; _i < len; _i++) {
        dests[_i].emit('unpipe', this);
      }return this;
    }

    // try to find the right one.
    var i = indexOf(state.pipes, dest);
    if (i === -1) return this;

    state.pipes.splice(i, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];

    dest.emit('unpipe', this);

    return this;
  };

  // set up data events if they are asked for
  // Ensure readable listeners eventually get something
  Readable.prototype.on = function (ev, fn) {
    var res = EventEmitter.prototype.on.call(this, ev, fn);

    if (ev === 'data') {
      // Start flowing on next tick if stream isn't explicitly paused
      if (this._readableState.flowing !== false) this.resume();
    } else if (ev === 'readable') {
      var state = this._readableState;
      if (!state.endEmitted && !state.readableListening) {
        state.readableListening = state.needReadable = true;
        state.emittedReadable = false;
        if (!state.reading) {
          nextTick(nReadingNextTick, this);
        } else if (state.length) {
          emitReadable(this, state);
        }
      }
    }

    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;

  function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
  }

  // pause() and resume() are remnants of the legacy readable stream API
  // If the user uses them, then switch into old mode.
  Readable.prototype.resume = function () {
    var state = this._readableState;
    if (!state.flowing) {
      debug('resume');
      state.flowing = true;
      resume(this, state);
    }
    return this;
  };

  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      nextTick(resume_, stream, state);
    }
  }

  function resume_(stream, state) {
    if (!state.reading) {
      debug('resume read 0');
      stream.read(0);
    }

    state.resumeScheduled = false;
    state.awaitDrain = 0;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
  }

  Readable.prototype.pause = function () {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (false !== this._readableState.flowing) {
      debug('pause');
      this._readableState.flowing = false;
      this.emit('pause');
    }
    return this;
  };

  function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    while (state.flowing && stream.read() !== null) {}
  }

  // wrap an old-style stream as the async data source.
  // This is *not* part of the readable stream interface.
  // It is an ugly unfortunate mess of history.
  Readable.prototype.wrap = function (stream) {
    var state = this._readableState;
    var paused = false;

    var self = this;
    stream.on('end', function () {
      debug('wrapped end');
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) self.push(chunk);
      }

      self.push(null);
    });

    stream.on('data', function (chunk) {
      debug('wrapped data');
      if (state.decoder) chunk = state.decoder.write(chunk);

      // don't skip over falsy values in objectMode
      if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

      var ret = self.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });

    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for (var i in stream) {
      if (this[i] === undefined && typeof stream[i] === 'function') {
        this[i] = function (method) {
          return function () {
            return stream[method].apply(stream, arguments);
          };
        }(i);
      }
    }

    // proxy certain important events.
    var events = ['error', 'close', 'destroy', 'pause', 'resume'];
    forEach(events, function (ev) {
      stream.on(ev, self.emit.bind(self, ev));
    });

    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    self._read = function (n) {
      debug('wrapped _read', n);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };

    return self;
  };

  // exposed for testing purposes only.
  Readable._fromList = fromList;

  // Pluck off n bytes from an array of buffers.
  // Length is the combined lengths of all the buffers in the list.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;

    var ret;
    if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
      // read it all, truncate the list
      if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
      state.buffer.clear();
    } else {
      // read part of list
      ret = fromListPartial(n, state.buffer, state.decoder);
    }

    return ret;
  }

  // Extracts only enough buffered data to satisfy the amount requested.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromListPartial(n, list, hasStrings) {
    var ret;
    if (n < list.head.data.length) {
      // slice is the same for buffers and strings
      ret = list.head.data.slice(0, n);
      list.head.data = list.head.data.slice(n);
    } else if (n === list.head.data.length) {
      // first chunk is a perfect match
      ret = list.shift();
    } else {
      // result spans more than one buffer
      ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
    }
    return ret;
  }

  // Copies a specified amount of characters from the list of buffered data
  // chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBufferString(n, list) {
    var p = list.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;
    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length) ret += str;else ret += str.slice(0, n);
      n -= nb;
      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = str.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }

  // Copies a specified amount of bytes from the list of buffered data chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBuffer(n, list) {
    var ret = Buffer.allocUnsafe(n);
    var p = list.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;
    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;
      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = buf.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }

  function endReadable(stream) {
    var state = stream._readableState;

    // If we get here before consuming all the bytes, then that is a
    // bug in node.  Should never happen.
    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

    if (!state.endEmitted) {
      state.ended = true;
      nextTick(endReadableNT, state, stream);
    }
  }

  function endReadableNT(state, stream) {
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream.readable = false;
      stream.emit('end');
    }
  }

  function forEach(xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }

  function indexOf(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) return i;
    }
    return -1;
  }

  // A bit simpler than readable streams.
  Writable.WritableState = WritableState;
  inherits$1(Writable, EventEmitter);

  function nop() {}

  function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
  }

  function WritableState(options, stream) {
    Object.defineProperty(this, 'buffer', {
      get: deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
    options = options || {};

    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

    // cast to ints.
    this.highWaterMark = ~ ~this.highWaterMark;

    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;

    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;

    // a flag to see when we're in the middle of a write.
    this.writing = false;

    // when true all writes will be buffered until .uncork() call
    this.corked = 0;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;

    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function (er) {
      onwrite(stream, er);
    };

    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;

    // the amount that is being written when _write is called.
    this.writelen = 0;

    this.bufferedRequest = null;
    this.lastBufferedRequest = null;

    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;

    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;

    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;

    // count buffered requests
    this.bufferedRequestCount = 0;

    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
  }

  WritableState.prototype.getBuffer = function writableStateGetBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  function Writable(options) {

    // Writable ctor is applied to Duplexes, though they're not
    // instanceof Writable, they're instanceof Readable.
    if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

    this._writableState = new WritableState(options, this);

    // legacy.
    this.writable = true;

    if (options) {
      if (typeof options.write === 'function') this._write = options.write;

      if (typeof options.writev === 'function') this._writev = options.writev;
    }

    EventEmitter.call(this);
  }

  // Otherwise people can pipe Writable streams, which is just wrong.
  Writable.prototype.pipe = function () {
    this.emit('error', new Error('Cannot pipe, not readable'));
  };

  function writeAfterEnd(stream, cb) {
    var er = new Error('write after end');
    // TODO: defer error events consistently everywhere, not just the cb
    stream.emit('error', er);
    nextTick(cb, er);
  }

  // If we get something that is not a buffer, string, null, or undefined,
  // and we're not in objectMode, then that's an error.
  // Otherwise stream chunks are all considered to be of length=1, and the
  // watermarks determine how many objects to keep in the buffer, rather than
  // how many bytes or characters.
  function validChunk(stream, state, chunk, cb) {
    var valid = true;
    var er = false;
    // Always throw error if a null is written
    // if we are not in object mode then throw
    // if it is not a buffer, string, or undefined.
    if (chunk === null) {
      er = new TypeError('May not write null values to stream');
    } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    if (er) {
      stream.emit('error', er);
      nextTick(cb, er);
      valid = false;
    }
    return valid;
  }

  Writable.prototype.write = function (chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;

    if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

    if (typeof cb !== 'function') cb = nop;

    if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, chunk, encoding, cb);
    }

    return ret;
  };

  Writable.prototype.cork = function () {
    var state = this._writableState;

    state.corked++;
  };

  Writable.prototype.uncork = function () {
    var state = this._writableState;

    if (state.corked) {
      state.corked--;

      if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
  };

  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };

  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
      chunk = Buffer.from(chunk, encoding);
    }
    return chunk;
  }

  // if we're already writing something, then just put this
  // in the queue, and wait our turn.  Otherwise, call _write
  // If we return false, then we need a drain event, so set that flag.
  function writeOrBuffer(stream, state, chunk, encoding, cb) {
    chunk = decodeChunk(state, chunk, encoding);

    if (Buffer.isBuffer(chunk)) encoding = 'buffer';
    var len = state.objectMode ? 1 : chunk.length;

    state.length += len;

    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;

    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }
      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state, false, len, chunk, encoding, cb);
    }

    return ret;
  }

  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }

  function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) nextTick(cb, er);else cb(er);

    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  }

  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }

  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;

    onwriteStateUpdate(state);

    if (er) onwriteError(stream, state, sync, er, cb);else {
      // Check if we're actually ready to finish, but don't emit yet
      var finished = needFinish(state);

      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream, state);
      }

      if (sync) {
        /*<replacement>*/
          nextTick(afterWrite, stream, state, finished, cb);
        /*</replacement>*/
      } else {
          afterWrite(stream, state, finished, cb);
        }
    }
  }

  function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  }

  // Must force callback to be called on nextTick, so that we don't
  // emit 'drain' before the write() consumer gets the 'false' return
  // value, and has a chance to attach a 'drain' listener.
  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit('drain');
    }
  }

  // if there's something in the buffer waiting, then process it
  function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;

    if (stream._writev && entry && entry.next) {
      // Fast case, write everything using _writev()
      var l = state.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;

      var count = 0;
      while (entry) {
        buffer[count] = entry;
        entry = entry.next;
        count += 1;
      }

      doWrite(stream, state, true, state.length, buffer, '', holder.finish);

      // doWrite is almost always async, defer these to save a bit of time
      // as the hot path ends with doWrite
      state.pendingcb++;
      state.lastBufferedRequest = null;
      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }
    } else {
      // Slow case, write chunks one-by-one
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;

        doWrite(stream, state, false, len, chunk, encoding, cb);
        entry = entry.next;
        // if we didn't call the onwrite immediately, then
        // it means that we need to wait until it does.
        // also, that means that the chunk and cb are currently
        // being processed, so move the buffer counter past them.
        if (state.writing) {
          break;
        }
      }

      if (entry === null) state.lastBufferedRequest = null;
    }

    state.bufferedRequestCount = 0;
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }

  Writable.prototype._write = function (chunk, encoding, cb) {
    cb(new Error('not implemented'));
  };

  Writable.prototype._writev = null;

  Writable.prototype.end = function (chunk, encoding, cb) {
    var state = this._writableState;

    if (typeof chunk === 'function') {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

    // .end() fully uncorks
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    }

    // ignore unnecessary end() calls.
    if (!state.ending && !state.finished) endWritable(this, state, cb);
  };

  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }

  function prefinish(stream, state) {
    if (!state.prefinished) {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }

  function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
      if (state.pendingcb === 0) {
        prefinish(stream, state);
        state.finished = true;
        stream.emit('finish');
      } else {
        prefinish(stream, state);
      }
    }
    return need;
  }

  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
      if (state.finished) nextTick(cb);else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
  }

  // It seems a linked list but it is not
  // there will be only 2 of these for each stream
  function CorkedRequest(state) {
    var _this = this;

    this.next = null;
    this.entry = null;

    this.finish = function (err) {
      var entry = _this.entry;
      _this.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      if (state.corkedRequestsFree) {
        state.corkedRequestsFree.next = _this;
      } else {
        state.corkedRequestsFree = _this;
      }
    };
  }

  inherits$1(Duplex, Readable);

  var keys = Object.keys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
  function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);

    Readable.call(this, options);
    Writable.call(this, options);

    if (options && options.readable === false) this.readable = false;

    if (options && options.writable === false) this.writable = false;

    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

    this.once('end', onend);
  }

  // the no-half-open enforcer
  function onend() {
    // if we allow half-open state, or if the writable side ended,
    // then we're ok.
    if (this.allowHalfOpen || this._writableState.ended) return;

    // no more data can be written.
    // But allow more writes to happen in this tick.
    nextTick(onEndNT, this);
  }

  function onEndNT(self) {
    self.end();
  }

  // a transform stream is a readable/writable stream where you do
  inherits$1(Transform, Duplex);

  function TransformState(stream) {
    this.afterTransform = function (er, data) {
      return afterTransform(stream, er, data);
    };

    this.needTransform = false;
    this.transforming = false;
    this.writecb = null;
    this.writechunk = null;
    this.writeencoding = null;
  }

  function afterTransform(stream, er, data) {
    var ts = stream._transformState;
    ts.transforming = false;

    var cb = ts.writecb;

    if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

    ts.writechunk = null;
    ts.writecb = null;

    if (data !== null && data !== undefined) stream.push(data);

    cb(er);

    var rs = stream._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      stream._read(rs.highWaterMark);
    }
  }
  function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);

    Duplex.call(this, options);

    this._transformState = new TransformState(this);

    // when the writable side finishes, then flush out anything remaining.
    var stream = this;

    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;

    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;

    if (options) {
      if (typeof options.transform === 'function') this._transform = options.transform;

      if (typeof options.flush === 'function') this._flush = options.flush;
    }

    this.once('prefinish', function () {
      if (typeof this._flush === 'function') this._flush(function (er) {
        done(stream, er);
      });else done(stream);
    });
  }

  Transform.prototype.push = function (chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  };

  // This is the part where you do stuff!
  // override this function in implementation classes.
  // 'chunk' is an input chunk.
  //
  // Call `push(newChunk)` to pass along transformed output
  // to the readable side.  You may call 'push' zero or more times.
  //
  // Call `cb(err)` when you are done with this chunk.  If you pass
  // an error, then that'll put the hurt on the whole operation.  If you
  // never call cb(), then you'll never get another chunk.
  Transform.prototype._transform = function (chunk, encoding, cb) {
    throw new Error('Not implemented');
  };

  Transform.prototype._write = function (chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
  };

  // Doesn't matter what the args are here.
  // _transform does all the work.
  // That we got here means that the readable side wants more data.
  Transform.prototype._read = function (n) {
    var ts = this._transformState;

    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      // mark that we need a transform, so that any data that comes in
      // will get processed, now that we've asked for it.
      ts.needTransform = true;
    }
  };

  function done(stream, er) {
    if (er) return stream.emit('error', er);

    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    var ws = stream._writableState;
    var ts = stream._transformState;

    if (ws.length) throw new Error('Calling transform done when ws.length != 0');

    if (ts.transforming) throw new Error('Calling transform done when still transforming');

    return stream.push(null);
  }

  inherits$1(PassThrough, Transform);
  function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);

    Transform.call(this, options);
  }

  PassThrough.prototype._transform = function (chunk, encoding, cb) {
    cb(null, chunk);
  };

  inherits$1(Stream, EventEmitter);
  Stream.Readable = Readable;
  Stream.Writable = Writable;
  Stream.Duplex = Duplex;
  Stream.Transform = Transform;
  Stream.PassThrough = PassThrough;

  // Backwards-compat with node 0.4.x
  Stream.Stream = Stream;

  // old-style streams.  Note that the pipe method (the only relevant
  // part of this class) is overridden in the Readable class.

  function Stream() {
    EventEmitter.call(this);
  }

  Stream.prototype.pipe = function(dest, options) {
    var source = this;

    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }

    source.on('data', ondata);

    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }

    dest.on('drain', ondrain);

    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on('end', onend);
      source.on('close', onclose);
    }

    var didOnEnd = false;
    function onend() {
      if (didOnEnd) return;
      didOnEnd = true;

      dest.end();
    }


    function onclose() {
      if (didOnEnd) return;
      didOnEnd = true;

      if (typeof dest.destroy === 'function') dest.destroy();
    }

    // don't leave dangling pipes when there are errors.
    function onerror(er) {
      cleanup();
      if (EventEmitter.listenerCount(this, 'error') === 0) {
        throw er; // Unhandled stream error in pipe.
      }
    }

    source.on('error', onerror);
    dest.on('error', onerror);

    // remove all the event listeners that were added.
    function cleanup() {
      source.removeListener('data', ondata);
      dest.removeListener('drain', ondrain);

      source.removeListener('end', onend);
      source.removeListener('close', onclose);

      source.removeListener('error', onerror);
      dest.removeListener('error', onerror);

      source.removeListener('end', cleanup);
      source.removeListener('close', cleanup);

      dest.removeListener('close', cleanup);
    }

    source.on('end', cleanup);
    source.on('close', cleanup);

    dest.on('close', cleanup);

    dest.emit('pipe', source);

    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
  };

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  /*
  The MIT License (MIT)

  Copyright (c) 2016 CoderPuppy

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

  */
  var _endianness;
  function endianness() {
    if (typeof _endianness === 'undefined') {
      var a = new ArrayBuffer(2);
      var b = new Uint8Array(a);
      var c = new Uint16Array(a);
      b[0] = 1;
      b[1] = 2;
      if (c[0] === 258) {
        _endianness = 'BE';
      } else if (c[0] === 513){
        _endianness = 'LE';
      } else {
        throw new Error('unable to figure out endianess');
      }
    }
    return _endianness;
  }

  function hostname() {
    if (typeof global$1.location !== 'undefined') {
      return global$1.location.hostname
    } else return '';
  }

  function loadavg() {
    return [];
  }

  function uptime$1() {
    return 0;
  }

  function freemem() {
    return Number.MAX_VALUE;
  }

  function totalmem() {
    return Number.MAX_VALUE;
  }

  function cpus() {
    return [];
  }

  function type() {
    return 'Browser';
  }

  function release$1 () {
    if (typeof global$1.navigator !== 'undefined') {
      return global$1.navigator.appVersion;
    }
    return '';
  }

  function networkInterfaces(){}
  function getNetworkInterfaces(){}

  function tmpDir() {
    return '/tmp';
  }
  var tmpdir = tmpDir;

  var EOL = '\n';
  var os = {
    EOL: EOL,
    tmpdir: tmpdir,
    tmpDir: tmpDir,
    networkInterfaces:networkInterfaces,
    getNetworkInterfaces: getNetworkInterfaces,
    release: release$1,
    type: type,
    cpus: cpus,
    totalmem: totalmem,
    freemem: freemem,
    uptime: uptime$1,
    loadavg: loadavg,
    hostname: hostname,
    endianness: endianness,
  };

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  /**
   * lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0;

  /** `Object#toString` result references. */
  var funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      symbolTag = '[object Symbol]';

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `value` is a host object in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
   */
  function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }

  /** Used for built-in method references. */
  var arrayProto = Array.prototype,
      funcProto = Function.prototype,
      objectProto = Object.prototype;

  /** Used to detect overreaching core-js shims. */
  var coreJsData = root['__core-js_shared__'];

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$1 = objectProto.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString$1 = objectProto.toString;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString.call(hasOwnProperty$1).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /** Built-in value references. */
  var Symbol$1 = root.Symbol,
      splice = arrayProto.splice;

  /* Built-in method references that are verified to be native. */
  var Map = getNative(root, 'Map'),
      nativeCreate = getNative(Object, 'create');

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
        length = entries ? entries.length : 0;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty$1.call(data, key) ? data[key] : undefined;
  }

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty$1.call(data, key);
  }

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    return this;
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
  }

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    return true;
  }

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.__data__ = {
      'hash': new Hash,
      'map': new (Map || ListCache),
      'string': new Hash
    };
  }

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    return getMapData(this, key)['delete'](key);
  }

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet(object, path) {
    path = isKey(path, object) ? [path] : castPath(path);

    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }
    return (index && index == length) ? object : undefined;
  }

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject$1(value) || isMasked(value)) {
      return false;
    }
    var pattern = (isFunction$1(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
  }

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath(value) {
    return isArray$2(value) ? value : stringToPath(value);
  }

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey(value, object) {
    if (isArray$2(value)) {
      return false;
    }
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' ||
        value == null || isSymbol(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
      (object != null && value in Object(object));
  }

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath = memoize(function(string) {
    string = toString$1(string);

    var result = [];
    if (reLeadingDot.test(string)) {
      result.push('');
    }
    string.replace(rePropName, function(match, number, quote, string) {
      result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
    });
    return result;
  });

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
  }

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to process.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize(func, resolver) {
    if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result);
      return result;
    };
    memoized.cache = new (memoize.Cache || MapCache);
    return memoized;
  }

  // Assign cache to `_.memoize`.
  memoize.Cache = MapCache;

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray$2 = Array.isArray;

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction$1(value) {
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 8-9 which returns 'object' for typed array and other constructors.
    var tag = isObject$1(value) ? objectToString$1.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject$1(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return typeof value == 'symbol' ||
      (isObjectLike(value) && objectToString$1.call(value) == symbolTag);
  }

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString$1(value) {
    return value == null ? '' : baseToString(value);
  }

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  var lodash_get = get;

  function getProp(obj, path, defaultValue) {
    return obj[path] === undefined || obj[path] === null ? defaultValue : obj[path];
  }

  function setProp(obj, path, value) {
    var pathArray = Array.isArray(path) ? path : path.split('.');
    var key = pathArray[0];
    var newValue = pathArray.length > 1 ? setProp(obj[key] || {}, pathArray.slice(1), value) : value;
    return Object.assign({}, obj, _defineProperty({}, key, newValue));
  }

  function flattenReducer(acc, arr) {
    try {
      // This is faster but susceptible to `RangeError: Maximum call stack size exceeded`
      acc.push.apply(acc, _toConsumableArray(arr));
      return acc;
    } catch (err) {
      // Fallback to a slower but safer option
      return acc.concat(arr);
    }
  }

  function fastJoin(arr, separator) {
    var isFirst = true;
    return arr.reduce(function (acc, elem) {
      if (elem === null || elem === undefined) {
        elem = '';
      }

      if (isFirst) {
        isFirst = false;
        return "".concat(elem);
      }

      return "".concat(acc).concat(separator).concat(elem);
    }, '');
  }

  var utils = {
    getProp: getProp,
    setProp: setProp,
    fastJoin: fastJoin,
    flattenReducer: flattenReducer
  };

  var getProp$1 = utils.getProp,
      setProp$1 = utils.setProp,
      fastJoin$1 = utils.fastJoin,
      flattenReducer$1 = utils.flattenReducer;

  var JSON2CSVBase =
  /*#__PURE__*/
  function () {
    function JSON2CSVBase(opts) {
      _classCallCheck(this, JSON2CSVBase);

      this.opts = this.preprocessOpts(opts);
      this.preprocessRow = this.memoizePreprocessRow();
    }
    /**
     * Check passing opts and set defaults.
     *
     * @param {Json2CsvOptions} opts Options object containing fields,
     * delimiter, default value, quote mark, header, etc.
     */


    _createClass(JSON2CSVBase, [{
      key: "preprocessOpts",
      value: function preprocessOpts(opts) {
        var processedOpts = Object.assign({}, opts);
        processedOpts.unwind = !Array.isArray(processedOpts.unwind) ? processedOpts.unwind ? [processedOpts.unwind] : [] : processedOpts.unwind;
        processedOpts.delimiter = processedOpts.delimiter || ',';
        processedOpts.flattenSeparator = processedOpts.flattenSeparator || '.';
        processedOpts.eol = processedOpts.eol || os.EOL;
        processedOpts.quote = typeof processedOpts.quote === 'string' ? opts.quote : '"';
        processedOpts.doubleQuote = typeof processedOpts.doubleQuote === 'string' ? processedOpts.doubleQuote : processedOpts.quote + processedOpts.quote;
        processedOpts.header = processedOpts.header !== false;
        processedOpts.includeEmptyRows = processedOpts.includeEmptyRows || false;
        processedOpts.withBOM = processedOpts.withBOM || false;
        return processedOpts;
      }
      /**
       * Check and normalize the fields configuration.
       *
       * @param {(string|object)[]} fields Fields configuration provided by the user
       * or inferred from the data
       * @returns {object[]} preprocessed FieldsInfo array
       */

    }, {
      key: "preprocessFieldsInfo",
      value: function preprocessFieldsInfo(fields) {
        var _this = this;

        return fields.map(function (fieldInfo) {
          if (typeof fieldInfo === 'string') {
            return {
              label: fieldInfo,
              value: fieldInfo.includes('.') || fieldInfo.includes('[') ? function (row) {
                return lodash_get(row, fieldInfo, _this.opts.defaultValue);
              } : function (row) {
                return getProp$1(row, fieldInfo, _this.opts.defaultValue);
              },
              stringify: true
            };
          }

          if (_typeof(fieldInfo) === 'object') {
            var defaultValue = 'default' in fieldInfo ? fieldInfo.default : _this.opts.defaultValue;

            if (typeof fieldInfo.value === 'string') {
              return {
                label: fieldInfo.label || fieldInfo.value,
                value: fieldInfo.value.includes('.') || fieldInfo.value.includes('[') ? function (row) {
                  return lodash_get(row, fieldInfo.value, defaultValue);
                } : function (row) {
                  return getProp$1(row, fieldInfo.value, defaultValue);
                },
                stringify: fieldInfo.stringify !== undefined ? fieldInfo.stringify : true
              };
            }

            if (typeof fieldInfo.value === 'function') {
              var label = fieldInfo.label || fieldInfo.value.name || '';
              var field = {
                label: label,
                default: defaultValue
              };
              return {
                label: label,
                value: function value(row) {
                  var value = fieldInfo.value(row, field);
                  return value === null || value === undefined ? defaultValue : value;
                },
                stringify: fieldInfo.stringify !== undefined ? fieldInfo.stringify : true
              };
            }
          }

          throw new Error('Invalid field info option. ' + JSON.stringify(fieldInfo));
        });
      }
      /**
       * Create the title row with all the provided fields as column headings
       *
       * @returns {String} titles as a string
       */

    }, {
      key: "getHeader",
      value: function getHeader() {
        var _this2 = this;

        return fastJoin$1(this.opts.fields.map(function (fieldInfo) {
          return _this2.processValue(fieldInfo.label, true);
        }), this.opts.delimiter);
      }
    }, {
      key: "memoizePreprocessRow",
      value: function memoizePreprocessRow() {
        if (this.opts.unwind && this.opts.unwind.length) {
          if (this.opts.flatten) {
            return function (row) {
              var _this3 = this;

              return this.unwindData(row, this.opts.unwind).map(function (row) {
                return _this3.flatten(row, _this3.opts.flattenSeparator);
              });
            };
          }

          return function (row) {
            return this.unwindData(row, this.opts.unwind);
          };
        }

        if (this.opts.flatten) {
          return function (row) {
            return [this.flatten(row, this.opts.flattenSeparator)];
          };
        }

        return function (row) {
          return [row];
        };
      }
      /**
       * Preprocess each object according to the give opts (unwind, flatten, etc.).
       * The actual body of the function is dynamically set on the constructor by the
       *  `memoizePreprocessRow` method after parsing the options.
       *
       * @param {Object} row JSON object to be converted in a CSV row
       */

    }, {
      key: "preprocessRow",
      value: function preprocessRow() {}
      /**
       * Create the content of a specific CSV row
       *
       * @param {Object} row JSON object to be converted in a CSV row
       * @returns {String} CSV string (row)
       */

    }, {
      key: "processRow",
      value: function processRow(row) {
        var _this4 = this;

        if (!row) {
          return undefined;
        }

        var processedRow = this.opts.fields.map(function (fieldInfo) {
          return _this4.processCell(row, fieldInfo);
        });

        if (!this.opts.includeEmptyRows && processedRow.every(function (field) {
          return field === undefined;
        })) {
          return undefined;
        }

        return fastJoin$1(processedRow, this.opts.delimiter);
      }
      /**
       * Create the content of a specfic CSV row cell
       *
       * @param {Object} row JSON object representing the  CSV row that the cell belongs to
       * @param {FieldInfo} fieldInfo Details of the field to process to be a CSV cell
       * @returns {String} CSV string (cell)
       */

    }, {
      key: "processCell",
      value: function processCell(row, fieldInfo) {
        return this.processValue(fieldInfo.value(row), fieldInfo.stringify);
      }
      /**
       * Create the content of a specfic CSV row cell
       *
       * @param {Any} value Value to be included in a CSV cell
       * @param {Boolean} stringify Details of the field to process to be a CSV cell
       * @returns {String} Value stringified and processed
       */

    }, {
      key: "processValue",
      value: function processValue(value, stringify) {
        if (value === null || value === undefined) {
          return undefined;
        }

        var valueType = _typeof(value);

        if (valueType !== 'boolean' && valueType !== 'number' && valueType !== 'string') {
          value = JSON.stringify(value);

          if (value === undefined) {
            return undefined;
          }

          if (value[0] === '"') {
            value = value.replace(/^"(.+)"$/, '$1');
          }
        }

        if (typeof value === 'string') {
          if (value.includes(this.opts.quote)) {
            value = value.replace(new RegExp(this.opts.quote, 'g'), this.opts.doubleQuote);
          } // This should probably be remove together with the whole strignify option


          if (stringify) {
            value = "".concat(this.opts.quote).concat(value).concat(this.opts.quote);
          } else {
            value = value.replace(new RegExp("^".concat(this.opts.doubleQuote)), this.opts.quote).replace(new RegExp("".concat(this.opts.doubleQuote, "$")), this.opts.quote);
          }

          if (this.opts.excelStrings) {
            value = "\"=\"".concat(value, "\"\"");
          }
        }

        return value;
      }
      /**
       * Performs the flattening of a data row recursively
       *
       * @param {Object} dataRow Original JSON object
       * @param {String} separator Separator to be used as the flattened field name
       * @returns {Object} Flattened object
       */

    }, {
      key: "flatten",
      value: function flatten(dataRow, separator) {
        function step(obj, flatDataRow, currentPath) {
          Object.keys(obj).forEach(function (key) {
            var value = obj[key];
            var newPath = currentPath ? "".concat(currentPath).concat(separator).concat(key) : key;

            if (_typeof(value) !== 'object' || value === null || Array.isArray(value) || Object.prototype.toString.call(value.toJSON) === '[object Function]' || !Object.keys(value).length) {
              flatDataRow[newPath] = value;
              return;
            }

            step(value, flatDataRow, newPath);
          });
          return flatDataRow;
        }

        return step(dataRow, {});
      }
      /**
       * Performs the unwind recursively in specified sequence
       *
       * @param {Object} dataRow Original JSON object
       * @param {String[]} unwindPaths The paths as strings to be used to deconstruct the array
       * @returns {Array} Array of objects containing all rows after unwind of chosen paths
      */

    }, {
      key: "unwindData",
      value: function unwindData(dataRow, unwindPaths) {
        var _this5 = this;

        var unwind = function unwind(rows, unwindPath) {
          return rows.map(function (row) {
            var unwindArray = lodash_get(row, unwindPath);

            if (!Array.isArray(unwindArray)) {
              return row;
            }

            if (!unwindArray.length) {
              return setProp$1(row, unwindPath, undefined);
            }

            return unwindArray.map(function (unwindRow, index) {
              var clonedRow = _this5.opts.unwindBlank && index > 0 ? {} : row;
              return setProp$1(clonedRow, unwindPath, unwindRow);
            });
          }).reduce(flattenReducer$1, []);
        };

        return unwindPaths.reduce(unwind, [dataRow]);
      }
    }]);

    return JSON2CSVBase;
  }();

  var JSON2CSVBase_1 = JSON2CSVBase;

  var fastJoin$2 = utils.fastJoin,
      flattenReducer$2 = utils.flattenReducer;

  var JSON2CSVParser =
  /*#__PURE__*/
  function (_JSON2CSVBase) {
    _inherits(JSON2CSVParser, _JSON2CSVBase);

    function JSON2CSVParser(opts) {
      var _this;

      _classCallCheck(this, JSON2CSVParser);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(JSON2CSVParser).call(this, opts));

      if (_this.opts.fields) {
        _this.opts.fields = _this.preprocessFieldsInfo(_this.opts.fields);
      }

      return _this;
    }
    /**
     * Main function that converts json to csv.
     *
     * @param {Array|Object} data Array of JSON objects to be converted to CSV
     * @returns {String} The CSV formated data as a string
     */


    _createClass(JSON2CSVParser, [{
      key: "parse",
      value: function parse(data) {
        var processedData = this.preprocessData(data);

        if (!this.opts.fields) {
          this.opts.fields = processedData.reduce(function (fields, item) {
            Object.keys(item).forEach(function (field) {
              if (!fields.includes(field)) {
                fields.push(field);
              }
            });
            return fields;
          }, []);
          this.opts.fields = this.preprocessFieldsInfo(this.opts.fields);
        }

        var header = this.opts.header ? this.getHeader() : '';
        var rows = this.processData(processedData);
        var csv = (this.opts.withBOM ? "\uFEFF" : '') + header + (header && rows ? this.opts.eol : '') + rows;
        return csv;
      }
      /**
       * Preprocess the data according to the give opts (unwind, flatten, etc.)
        and calculate the fields and field names if they are not provided.
       *
       * @param {Array|Object} data Array or object to be converted to CSV
       */

    }, {
      key: "preprocessData",
      value: function preprocessData(data) {
        var _this2 = this;

        var processedData = Array.isArray(data) ? data : [data];

        if (!this.opts.fields && (processedData.length === 0 || _typeof(processedData[0]) !== 'object')) {
          throw new Error('Data should not be empty or the "fields" option should be included');
        }

        if ((!this.opts.unwind || !this.opts.unwind.length) && !this.opts.flatten) {
          return processedData;
        }

        return processedData.map(function (row) {
          return _this2.preprocessRow(row);
        }).reduce(flattenReducer$2, []);
      }
      /**
       * Create the content row by row below the header
       *
       * @param {Array} data Array of JSON objects to be converted to CSV
       * @returns {String} CSV string (body)
       */

    }, {
      key: "processData",
      value: function processData(data) {
        var _this3 = this;

        return fastJoin$2(data.map(function (row) {
          return _this3.processRow(row);
        }).filter(function (row) {
          return row;
        }), // Filter empty rows
        this.opts.eol);
      }
    }]);

    return JSON2CSVParser;
  }(JSON2CSVBase_1);

  var JSON2CSVParser_1 = JSON2CSVParser;

  /*global Buffer*/
  // Named constants with unique integer values
  var C = {};
  // Tokens
  var LEFT_BRACE    = C.LEFT_BRACE    = 0x1;
  var RIGHT_BRACE   = C.RIGHT_BRACE   = 0x2;
  var LEFT_BRACKET  = C.LEFT_BRACKET  = 0x3;
  var RIGHT_BRACKET = C.RIGHT_BRACKET = 0x4;
  var COLON         = C.COLON         = 0x5;
  var COMMA         = C.COMMA         = 0x6;
  var TRUE          = C.TRUE          = 0x7;
  var FALSE         = C.FALSE         = 0x8;
  var NULL          = C.NULL          = 0x9;
  var STRING        = C.STRING        = 0xa;
  var NUMBER        = C.NUMBER        = 0xb;
  // Tokenizer States
  var START   = C.START   = 0x11;
  var STOP    = C.STOP    = 0x12;
  var TRUE1   = C.TRUE1   = 0x21;
  var TRUE2   = C.TRUE2   = 0x22;
  var TRUE3   = C.TRUE3   = 0x23;
  var FALSE1  = C.FALSE1  = 0x31;
  var FALSE2  = C.FALSE2  = 0x32;
  var FALSE3  = C.FALSE3  = 0x33;
  var FALSE4  = C.FALSE4  = 0x34;
  var NULL1   = C.NULL1   = 0x41;
  var NULL2   = C.NULL2   = 0x42;
  var NULL3   = C.NULL3   = 0x43;
  var NUMBER1 = C.NUMBER1 = 0x51;
  var NUMBER3 = C.NUMBER3 = 0x53;
  var STRING1 = C.STRING1 = 0x61;
  var STRING2 = C.STRING2 = 0x62;
  var STRING3 = C.STRING3 = 0x63;
  var STRING4 = C.STRING4 = 0x64;
  var STRING5 = C.STRING5 = 0x65;
  var STRING6 = C.STRING6 = 0x66;
  // Parser States
  var VALUE   = C.VALUE   = 0x71;
  var KEY     = C.KEY     = 0x72;
  // Parser Modes
  var OBJECT  = C.OBJECT  = 0x81;
  var ARRAY   = C.ARRAY   = 0x82;
  // Character constants
  var BACK_SLASH =      "\\".charCodeAt(0);
  var FORWARD_SLASH =   "\/".charCodeAt(0);
  var BACKSPACE =       "\b".charCodeAt(0);
  var FORM_FEED =       "\f".charCodeAt(0);
  var NEWLINE =         "\n".charCodeAt(0);
  var CARRIAGE_RETURN = "\r".charCodeAt(0);
  var TAB =             "\t".charCodeAt(0);

  var STRING_BUFFER_SIZE = 64 * 1024;

  function Parser() {
    this.tState = START;
    this.value = undefined;

    this.string = undefined; // string data
    this.stringBuffer = Buffer.alloc ? Buffer.alloc(STRING_BUFFER_SIZE) : new Buffer(STRING_BUFFER_SIZE);
    this.stringBufferOffset = 0;
    this.unicode = undefined; // unicode escapes
    this.highSurrogate = undefined;

    this.key = undefined;
    this.mode = undefined;
    this.stack = [];
    this.state = VALUE;
    this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary
    this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read
    this.temp_buffs = { "2": new Buffer(2), "3": new Buffer(3), "4": new Buffer(4) }; // for rebuilding chars split before boundary is reached

    // Stream offset
    this.offset = -1;
  }

  // Slow code to string converter (only used when throwing syntax errors)
  Parser.toknam = function (code) {
    var keys = Object.keys(C);
    for (var i = 0, l = keys.length; i < l; i++) {
      var key = keys[i];
      if (C[key] === code) { return key; }
    }
    return code && ("0x" + code.toString(16));
  };

  var proto = Parser.prototype;
  proto.onError = function (err) { throw err; };
  proto.charError = function (buffer, i) {
    this.tState = STOP;
    this.onError(new Error("Unexpected " + JSON.stringify(String.fromCharCode(buffer[i])) + " at position " + i + " in state " + Parser.toknam(this.tState)));
  };
  proto.appendStringChar = function (char) {
    if (this.stringBufferOffset >= STRING_BUFFER_SIZE) {
      this.string += this.stringBuffer.toString('utf8');
      this.stringBufferOffset = 0;
    }

    this.stringBuffer[this.stringBufferOffset++] = char;
  };
  proto.appendStringBuf = function (buf, start, end) {
    var size = buf.length;
    if (typeof start === 'number') {
      if (typeof end === 'number') {
        if (end < 0) {
          // adding a negative end decreeses the size
          size = buf.length - start + end;
        } else {
          size = end - start;
        }
      } else {
        size = buf.length - start;
      }
    }

    if (size < 0) {
      size = 0;
    }

    if (this.stringBufferOffset + size > STRING_BUFFER_SIZE) {
      this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);
      this.stringBufferOffset = 0;
    }

    buf.copy(this.stringBuffer, this.stringBufferOffset, start, end);
    this.stringBufferOffset += size;
  };
  proto.write = function (buffer) {
    if (typeof buffer === "string") buffer = new Buffer(buffer);
    var n;
    for (var i = 0, l = buffer.length; i < l; i++) {
      if (this.tState === START){
        n = buffer[i];
        this.offset++;
        if(n === 0x7b){ this.onToken(LEFT_BRACE, "{"); // {
        }else if(n === 0x7d){ this.onToken(RIGHT_BRACE, "}"); // }
        }else if(n === 0x5b){ this.onToken(LEFT_BRACKET, "["); // [
        }else if(n === 0x5d){ this.onToken(RIGHT_BRACKET, "]"); // ]
        }else if(n === 0x3a){ this.onToken(COLON, ":");  // :
        }else if(n === 0x2c){ this.onToken(COMMA, ","); // ,
        }else if(n === 0x74){ this.tState = TRUE1;  // t
        }else if(n === 0x66){ this.tState = FALSE1;  // f
        }else if(n === 0x6e){ this.tState = NULL1; // n
        }else if(n === 0x22){ // "
          this.string = "";
          this.stringBufferOffset = 0;
          this.tState = STRING1;
        }else if(n === 0x2d){ this.string = "-"; this.tState = NUMBER1; // -
        }else{
          if (n >= 0x30 && n < 0x40) { // 1-9
            this.string = String.fromCharCode(n); this.tState = NUMBER3;
          } else if (n === 0x20 || n === 0x09 || n === 0x0a || n === 0x0d) ; else {
            return this.charError(buffer, i);
          }
        }
      }else if (this.tState === STRING1){ // After open quote
        n = buffer[i]; // get current byte from buffer
        // check for carry over of a multi byte char split between data chunks
        // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration
        if (this.bytes_remaining > 0) {
          for (var j = 0; j < this.bytes_remaining; j++) {
            this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = buffer[j];
          }

          this.appendStringBuf(this.temp_buffs[this.bytes_in_sequence]);
          this.bytes_in_sequence = this.bytes_remaining = 0;
          i = i + j - 1;
        } else if (this.bytes_remaining === 0 && n >= 128) { // else if no remainder bytes carried over, parse multi byte (>=128) chars one at a time
          if (n <= 193 || n > 244) {
            return this.onError(new Error("Invalid UTF-8 character at position " + i + " in state " + Parser.toknam(this.tState)));
          }
          if ((n >= 194) && (n <= 223)) this.bytes_in_sequence = 2;
          if ((n >= 224) && (n <= 239)) this.bytes_in_sequence = 3;
          if ((n >= 240) && (n <= 244)) this.bytes_in_sequence = 4;
          if ((this.bytes_in_sequence + i) > buffer.length) { // if bytes needed to complete char fall outside buffer length, we have a boundary split
            for (var k = 0; k <= (buffer.length - 1 - i); k++) {
              this.temp_buffs[this.bytes_in_sequence][k] = buffer[i + k]; // fill temp buffer of correct size with bytes available in this chunk
            }
            this.bytes_remaining = (i + this.bytes_in_sequence) - buffer.length;
            i = buffer.length - 1;
          } else {
            this.appendStringBuf(buffer, i, i + this.bytes_in_sequence);
            i = i + this.bytes_in_sequence - 1;
          }
        } else if (n === 0x22) {
          this.tState = START;
          this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);
          this.stringBufferOffset = 0;
          this.onToken(STRING, this.string);
          this.offset += Buffer.byteLength(this.string, 'utf8') + 1;
          this.string = undefined;
        }
        else if (n === 0x5c) {
          this.tState = STRING2;
        }
        else if (n >= 0x20) { this.appendStringChar(n); }
        else {
            return this.charError(buffer, i);
        }
      }else if (this.tState === STRING2){ // After backslash
        n = buffer[i];
        if(n === 0x22){ this.appendStringChar(n); this.tState = STRING1;
        }else if(n === 0x5c){ this.appendStringChar(BACK_SLASH); this.tState = STRING1;
        }else if(n === 0x2f){ this.appendStringChar(FORWARD_SLASH); this.tState = STRING1;
        }else if(n === 0x62){ this.appendStringChar(BACKSPACE); this.tState = STRING1;
        }else if(n === 0x66){ this.appendStringChar(FORM_FEED); this.tState = STRING1;
        }else if(n === 0x6e){ this.appendStringChar(NEWLINE); this.tState = STRING1;
        }else if(n === 0x72){ this.appendStringChar(CARRIAGE_RETURN); this.tState = STRING1;
        }else if(n === 0x74){ this.appendStringChar(TAB); this.tState = STRING1;
        }else if(n === 0x75){ this.unicode = ""; this.tState = STRING3;
        }else{
          return this.charError(buffer, i);
        }
      }else if (this.tState === STRING3 || this.tState === STRING4 || this.tState === STRING5 || this.tState === STRING6){ // unicode hex codes
        n = buffer[i];
        // 0-9 A-F a-f
        if ((n >= 0x30 && n < 0x40) || (n > 0x40 && n <= 0x46) || (n > 0x60 && n <= 0x66)) {
          this.unicode += String.fromCharCode(n);
          if (this.tState++ === STRING6) {
            var intVal = parseInt(this.unicode, 16);
            this.unicode = undefined;
            if (this.highSurrogate !== undefined && intVal >= 0xDC00 && intVal < (0xDFFF + 1)) { //<56320,57343> - lowSurrogate
              this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate, intVal)));
              this.highSurrogate = undefined;
            } else if (this.highSurrogate === undefined && intVal >= 0xD800 && intVal < (0xDBFF + 1)) { //<55296,56319> - highSurrogate
              this.highSurrogate = intVal;
            } else {
              if (this.highSurrogate !== undefined) {
                this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate)));
                this.highSurrogate = undefined;
              }
              this.appendStringBuf(new Buffer(String.fromCharCode(intVal)));
            }
            this.tState = STRING1;
          }
        } else {
          return this.charError(buffer, i);
        }
      } else if (this.tState === NUMBER1 || this.tState === NUMBER3) {
          n = buffer[i];

          switch (n) {
            case 0x30: // 0
            case 0x31: // 1
            case 0x32: // 2
            case 0x33: // 3
            case 0x34: // 4
            case 0x35: // 5
            case 0x36: // 6
            case 0x37: // 7
            case 0x38: // 8
            case 0x39: // 9
            case 0x2e: // .
            case 0x65: // e
            case 0x45: // E
            case 0x2b: // +
            case 0x2d: // -
              this.string += String.fromCharCode(n);
              this.tState = NUMBER3;
              break;
            default:
              this.tState = START;
              var result = Number(this.string);

              if (isNaN(result)){
                return this.charError(buffer, i);
              }

              if ((this.string.match(/[0-9]+/) == this.string) && (result.toString() != this.string)) {
                // Long string of digits which is an ID string and not valid and/or safe JavaScript integer Number
                this.onToken(STRING, this.string);
              } else {
                this.onToken(NUMBER, result);
              }

              this.offset += this.string.length - 1;
              this.string = undefined;
              i--;
              break;
          }
      }else if (this.tState === TRUE1){ // r
        if (buffer[i] === 0x72) { this.tState = TRUE2; }
        else { return this.charError(buffer, i); }
      }else if (this.tState === TRUE2){ // u
        if (buffer[i] === 0x75) { this.tState = TRUE3; }
        else { return this.charError(buffer, i); }
      }else if (this.tState === TRUE3){ // e
        if (buffer[i] === 0x65) { this.tState = START; this.onToken(TRUE, true); this.offset+= 3; }
        else { return this.charError(buffer, i); }
      }else if (this.tState === FALSE1){ // a
        if (buffer[i] === 0x61) { this.tState = FALSE2; }
        else { return this.charError(buffer, i); }
      }else if (this.tState === FALSE2){ // l
        if (buffer[i] === 0x6c) { this.tState = FALSE3; }
        else { return this.charError(buffer, i); }
      }else if (this.tState === FALSE3){ // s
        if (buffer[i] === 0x73) { this.tState = FALSE4; }
        else { return this.charError(buffer, i); }
      }else if (this.tState === FALSE4){ // e
        if (buffer[i] === 0x65) { this.tState = START; this.onToken(FALSE, false); this.offset+= 4; }
        else { return this.charError(buffer, i); }
      }else if (this.tState === NULL1){ // u
        if (buffer[i] === 0x75) { this.tState = NULL2; }
        else { return this.charError(buffer, i); }
      }else if (this.tState === NULL2){ // l
        if (buffer[i] === 0x6c) { this.tState = NULL3; }
        else { return this.charError(buffer, i); }
      }else if (this.tState === NULL3){ // l
        if (buffer[i] === 0x6c) { this.tState = START; this.onToken(NULL, null); this.offset += 3; }
        else { return this.charError(buffer, i); }
      }
    }
  };
  proto.onToken = function (token, value) {
    // Override this to get events
  };

  proto.parseError = function (token, value) {
    this.tState = STOP;
    this.onError(new Error("Unexpected " + Parser.toknam(token) + (value ? ("(" + JSON.stringify(value) + ")") : "") + " in state " + Parser.toknam(this.state)));
  };
  proto.push = function () {
    this.stack.push({value: this.value, key: this.key, mode: this.mode});
  };
  proto.pop = function () {
    var value = this.value;
    var parent = this.stack.pop();
    this.value = parent.value;
    this.key = parent.key;
    this.mode = parent.mode;
    this.emit(value);
    if (!this.mode) { this.state = VALUE; }
  };
  proto.emit = function (value) {
    if (this.mode) { this.state = COMMA; }
    this.onValue(value);
  };
  proto.onValue = function (value) {
    // Override me
  };
  proto.onToken = function (token, value) {
    if(this.state === VALUE){
      if(token === STRING || token === NUMBER || token === TRUE || token === FALSE || token === NULL){
        if (this.value) {
          this.value[this.key] = value;
        }
        this.emit(value);
      }else if(token === LEFT_BRACE){
        this.push();
        if (this.value) {
          this.value = this.value[this.key] = {};
        } else {
          this.value = {};
        }
        this.key = undefined;
        this.state = KEY;
        this.mode = OBJECT;
      }else if(token === LEFT_BRACKET){
        this.push();
        if (this.value) {
          this.value = this.value[this.key] = [];
        } else {
          this.value = [];
        }
        this.key = 0;
        this.mode = ARRAY;
        this.state = VALUE;
      }else if(token === RIGHT_BRACE){
        if (this.mode === OBJECT) {
          this.pop();
        } else {
          return this.parseError(token, value);
        }
      }else if(token === RIGHT_BRACKET){
        if (this.mode === ARRAY) {
          this.pop();
        } else {
          return this.parseError(token, value);
        }
      }else{
        return this.parseError(token, value);
      }
    }else if(this.state === KEY){
      if (token === STRING) {
        this.key = value;
        this.state = COLON;
      } else if (token === RIGHT_BRACE) {
        this.pop();
      } else {
        return this.parseError(token, value);
      }
    }else if(this.state === COLON){
      if (token === COLON) { this.state = VALUE; }
      else { return this.parseError(token, value); }
    }else if(this.state === COMMA){
      if (token === COMMA) {
        if (this.mode === ARRAY) { this.key++; this.state = VALUE; }
        else if (this.mode === OBJECT) { this.state = KEY; }

      } else if (token === RIGHT_BRACKET && this.mode === ARRAY || token === RIGHT_BRACE && this.mode === OBJECT) {
        this.pop();
      } else {
        return this.parseError(token, value);
      }
    }else{
      return this.parseError(token, value);
    }
  };

  Parser.C = C;

  var jsonparse = Parser;

  var Transform$1 = Stream.Transform;

  var JSON2CSVTransform =
  /*#__PURE__*/
  function (_Transform) {
    _inherits(JSON2CSVTransform, _Transform);

    function JSON2CSVTransform(opts, transformOpts) {
      var _this;

      _classCallCheck(this, JSON2CSVTransform);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(JSON2CSVTransform).call(this, transformOpts)); // Inherit methods from JSON2CSVBase since extends doesn't
      // allow multiple inheritance and manually preprocess opts

      Object.getOwnPropertyNames(JSON2CSVBase_1.prototype).forEach(function (key) {
        return _this[key] = JSON2CSVBase_1.prototype[key];
      });
      _this.opts = _this.preprocessOpts(opts);
      _this.preprocessRow = _this.memoizePreprocessRow();
      _this._data = '';
      _this._hasWritten = false;

      if (_this._readableState.objectMode) {
        _this.initObjectModeParse();
      } else if (_this.opts.ndjson) {
        _this.initNDJSONParse();
      } else {
        _this.initJSONParser();
      }

      if (_this.opts.withBOM) {
        _this.push("\uFEFF");
      }

      if (_this.opts.fields) {
        _this.opts.fields = _this.preprocessFieldsInfo(_this.opts.fields);

        _this.pushHeader();
      }

      return _this;
    }
    /**
     * Init the transform with a parser to process data in object mode.
     * It receives JSON objects one by one and send them to `pushLine for processing.
     */


    _createClass(JSON2CSVTransform, [{
      key: "initObjectModeParse",
      value: function initObjectModeParse() {
        var transform = this;
        this.parser = {
          write: function write(line) {
            transform.pushLine(line);
          },
          getPendingData: function getPendingData() {
            return undefined;
          }
        };
      }
      /**
       * Init the transform with a parser to process NDJSON data.
       * It maintains a buffer of received data, parses each line
       * as JSON and send it to `pushLine for processing.
       */

    }, {
      key: "initNDJSONParse",
      value: function initNDJSONParse() {
        var transform = this;
        this.parser = {
          _data: '',
          write: function write(chunk) {
            this._data += chunk.toString();

            var lines = this._data.split('\n').map(function (line) {
              return line.trim();
            }).filter(function (line) {
              return line !== '';
            });

            var pendingData = false;
            lines.forEach(function (line, i) {
              try {
                transform.pushLine(JSON.parse(line));
              } catch (e) {
                if (i === lines.length - 1) {
                  pendingData = true;
                } else {
                  e.message = 'Invalid JSON (' + line + ')';
                  transform.emit('error', e);
                }
              }
            });
            this._data = pendingData ? this._data.slice(this._data.lastIndexOf('\n')) : '';
          },
          getPendingData: function getPendingData() {
            return this._data;
          }
        };
      }
      /**
       * Init the transform with a parser to process JSON data.
       * It maintains a buffer of received data, parses each as JSON 
       * item if the data is an array or the data itself otherwise
       * and send it to `pushLine` for processing.
       */

    }, {
      key: "initJSONParser",
      value: function initJSONParser() {
        var transform = this;
        this.parser = new jsonparse();

        this.parser.onValue = function (value) {
          if (this.stack.length !== this.depthToEmit) return;
          transform.pushLine(value);
        };

        this.parser._onToken = this.parser.onToken;

        this.parser.onToken = function (token, value) {
          transform.parser._onToken(token, value);

          if (this.stack.length === 0 && !transform.opts.fields && this.mode !== jsonparse.C.ARRAY && this.mode !== jsonparse.C.OBJECT) {
            this.onError(new Error('Data should not be empty or the "fields" option should be included'));
          }

          if (this.stack.length === 1) {
            if (this.depthToEmit === undefined) {
              // If Array emit its content, else emit itself
              this.depthToEmit = this.mode === jsonparse.C.ARRAY ? 1 : 0;
            }

            if (this.depthToEmit !== 0 && this.stack.length === 1) {
              // No need to store the whole root array in memory
              this.value = undefined;
            }
          }
        };

        this.parser.getPendingData = function () {
          return this.value;
        };

        this.parser.onError = function (err) {
          if (err.message.includes('Unexpected')) {
            err.message = 'Invalid JSON (' + err.message + ')';
          }

          transform.emit('error', err);
        };
      }
      /**
       * Main function that send data to the parse to be processed.
       *
       * @param {Buffer} chunk Incoming data
       * @param {String} encoding Encoding of the incoming data. Defaults to 'utf8'
       * @param {Function} done Called when the proceesing of the supplied chunk is done
       */

    }, {
      key: "_transform",
      value: function _transform(chunk, encoding, done) {
        this.parser.write(chunk);
        done();
      }
    }, {
      key: "_flush",
      value: function _flush(done) {
        if (this.parser.getPendingData()) {
          done(new Error('Invalid data received from stdin', this.parser.getPendingData()));
        }

        done();
      }
      /**
       * Generate the csv header and pushes it downstream.
       */

    }, {
      key: "pushHeader",
      value: function pushHeader() {
        if (this.opts.header) {
          var header = this.getHeader();
          this.emit('header', header);
          this.push(header);
          this._hasWritten = true;
        }
      }
      /**
       * Transforms an incoming json data to csv and pushes it downstream.
       *
       * @param {Object} data JSON object to be converted in a CSV row
       */

    }, {
      key: "pushLine",
      value: function pushLine(data) {
        var _this2 = this;

        var processedData = this.preprocessRow(data);

        if (!this._hasWritten) {
          this.opts.fields = this.opts.fields || this.preprocessFieldsInfo(Object.keys(processedData[0]));
          this.pushHeader();
        }

        processedData.forEach(function (row) {
          var line = _this2.processRow(row, _this2.opts);

          if (line === undefined) return;

          _this2.emit('line', line);

          _this2.push(_this2._hasWritten ? _this2.opts.eol + line : line);

          _this2._hasWritten = true;
        });
      }
    }]);

    return JSON2CSVTransform;
  }(Transform$1);

  var JSON2CSVTransform_1 = JSON2CSVTransform;

  var Transform$2 = Stream.Transform;
  var fastJoin$3 = utils.fastJoin;

  var JSON2CSVAsyncParser =
  /*#__PURE__*/
  function () {
    function JSON2CSVAsyncParser(opts, transformOpts) {
      _classCallCheck(this, JSON2CSVAsyncParser);

      this.input = new Transform$2(transformOpts);

      this.input._read = function () {};

      this.transform = new JSON2CSVTransform_1(opts, transformOpts);
      this.processor = this.input.pipe(this.transform);
    }

    _createClass(JSON2CSVAsyncParser, [{
      key: "fromInput",
      value: function fromInput(input) {
        if (this._input) {
          throw new Error('Async parser already has an input.');
        }

        this._input = input;
        this.input = this._input.pipe(this.processor);
        return this;
      }
    }, {
      key: "throughTransform",
      value: function throughTransform(transform) {
        if (this._output) {
          throw new Error('Can\'t add transforms once an output has been added.');
        }

        this.processor = this.processor.pipe(transform);
        return this;
      }
    }, {
      key: "toOutput",
      value: function toOutput(output) {
        if (this._output) {
          throw new Error('Async parser already has an output.');
        }

        this._output = output;
        this.processor = this.processor.pipe(output);
        return this;
      }
    }, {
      key: "promise",
      value: function promise() {
        var _this = this;

        return new Promise(function (resolve, reject) {
          var csvBuffer = [];

          _this.processor.on('data', function (chunk) {
            return csvBuffer.push(chunk.toString());
          }).on('finish', function () {
            return resolve(fastJoin$3(csvBuffer, ''));
          }).on('error', function (err) {
            return reject(err);
          });
        });
      }
    }]);

    return JSON2CSVAsyncParser;
  }();

  var JSON2CSVAsyncParser_1 = JSON2CSVAsyncParser;

  var Readable$1 = Stream.Readable;
  var Parser$1 = JSON2CSVParser_1;
  var AsyncParser = JSON2CSVAsyncParser_1;
  var Transform$3 = JSON2CSVTransform_1; // Convenience method to keep the API similar to version 3.X

  var parse = function parse(data, opts) {
    return new JSON2CSVParser_1(opts).parse(data);
  };

  var parseAsync = function parseAsync(data, opts, transformOpts) {
    try {
      if (!(data instanceof Readable$1)) {
        transformOpts = Object.assign({}, transformOpts, {
          objectMode: true
        });
      }

      var asyncParser = new JSON2CSVAsyncParser_1(opts, transformOpts);
      var promise = asyncParser.promise();

      if (Array.isArray(data)) {
        data.forEach(function (item) {
          return asyncParser.input.push(item);
        });
        asyncParser.input.push(null);
      } else if (data instanceof Readable$1) {
        asyncParser.fromInput(data);
      } else {
        asyncParser.input.push(data);
        asyncParser.input.push(null);
      }

      return promise;
    } catch (err) {
      return Promise.reject(err);
    }
  };

  var json2csv = {
    Parser: Parser$1,
    AsyncParser: AsyncParser,
    Transform: Transform$3,
    parse: parse,
    parseAsync: parseAsync
  };

  exports.default = json2csv;
  exports.Parser = Parser$1;
  exports.AsyncParser = AsyncParser;
  exports.Transform = Transform$3;
  exports.parse = parse;
  exports.parseAsync = parseAsync;

  Object.defineProperty(exports, '__esModule', { value: true });

}));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/amd-define.js":
/*!***************************************!*\
  !*** (webpack)/buildin/amd-define.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function() {
	throw new Error("define cannot be used indirect");
};


/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(originalModule) {
	if (!originalModule.webpackPolyfill) {
		var module = Object.create(originalModule);
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		Object.defineProperty(module, "exports", {
			enumerable: true
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./node_modules/yallist/iterator.js":
/*!******************************************!*\
  !*** ./node_modules/yallist/iterator.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function (Yallist) {
  Yallist.prototype[Symbol.iterator] = function* () {
    for (let walker = this.head; walker; walker = walker.next) {
      yield walker.value
    }
  }
}


/***/ }),

/***/ "./node_modules/yallist/yallist.js":
/*!*****************************************!*\
  !*** ./node_modules/yallist/yallist.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Yallist

Yallist.Node = Node
Yallist.create = Yallist

function Yallist (list) {
  var self = this
  if (!(self instanceof Yallist)) {
    self = new Yallist()
  }

  self.tail = null
  self.head = null
  self.length = 0

  if (list && typeof list.forEach === 'function') {
    list.forEach(function (item) {
      self.push(item)
    })
  } else if (arguments.length > 0) {
    for (var i = 0, l = arguments.length; i < l; i++) {
      self.push(arguments[i])
    }
  }

  return self
}

Yallist.prototype.removeNode = function (node) {
  if (node.list !== this) {
    throw new Error('removing node which does not belong to this list')
  }

  var next = node.next
  var prev = node.prev

  if (next) {
    next.prev = prev
  }

  if (prev) {
    prev.next = next
  }

  if (node === this.head) {
    this.head = next
  }
  if (node === this.tail) {
    this.tail = prev
  }

  node.list.length--
  node.next = null
  node.prev = null
  node.list = null

  return next
}

Yallist.prototype.unshiftNode = function (node) {
  if (node === this.head) {
    return
  }

  if (node.list) {
    node.list.removeNode(node)
  }

  var head = this.head
  node.list = this
  node.next = head
  if (head) {
    head.prev = node
  }

  this.head = node
  if (!this.tail) {
    this.tail = node
  }
  this.length++
}

Yallist.prototype.pushNode = function (node) {
  if (node === this.tail) {
    return
  }

  if (node.list) {
    node.list.removeNode(node)
  }

  var tail = this.tail
  node.list = this
  node.prev = tail
  if (tail) {
    tail.next = node
  }

  this.tail = node
  if (!this.head) {
    this.head = node
  }
  this.length++
}

Yallist.prototype.push = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    push(this, arguments[i])
  }
  return this.length
}

Yallist.prototype.unshift = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    unshift(this, arguments[i])
  }
  return this.length
}

Yallist.prototype.pop = function () {
  if (!this.tail) {
    return undefined
  }

  var res = this.tail.value
  this.tail = this.tail.prev
  if (this.tail) {
    this.tail.next = null
  } else {
    this.head = null
  }
  this.length--
  return res
}

Yallist.prototype.shift = function () {
  if (!this.head) {
    return undefined
  }

  var res = this.head.value
  this.head = this.head.next
  if (this.head) {
    this.head.prev = null
  } else {
    this.tail = null
  }
  this.length--
  return res
}

Yallist.prototype.forEach = function (fn, thisp) {
  thisp = thisp || this
  for (var walker = this.head, i = 0; walker !== null; i++) {
    fn.call(thisp, walker.value, i, this)
    walker = walker.next
  }
}

Yallist.prototype.forEachReverse = function (fn, thisp) {
  thisp = thisp || this
  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
    fn.call(thisp, walker.value, i, this)
    walker = walker.prev
  }
}

Yallist.prototype.get = function (n) {
  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.next
  }
  if (i === n && walker !== null) {
    return walker.value
  }
}

Yallist.prototype.getReverse = function (n) {
  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.prev
  }
  if (i === n && walker !== null) {
    return walker.value
  }
}

Yallist.prototype.map = function (fn, thisp) {
  thisp = thisp || this
  var res = new Yallist()
  for (var walker = this.head; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this))
    walker = walker.next
  }
  return res
}

Yallist.prototype.mapReverse = function (fn, thisp) {
  thisp = thisp || this
  var res = new Yallist()
  for (var walker = this.tail; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this))
    walker = walker.prev
  }
  return res
}

Yallist.prototype.reduce = function (fn, initial) {
  var acc
  var walker = this.head
  if (arguments.length > 1) {
    acc = initial
  } else if (this.head) {
    walker = this.head.next
    acc = this.head.value
  } else {
    throw new TypeError('Reduce of empty list with no initial value')
  }

  for (var i = 0; walker !== null; i++) {
    acc = fn(acc, walker.value, i)
    walker = walker.next
  }

  return acc
}

Yallist.prototype.reduceReverse = function (fn, initial) {
  var acc
  var walker = this.tail
  if (arguments.length > 1) {
    acc = initial
  } else if (this.tail) {
    walker = this.tail.prev
    acc = this.tail.value
  } else {
    throw new TypeError('Reduce of empty list with no initial value')
  }

  for (var i = this.length - 1; walker !== null; i--) {
    acc = fn(acc, walker.value, i)
    walker = walker.prev
  }

  return acc
}

Yallist.prototype.toArray = function () {
  var arr = new Array(this.length)
  for (var i = 0, walker = this.head; walker !== null; i++) {
    arr[i] = walker.value
    walker = walker.next
  }
  return arr
}

Yallist.prototype.toArrayReverse = function () {
  var arr = new Array(this.length)
  for (var i = 0, walker = this.tail; walker !== null; i++) {
    arr[i] = walker.value
    walker = walker.prev
  }
  return arr
}

Yallist.prototype.slice = function (from, to) {
  to = to || this.length
  if (to < 0) {
    to += this.length
  }
  from = from || 0
  if (from < 0) {
    from += this.length
  }
  var ret = new Yallist()
  if (to < from || to < 0) {
    return ret
  }
  if (from < 0) {
    from = 0
  }
  if (to > this.length) {
    to = this.length
  }
  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
    walker = walker.next
  }
  for (; walker !== null && i < to; i++, walker = walker.next) {
    ret.push(walker.value)
  }
  return ret
}

Yallist.prototype.sliceReverse = function (from, to) {
  to = to || this.length
  if (to < 0) {
    to += this.length
  }
  from = from || 0
  if (from < 0) {
    from += this.length
  }
  var ret = new Yallist()
  if (to < from || to < 0) {
    return ret
  }
  if (from < 0) {
    from = 0
  }
  if (to > this.length) {
    to = this.length
  }
  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
    walker = walker.prev
  }
  for (; walker !== null && i > from; i--, walker = walker.prev) {
    ret.push(walker.value)
  }
  return ret
}

Yallist.prototype.splice = function (start, deleteCount, ...nodes) {
  if (start > this.length) {
    start = this.length - 1
  }
  if (start < 0) {
    start = this.length + start;
  }

  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
    walker = walker.next
  }

  var ret = []
  for (var i = 0; walker && i < deleteCount; i++) {
    ret.push(walker.value)
    walker = this.removeNode(walker)
  }
  if (walker === null) {
    walker = this.tail
  }

  if (walker !== this.head && walker !== this.tail) {
    walker = walker.prev
  }

  for (var i = 0; i < nodes.length; i++) {
    walker = insert(this, walker, nodes[i])
  }
  return ret;
}

Yallist.prototype.reverse = function () {
  var head = this.head
  var tail = this.tail
  for (var walker = head; walker !== null; walker = walker.prev) {
    var p = walker.prev
    walker.prev = walker.next
    walker.next = p
  }
  this.head = tail
  this.tail = head
  return this
}

function insert (self, node, value) {
  var inserted = node === self.head ?
    new Node(value, null, node, self) :
    new Node(value, node, node.next, self)

  if (inserted.next === null) {
    self.tail = inserted
  }
  if (inserted.prev === null) {
    self.head = inserted
  }

  self.length++

  return inserted
}

function push (self, item) {
  self.tail = new Node(item, self.tail, null, self)
  if (!self.head) {
    self.head = self.tail
  }
  self.length++
}

function unshift (self, item) {
  self.head = new Node(item, null, self.head, self)
  if (!self.tail) {
    self.tail = self.head
  }
  self.length++
}

function Node (value, prev, next, list) {
  if (!(this instanceof Node)) {
    return new Node(value, prev, next, list)
  }

  this.list = list
  this.value = value

  if (prev) {
    prev.next = this
    this.prev = prev
  } else {
    this.prev = null
  }

  if (next) {
    next.prev = this
    this.next = next
  } else {
    this.next = null
  }
}

try {
  // add if support for Symbol.iterator is present
  __webpack_require__(/*! ./iterator.js */ "./node_modules/yallist/iterator.js")(Yallist)
} catch (er) {}


/***/ }),

/***/ "./node_modules/zarr/core.mjs":
/*!************************************!*\
  !*** ./node_modules/zarr/core.mjs ***!
  \************************************/
/*! exports provided: ArrayNotFoundError, BoundsCheckError, ContainsArrayError, ContainsGroupError, DTYPE_TYPEDARRAY_MAPPING, Group, GroupNotFoundError, HTTPError, HTTPStore, InvalidSliceError, KeyError, MemoryStore, NegativeStepError, NestedArray, ObjectStore, PathNotFoundError, PermissionError, TooManyIndicesError, ValueError, ZarrArray, addCodec, array, create, createProxy, empty, full, getCodec, getTypedArrayDtypeString, group, isKeyError, normalizeStoreArgument, ones, openArray, openGroup, rangeTypedArray, slice, sliceIndices, zeros */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayNotFoundError", function() { return ArrayNotFoundError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoundsCheckError", function() { return BoundsCheckError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainsArrayError", function() { return ContainsArrayError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainsGroupError", function() { return ContainsGroupError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DTYPE_TYPEDARRAY_MAPPING", function() { return DTYPE_TYPEDARRAY_MAPPING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Group", function() { return Group; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupNotFoundError", function() { return GroupNotFoundError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HTTPError", function() { return HTTPError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HTTPStore", function() { return HTTPStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InvalidSliceError", function() { return InvalidSliceError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyError", function() { return KeyError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MemoryStore", function() { return MemoryStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NegativeStepError", function() { return NegativeStepError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NestedArray", function() { return NestedArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectStore", function() { return ObjectStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathNotFoundError", function() { return PathNotFoundError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PermissionError", function() { return PermissionError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TooManyIndicesError", function() { return TooManyIndicesError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValueError", function() { return ValueError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZarrArray", function() { return ZarrArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addCodec", function() { return addCodec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "array", function() { return array; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createProxy", function() { return createProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function() { return empty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "full", function() { return full; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCodec", function() { return getCodec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTypedArrayDtypeString", function() { return getTypedArrayDtypeString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "group", function() { return group; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isKeyError", function() { return isKeyError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizeStoreArgument", function() { return normalizeStoreArgument; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ones", function() { return ones; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "openArray", function() { return openArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "openGroup", function() { return openGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangeTypedArray", function() { return rangeTypedArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "slice", function() { return slice; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sliceIndices", function() { return sliceIndices; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zeros", function() { return zeros; });
const registry = new Map();
function addCodec(id, importFn) {
    registry.set(id, importFn);
}
async function getCodec(config) {
    if (!registry.has(config.id)) {
        throw new Error(`Compression codec ${config.id} is not supported by Zarr.js yet.`);
    }
    const codec = await registry.get(config.id)();
    return codec.fromConfig(config);
}

function createProxy(mapping) {
    return new Proxy(mapping, {
        set(target, key, value, _receiver) {
            return target.setItem(key, value);
        },
        get(target, key, _receiver) {
            return target.getItem(key);
        },
        deleteProperty(target, key) {
            return target.deleteItem(key);
        },
        has(target, key) {
            return target.containsItem(key);
        }
    });
}

function isZarrError(err) {
    return typeof err === 'object' && err !== null && '__zarr__' in err;
}
function isKeyError(o) {
    return isZarrError(o) && o.__zarr__ === 'KeyError';
}
// Custom error messages, note we have to patch the prototype of the
// errors to fix `instanceof` calls, see:
// https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
class ContainsArrayError extends Error {
    constructor(path) {
        super(`path ${path} contains an array`);
        this.__zarr__ = 'ContainsArrayError';
        Object.setPrototypeOf(this, ContainsArrayError.prototype);
    }
}
class ContainsGroupError extends Error {
    constructor(path) {
        super(`path ${path} contains a group`);
        this.__zarr__ = 'ContainsGroupError';
        Object.setPrototypeOf(this, ContainsGroupError.prototype);
    }
}
class ArrayNotFoundError extends Error {
    constructor(path) {
        super(`array not found at path ${path}`);
        this.__zarr__ = 'ArrayNotFoundError';
        Object.setPrototypeOf(this, ArrayNotFoundError.prototype);
    }
}
class GroupNotFoundError extends Error {
    constructor(path) {
        super(`ground not found at path ${path}`);
        this.__zarr__ = 'GroupNotFoundError';
        Object.setPrototypeOf(this, GroupNotFoundError.prototype);
    }
}
class PathNotFoundError extends Error {
    constructor(path) {
        super(`nothing not found at path ${path}`);
        this.__zarr__ = 'PathNotFoundError';
        Object.setPrototypeOf(this, PathNotFoundError.prototype);
    }
}
class PermissionError extends Error {
    constructor(message) {
        super(message);
        this.__zarr__ = 'PermissionError';
        Object.setPrototypeOf(this, PermissionError.prototype);
    }
}
class KeyError extends Error {
    constructor(key) {
        super(`key ${key} not present`);
        this.__zarr__ = 'KeyError';
        Object.setPrototypeOf(this, KeyError.prototype);
    }
}
class TooManyIndicesError extends RangeError {
    constructor(selection, shape) {
        super(`too many indices for array; expected ${shape.length}, got ${selection.length}`);
        this.__zarr__ = 'TooManyIndicesError';
        Object.setPrototypeOf(this, TooManyIndicesError.prototype);
    }
}
class BoundsCheckError extends RangeError {
    constructor(message) {
        super(message);
        this.__zarr__ = 'BoundsCheckError';
        Object.setPrototypeOf(this, BoundsCheckError.prototype);
    }
}
class InvalidSliceError extends RangeError {
    constructor(from, to, stepSize, reason) {
        super(`slice arguments slice(${from}, ${to}, ${stepSize}) invalid: ${reason}`);
        this.__zarr__ = 'InvalidSliceError';
        Object.setPrototypeOf(this, InvalidSliceError.prototype);
    }
}
class NegativeStepError extends Error {
    constructor() {
        super(`Negative step size is not supported when indexing.`);
        this.__zarr__ = 'NegativeStepError';
        Object.setPrototypeOf(this, NegativeStepError.prototype);
    }
}
class ValueError extends Error {
    constructor(message) {
        super(message);
        this.__zarr__ = 'ValueError';
        Object.setPrototypeOf(this, ValueError.prototype);
    }
}
class HTTPError extends Error {
    constructor(code) {
        super(code);
        this.__zarr__ = 'HTTPError';
        Object.setPrototypeOf(this, HTTPError.prototype);
    }
}

function slice(start, stop = undefined, step = null) {
    // tslint:disable-next-line: strict-type-predicates
    if (start === undefined) { // Not possible in typescript
        throw new InvalidSliceError(start, stop, step, "The first argument must not be undefined");
    }
    if ((typeof start === "string" && start !== ":") || (typeof stop === "string" && stop !== ":")) { // Note in typescript this will never happen with type checking.
        throw new InvalidSliceError(start, stop, step, "Arguments can only be integers, \":\" or null");
    }
    // slice(5) === slice(null, 5)
    if (stop === undefined) {
        stop = start;
        start = null;
    }
    // if (start !== null && stop !== null && start > stop) {
    //     throw new InvalidSliceError(start, stop, step, "to is higher than from");
    // }
    return {
        start: start === ":" ? null : start,
        stop: stop === ":" ? null : stop,
        step,
        _slice: true,
    };
}
/**
 * Port of adjustIndices
 * https://github.com/python/cpython/blob/master/Objects/sliceobject.c#L243
 */
function adjustIndices(start, stop, step, length) {
    if (start < 0) {
        start += length;
        if (start < 0) {
            start = (step < 0) ? -1 : 0;
        }
    }
    else if (start >= length) {
        start = (step < 0) ? length - 1 : length;
    }
    if (stop < 0) {
        stop += length;
        if (stop < 0) {
            stop = (step < 0) ? -1 : 0;
        }
    }
    else if (stop >= length) {
        stop = (step < 0) ? length - 1 : length;
    }
    if (step < 0) {
        if (stop < start) {
            const length = Math.floor((start - stop - 1) / (-step) + 1);
            return [start, stop, step, length];
        }
    }
    else {
        if (start < stop) {
            const length = Math.floor((stop - start - 1) / step + 1);
            return [start, stop, step, length];
        }
    }
    return [start, stop, step, 0];
}
/**
 * Port of slice.indices(n) and PySlice_Unpack
 * https://github.com/python/cpython/blob/master/Objects/sliceobject.c#L166
 *  https://github.com/python/cpython/blob/master/Objects/sliceobject.c#L198
 *
 * Behaviour might be slightly different as it's a weird hybrid implementation.
 */
function sliceIndices(slice, length) {
    let start;
    let stop;
    let step;
    if (slice.step === null) {
        step = 1;
    }
    else {
        step = slice.step;
    }
    if (slice.start === null) {
        start = step < 0 ? Number.MAX_SAFE_INTEGER : 0;
    }
    else {
        start = slice.start;
        if (start < 0) {
            start += length;
        }
    }
    if (slice.stop === null) {
        stop = step < 0 ? -Number.MAX_SAFE_INTEGER : Number.MAX_SAFE_INTEGER;
    }
    else {
        stop = slice.stop;
        if (stop < 0) {
            stop += length;
        }
    }
    // This clips out of bounds slices
    const s = adjustIndices(start, stop, step, length);
    start = s[0];
    stop = s[1];
    step = s[2];
    // The output length
    length = s[3];
    // With out of bounds slicing these two assertions are not useful.
    // if (stop > length) throw new Error("Stop greater than length");
    // if (start >= length) throw new Error("Start greater than or equal to length");
    if (step === 0)
        throw new Error("Step size 0 is invalid");
    return [start, stop, step, length];
}

function ensureArray(selection) {
    if (!Array.isArray(selection)) {
        return [selection];
    }
    return selection;
}
function checkSelectionLength(selection, shape) {
    if (selection.length > shape.length) {
        throw new TooManyIndicesError(selection, shape);
    }
}
/**
 * Returns both the sliceIndices per dimension and the output shape after slicing.
 */
function selectionToSliceIndices(selection, shape) {
    const sliceIndicesResult = [];
    const outShape = [];
    for (let i = 0; i < selection.length; i++) {
        const s = selection[i];
        if (typeof s === "number") {
            sliceIndicesResult.push(s);
        }
        else {
            const x = sliceIndices(s, shape[i]);
            const dimLength = x[3];
            outShape.push(dimLength);
            sliceIndicesResult.push(x);
        }
    }
    return [sliceIndicesResult, outShape];
}
/**
 * This translates "...", ":", null into a list of slices or non-negative integer selections of length shape
 */
function normalizeArraySelection(selection, shape, convertIntegerSelectionToSlices = false) {
    selection = replaceEllipsis(selection, shape);
    for (let i = 0; i < selection.length; i++) {
        const dimSelection = selection[i];
        if (typeof dimSelection === "number") {
            if (convertIntegerSelectionToSlices) {
                selection[i] = slice(dimSelection, dimSelection + 1, 1);
            }
            else {
                selection[i] = normalizeIntegerSelection(dimSelection, shape[i]);
            }
        }
        else if (isIntegerArray(dimSelection)) {
            throw new TypeError("Integer array selections are not supported (yet)");
        }
        else if (dimSelection === ":" || dimSelection === null) {
            selection[i] = slice(null, null, 1);
        }
    }
    return selection;
}
function replaceEllipsis(selection, shape) {
    selection = ensureArray(selection);
    let ellipsisIndex = -1;
    let numEllipsis = 0;
    for (let i = 0; i < selection.length; i++) {
        if (selection[i] === "...") {
            ellipsisIndex = i;
            numEllipsis += 1;
        }
    }
    if (numEllipsis > 1) {
        throw new RangeError("an index can only have a single ellipsis ('...')");
    }
    if (numEllipsis === 1) {
        // count how many items to left and right of ellipsis
        const numItemsLeft = ellipsisIndex;
        const numItemsRight = selection.length - (numItemsLeft + 1);
        const numItems = selection.length - 1; // All non-ellipsis items
        if (numItems >= shape.length) {
            // Ellipsis does nothing, just remove it
            selection = selection.filter((x) => x !== "...");
        }
        else {
            // Replace ellipsis with as many slices are needed for number of dims
            const numNewItems = shape.length - numItems;
            let newItem = selection.slice(0, numItemsLeft).concat(new Array(numNewItems).fill(null));
            if (numItemsRight > 0) {
                newItem = newItem.concat(selection.slice(selection.length - numItemsRight));
            }
            selection = newItem;
        }
    }
    // Fill out selection if not completely specified
    if (selection.length < shape.length) {
        const numMissing = shape.length - selection.length;
        selection = selection.concat(new Array(numMissing).fill(null));
    }
    checkSelectionLength(selection, shape);
    return selection;
}
function normalizeIntegerSelection(dimSelection, dimLength) {
    // Note: Maybe we should convert to integer or warn if dimSelection is not an integer
    // handle wraparound
    if (dimSelection < 0) {
        dimSelection = dimLength + dimSelection;
    }
    // handle out of bounds
    if (dimSelection >= dimLength || dimSelection < 0) {
        throw new BoundsCheckError(`index out of bounds for dimension with length ${dimLength}`);
    }
    return dimSelection;
}
function isInteger(s) {
    return typeof s === "number";
}
function isIntegerArray(s) {
    if (!Array.isArray(s)) {
        return false;
    }
    for (const e of s) {
        if (typeof e !== "number") {
            return false;
        }
    }
    return true;
}
function isSlice(s) {
    if (s !== null && s["_slice"] === true) {
        return true;
    }
    return false;
}
function isContiguousSlice(s) {
    return isSlice(s) && (s.step === null || s.step === 1);
}
function isContiguousSelection(selection) {
    selection = ensureArray(selection);
    for (let i = 0; i < selection.length; i++) {
        const s = selection[i];
        if (!(isIntegerArray(s) || isContiguousSlice(s) || s === "...")) {
            return false;
        }
    }
    return true;
}
function* product(...iterables) {
    if (iterables.length === 0) {
        return;
    }
    // make a list of iterators from the iterables
    const iterators = iterables.map(it => it());
    const results = iterators.map(it => it.next());
    // Disabled to allow empty inputs
    // if (results.some(r => r.done)) {
    //     throw new Error("Input contains an empty iterator.");
    // }
    for (let i = 0;;) {
        if (results[i].done) {
            // reset the current iterator
            iterators[i] = iterables[i]();
            results[i] = iterators[i].next();
            // advance, and exit if we've reached the end
            if (++i >= iterators.length) {
                return;
            }
        }
        else {
            yield results.map(({ value }) => value);
            i = 0;
        }
        results[i] = iterators[i].next();
    }
}
class BasicIndexer {
    constructor(selection, array) {
        selection = normalizeArraySelection(selection, array.shape);
        // Setup per-dimension indexers
        this.dimIndexers = [];
        const arrayShape = array.shape;
        for (let i = 0; i < arrayShape.length; i++) {
            let dimSelection = selection[i];
            const dimLength = arrayShape[i];
            const dimChunkLength = array.chunks[i];
            if (dimSelection === null) {
                dimSelection = slice(null);
            }
            if (isInteger(dimSelection)) {
                this.dimIndexers.push(new IntDimIndexer(dimSelection, dimLength, dimChunkLength));
            }
            else if (isSlice(dimSelection)) {
                this.dimIndexers.push(new SliceDimIndexer(dimSelection, dimLength, dimChunkLength));
            }
            else {
                throw new RangeError(`Unspported selection item for basic indexing; expected integer or slice, got ${dimSelection}`);
            }
        }
        this.shape = [];
        for (const d of this.dimIndexers) {
            if (d instanceof SliceDimIndexer) {
                this.shape.push(d.numItems);
            }
        }
        this.dropAxes = null;
    }
    *iter() {
        const dimIndexerIterables = this.dimIndexers.map(x => (() => x.iter()));
        const dimIndexerProduct = product(...dimIndexerIterables);
        for (const dimProjections of dimIndexerProduct) {
            // TODO fix this, I think the product outputs too many combinations
            const chunkCoords = [];
            const chunkSelection = [];
            const outSelection = [];
            for (const p of dimProjections) {
                chunkCoords.push((p).dimChunkIndex);
                chunkSelection.push((p).dimChunkSelection);
                if ((p).dimOutSelection !== null) {
                    outSelection.push((p).dimOutSelection);
                }
            }
            yield {
                chunkCoords,
                chunkSelection,
                outSelection,
            };
        }
    }
}
class IntDimIndexer {
    constructor(dimSelection, dimLength, dimChunkLength) {
        dimSelection = normalizeIntegerSelection(dimSelection, dimLength);
        this.dimSelection = dimSelection;
        this.dimLength = dimLength;
        this.dimChunkLength = dimChunkLength;
        this.numItems = 1;
    }
    *iter() {
        const dimChunkIndex = Math.floor(this.dimSelection / this.dimChunkLength);
        const dimOffset = dimChunkIndex * this.dimChunkLength;
        const dimChunkSelection = this.dimSelection - dimOffset;
        const dimOutSelection = null;
        yield {
            dimChunkIndex,
            dimChunkSelection,
            dimOutSelection,
        };
    }
}
class SliceDimIndexer {
    constructor(dimSelection, dimLength, dimChunkLength) {
        // Normalize
        const [start, stop, step] = sliceIndices(dimSelection, dimLength);
        this.start = start;
        this.stop = stop;
        this.step = step;
        if (this.step < 1) {
            throw new NegativeStepError();
        }
        this.dimLength = dimLength;
        this.dimChunkLength = dimChunkLength;
        this.numItems = Math.max(0, Math.ceil((this.stop - this.start) / this.step));
        this.numChunks = Math.ceil(this.dimLength / this.dimChunkLength);
    }
    *iter() {
        const dimChunkIndexFrom = Math.floor(this.start / this.dimChunkLength);
        const dimChunkIndexTo = Math.ceil(this.stop / this.dimChunkLength);
        // Iterate over chunks in range
        for (let dimChunkIndex = dimChunkIndexFrom; dimChunkIndex < dimChunkIndexTo; dimChunkIndex++) {
            // Compute offsets for chunk within overall array
            const dimOffset = dimChunkIndex * this.dimChunkLength;
            const dimLimit = Math.min(this.dimLength, (dimChunkIndex + 1) * this.dimChunkLength);
            // Determine chunk length, accounting for trailing chunk
            const dimChunkLength = dimLimit - dimOffset;
            let dimChunkSelStart;
            let dimChunkSelStop;
            let dimOutOffset;
            if (this.start < dimOffset) {
                // Selection starts before current chunk
                dimChunkSelStart = 0;
                const remainder = (dimOffset - this.start) % this.step;
                if (remainder > 0) {
                    dimChunkSelStart += this.step - remainder;
                }
                // Compute number of previous items, provides offset into output array
                dimOutOffset = Math.ceil((dimOffset - this.start) / this.step);
            }
            else {
                // Selection starts within current chunk
                dimChunkSelStart = this.start - dimOffset;
                dimOutOffset = 0;
            }
            if (this.stop > dimLimit) {
                // Selection ends after current chunk
                dimChunkSelStop = dimChunkLength;
            }
            else {
                // Selection ends within current chunk
                dimChunkSelStop = this.stop - dimOffset;
            }
            const dimChunkSelection = slice(dimChunkSelStart, dimChunkSelStop, this.step);
            const dimChunkNumItems = Math.ceil((dimChunkSelStop - dimChunkSelStart) / this.step);
            const dimOutSelection = slice(dimOutOffset, dimOutOffset + dimChunkNumItems);
            yield {
                dimChunkIndex,
                dimChunkSelection,
                dimOutSelection,
            };
        }
    }
}

/**
 * This should be true only if this javascript is getting executed in Node.
 */
const IS_NODE = typeof process !== "undefined" && process.versions && process.versions.node;
// eslint-disable-next-line @typescript-eslint/ban-types
function normalizeStoragePath(path) {
    if (path === null) {
        return "";
    }
    if (path instanceof String) {
        path = path.valueOf();
    }
    // convert backslash to forward slash
    path = path.replace(/\\/g, "/");
    // ensure no leading slash
    while (path.length > 0 && path[0] === '/') {
        path = path.slice(1);
    }
    // ensure no trailing slash
    while (path.length > 0 && path[path.length - 1] === '/') {
        path = path.slice(0, path.length - 1);
    }
    // collapse any repeated slashes
    path = path.replace(/\/\/+/g, "/");
    // don't allow path segments with just '.' or '..'
    const segments = path.split('/');
    for (const s of segments) {
        if (s === "." || s === "..") {
            throw Error("path containing '.' or '..' segment not allowed");
        }
    }
    return path;
}
function normalizeShape(shape) {
    if (typeof shape === "number") {
        shape = [shape];
    }
    return shape.map(x => Math.floor(x));
}
function normalizeChunks(chunks, shape) {
    // Assume shape is already normalized
    if (chunks === null || chunks === true) {
        throw new Error("Chunk guessing is not supported yet");
    }
    if (chunks === false) {
        return shape;
    }
    if (typeof chunks === "number") {
        chunks = [chunks];
    }
    // handle underspecified chunks
    if (chunks.length < shape.length) {
        // assume chunks across remaining dimensions
        chunks = chunks.concat(shape.slice(chunks.length));
    }
    return chunks.map((x, idx) => {
        // handle null or -1 in chunks
        if (x === -1 || x === null) {
            return shape[idx];
        }
        else {
            return Math.floor(x);
        }
    });
}
function normalizeOrder(order) {
    order = order.toUpperCase();
    return order;
}
function normalizeDtype(dtype) {
    return dtype;
}
function normalizeFillValue(fillValue) {
    return fillValue;
}
/**
 * Determine whether `item` specifies a complete slice of array with the
 *  given `shape`. Used to optimize __setitem__ operations on chunks
 * @param item
 * @param shape
 */
function isTotalSlice(item, shape) {
    if (item === null) {
        return true;
    }
    if (!Array.isArray(item)) {
        item = [item];
    }
    for (let i = 0; i < Math.min(item.length, shape.length); i++) {
        const it = item[i];
        if (it === null)
            continue;
        if (isSlice(it)) {
            const s = it;
            const isStepOne = s.step === 1 || s.step === null;
            if (s.start === null && s.stop === null && isStepOne) {
                continue;
            }
            if ((s.stop - s.start) === shape[i] && isStepOne) {
                continue;
            }
            return false;
        }
        return false;
        // } else {
        //     console.error(`isTotalSlice unexpected non-slice, got ${it}`);
        //     return false;
        // }
    }
    return true;
}
/**
 * Checks for === equality of all elements.
 */
function arrayEquals1D(a, b) {
    if (a.length !== b.length) {
        return false;
    }
    for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
            return false;
        }
    }
    return true;
}
/*
 * Determines "C" order strides for a given shape array.
 * Strides provide integer steps in each dimention to traverse an ndarray.
 *
 * NOTE: - These strides here are distinct from numpy.ndarray.strides, which describe actual byte steps.
 *       - Strides are assumed to be contiguous, so initial step is 1. Thus, output will always be [XX, XX, 1].
 */
function getStrides(shape) {
    // adapted from https://github.com/scijs/ndarray/blob/master/ndarray.js#L326-L330
    const ndim = shape.length;
    const strides = Array(ndim);
    let step = 1; // init step
    for (let i = ndim - 1; i >= 0; i--) {
        strides[i] = step;
        step *= shape[i];
    }
    return strides;
}
/**
 * Preserves (double) slashes earlier in the path, so this works better
 * for URLs. From https://stackoverflow.com/a/46427607/4178400
 * @param args parts of a path or URL to join.
 */
function joinUrlParts(...args) {
    return args.map((part, i) => {
        if (i === 0) {
            return part.trim().replace(/[\/]*$/g, '');
        }
        else {
            return part.trim().replace(/(^[\/]*|[\/]*$)/g, '');
        }
    }).filter(x => x.length).join('/');
}
/**
 * Swaps byte order in-place for a given TypedArray.
 * Used to flip endian-ness when getting/setting chunks from/to zarr store.
 * @param src TypedArray
 */
function byteSwapInplace(src) {
    const b = src.BYTES_PER_ELEMENT;
    if (b === 1)
        return; // no swapping needed
    if (IS_NODE) {
        // Use builtin methods for swapping if in Node environment
        const bytes = Buffer.from(src.buffer, src.byteOffset, src.length * b);
        if (b === 2)
            bytes.swap16();
        if (b === 4)
            bytes.swap32();
        if (b === 8)
            bytes.swap64();
        return;
    }
    // In browser, need to flip manually
    // Adapted from https://github.com/zbjornson/node-bswap/blob/master/bswap.js
    const flipper = new Uint8Array(src.buffer, src.byteOffset, src.length * b);
    const numFlips = b / 2;
    const endByteIndex = b - 1;
    let t;
    for (let i = 0; i < flipper.length; i += b) {
        for (let j = 0; j < numFlips; j++) {
            t = flipper[i + j];
            flipper[i + j] = flipper[i + endByteIndex - j];
            flipper[i + endByteIndex - j] = t;
        }
    }
}
/**
 * Creates a copy of a TypedArray and swaps bytes.
 * Used to flip endian-ness when getting/setting chunks from/to zarr store.
 * @param src TypedArray
 */
function byteSwap(src) {
    const copy = src.slice();
    byteSwapInplace(copy);
    return copy;
}

const ARRAY_META_KEY = ".zarray";
const GROUP_META_KEY = ".zgroup";
const ATTRS_META_KEY = ".zattrs";

/**
 * Return true if the store contains an array at the given logical path.
 */
async function containsArray(store, path = null) {
    path = normalizeStoragePath(path);
    const prefix = pathToPrefix(path);
    const key = prefix + ARRAY_META_KEY;
    return store.containsItem(key);
}
/**
 * Return true if the store contains a group at the given logical path.
 */
async function containsGroup(store, path = null) {
    path = normalizeStoragePath(path);
    const prefix = pathToPrefix(path);
    const key = prefix + GROUP_META_KEY;
    return store.containsItem(key);
}
function pathToPrefix(path) {
    // assume path already normalized
    if (path.length > 0) {
        return path + '/';
    }
    return '';
}
async function requireParentGroup(store, path, chunkStore, overwrite) {
    // Assume path is normalized
    if (path.length === 0) {
        return;
    }
    const segments = path.split("/");
    let p = "";
    for (const s of segments.slice(0, segments.length - 1)) {
        p += s;
        if (await containsArray(store, p)) {
            await initGroupMetadata(store, p, overwrite);
        }
        else if (!await containsGroup(store, p)) {
            await initGroupMetadata(store, p);
        }
        p += "/";
    }
}
async function initGroupMetadata(store, path = null, overwrite = false) {
    path = normalizeStoragePath(path);
    // Guard conditions
    if (overwrite) {
        throw Error("Group overwriting not implemented yet :(");
    }
    else if (await containsArray(store, path)) {
        throw new ContainsArrayError(path);
    }
    else if (await containsGroup(store, path)) {
        throw new ContainsGroupError(path);
    }
    const metadata = { zarr_format: 2 };
    const key = pathToPrefix(path) + GROUP_META_KEY;
    await store.setItem(key, JSON.stringify(metadata));
}
/**
 *  Initialize a group store. Note that this is a low-level function and there should be no
 *  need to call this directly from user code.
 */
async function initGroup(store, path = null, chunkStore = null, overwrite = false) {
    path = normalizeStoragePath(path);
    await requireParentGroup(store, path, chunkStore, overwrite);
    await initGroupMetadata(store, path, overwrite);
}
async function initArrayMetadata(store, shape, chunks, dtype, path, compressor, fillValue, order, overwrite, chunkStore, filters) {
    // Guard conditions
    if (overwrite) {
        throw Error("Array overwriting not implemented yet :(");
    }
    else if (await containsArray(store, path)) {
        throw new ContainsArrayError(path);
    }
    else if (await containsGroup(store, path)) {
        throw new ContainsGroupError(path);
    }
    // Normalize metadata,  does type checking too.
    dtype = normalizeDtype(dtype);
    shape = normalizeShape(shape);
    chunks = normalizeChunks(chunks, shape);
    order = normalizeOrder(order);
    fillValue = normalizeFillValue(fillValue);
    if (filters !== null && filters.length > 0) {
        throw Error("Filters are not supported yet");
    }
    let serializedFillValue = fillValue;
    if (typeof fillValue === "number") {
        if (Number.isNaN(fillValue))
            serializedFillValue = "NaN";
        if (Number.POSITIVE_INFINITY === fillValue)
            serializedFillValue = "Infinity";
        if (Number.NEGATIVE_INFINITY === fillValue)
            serializedFillValue = "-Infinity";
    }
    filters = null;
    const metadata = {
        zarr_format: 2,
        shape: shape,
        chunks: chunks,
        dtype: dtype,
        fill_value: serializedFillValue,
        order: order,
        compressor: compressor,
        filters: filters,
    };
    const metaKey = pathToPrefix(path) + ARRAY_META_KEY;
    await store.setItem(metaKey, JSON.stringify(metadata));
}
/**
 *
 * Initialize an array store with the given configuration. Note that this is a low-level
 * function and there should be no need to call this directly from user code
 */
async function initArray(store, shape, chunks, dtype, path = null, compressor = null, fillValue = null, order = "C", overwrite = false, chunkStore = null, filters = null) {
    path = normalizeStoragePath(path);
    await requireParentGroup(store, path, chunkStore, overwrite);
    await initArrayMetadata(store, shape, chunks, dtype, path, compressor, fillValue, order, overwrite, chunkStore, filters);
}

function parseMetadata(s) {
    // Here we allow that a store may return an already-parsed metadata object,
    // or a string of JSON that we will parse here. We allow for an already-parsed
    // object to accommodate a consolidated metadata store, where all the metadata for
    // all groups and arrays will already have been parsed from JSON.
    if (typeof s !== 'string') {
        // tslint:disable-next-line: strict-type-predicates
        if (IS_NODE && Buffer.isBuffer(s)) {
            return JSON.parse(s.toString());
        }
        else if (s instanceof ArrayBuffer) {
            const utf8Decoder = new TextDecoder();
            const bytes = new Uint8Array(s);
            return JSON.parse(utf8Decoder.decode(bytes));
        }
        else {
            return s;
        }
    }
    return JSON.parse(s);
}

/**
 * Class providing access to user attributes on an array or group. Should not be
 * instantiated directly, will be available via the `.attrs` property of an array or
 * group.
 */
class Attributes {
    constructor(store, key, readOnly, cache = true) {
        this.store = store;
        this.key = key;
        this.readOnly = readOnly;
        this.cache = cache;
        this.cachedValue = null;
    }
    /**
     * Retrieve all attributes as a JSON object.
     */
    async asObject() {
        if (this.cache && this.cachedValue !== null) {
            return this.cachedValue;
        }
        const o = await this.getNoSync();
        if (this.cache) {
            this.cachedValue = o;
        }
        return o;
    }
    async getNoSync() {
        try {
            const data = await this.store.getItem(this.key);
            // TODO fix typing?
            return parseMetadata(data);
        }
        catch (error) {
            return {};
        }
    }
    async setNoSync(key, value) {
        const d = await this.getNoSync();
        d[key] = value;
        await this.putNoSync(d);
        return true;
    }
    async putNoSync(m) {
        await this.store.setItem(this.key, JSON.stringify(m));
        if (this.cache) {
            this.cachedValue = m;
        }
    }
    async delNoSync(key) {
        const d = await this.getNoSync();
        delete d[key];
        await this.putNoSync(d);
        return true;
    }
    /**
     * Overwrite all attributes with the provided object in a single operation
     */
    async put(d) {
        if (this.readOnly) {
            throw new PermissionError("attributes are read-only");
        }
        return this.putNoSync(d);
    }
    async setItem(key, value) {
        if (this.readOnly) {
            throw new PermissionError("attributes are read-only");
        }
        return this.setNoSync(key, value);
    }
    async getItem(key) {
        return (await this.asObject())[key];
    }
    async deleteItem(key) {
        if (this.readOnly) {
            throw new PermissionError("attributes are read-only");
        }
        return this.delNoSync(key);
    }
    async containsItem(key) {
        return (await this.asObject())[key] !== undefined;
    }
    proxy() {
        return createProxy(this);
    }
}

const DTYPE_TYPEDARRAY_MAPPING = {
    '|b': Int8Array,
    '|B': Uint8Array,
    '|u1': Uint8Array,
    '|i1': Int8Array,
    '<b': Int8Array,
    '<B': Uint8Array,
    '<u1': Uint8Array,
    '<i1': Int8Array,
    '<u2': Uint16Array,
    '<i2': Int16Array,
    '<u4': Uint32Array,
    '<i4': Int32Array,
    '<f4': Float32Array,
    '<f8': Float64Array,
    '>b': Int8Array,
    '>B': Uint8Array,
    '>u1': Uint8Array,
    '>i1': Int8Array,
    '>u2': Uint16Array,
    '>i2': Int16Array,
    '>u4': Uint32Array,
    '>i4': Int32Array,
    '>f4': Float32Array,
    '>f8': Float64Array
};
/*
 * Called by NestedArray and RawArray constructors only.
 * We byte-swap the buffer of a store after decoding
 * since TypedArray views are little endian only.
 *
 * This means NestedArrays and RawArrays will always be little endian,
 * unless a numpy-like library comes around and can handle endianess
 * for buffer views.
 */
function getTypedArrayDtypeString(t) {
    // Favour the types below instead of small and big B
    if (t instanceof Uint8Array)
        return '|u1';
    if (t instanceof Int8Array)
        return '|i1';
    if (t instanceof Uint16Array)
        return '<u2';
    if (t instanceof Int16Array)
        return '<i2';
    if (t instanceof Uint32Array)
        return '<u4';
    if (t instanceof Int32Array)
        return '<i4';
    if (t instanceof Float32Array)
        return '<f4';
    if (t instanceof Float64Array)
        return '<f8';
    throw new ValueError('Mapping for TypedArray to Dtypestring not known');
}

/**
 * Digs down into the dimensions of given array to find the TypedArray and returns its constructor.
 * Better to use sparingly.
 */
function getNestedArrayConstructor(arr) {
    // TODO fix typing
    // tslint:disable-next-line: strict-type-predicates
    if (arr.byteLength !== undefined) {
        return (arr).constructor;
    }
    return getNestedArrayConstructor(arr[0]);
}
/**
 * Returns both the slice result and new output shape
 * @param arr NestedArray to slice
 * @param shape The shape of the NestedArray
 * @param selection
 */
function sliceNestedArray(arr, shape, selection) {
    // This translates "...", ":", null into a list of slices or integer selections
    const normalizedSelection = normalizeArraySelection(selection, shape);
    const [sliceIndices, outShape] = selectionToSliceIndices(normalizedSelection, shape);
    const outArray = _sliceNestedArray(arr, shape, sliceIndices);
    return [outArray, outShape];
}
function _sliceNestedArray(arr, shape, selection) {
    const currentSlice = selection[0];
    // Is this necessary?
    // // This is possible when a slice list is passed shorter than the amount of dimensions
    // // tslint:disable-next-line: strict-type-predicates
    // if (currentSlice === undefined) {
    //     return arr.slice();
    // }
    // When a number is passed that dimension is squeezed
    if (typeof currentSlice === "number") {
        // Assume already normalized integer selection here.
        if (shape.length === 1) {
            return arr[currentSlice];
        }
        else {
            return _sliceNestedArray(arr[currentSlice], shape.slice(1), selection.slice(1));
        }
    }
    const [from, to, step, outputSize] = currentSlice;
    if (outputSize === 0) {
        return new (getNestedArrayConstructor(arr))(0);
    }
    if (shape.length === 1) {
        if (step === 1) {
            return arr.slice(from, to);
        }
        const newArrData = new arr.constructor(outputSize);
        for (let i = 0; i < outputSize; i++) {
            newArrData[i] = arr[from + i * step];
        }
        return newArrData;
    }
    let newArr = new Array(outputSize);
    for (let i = 0; i < outputSize; i++) {
        newArr[i] = _sliceNestedArray(arr[from + i * step], shape.slice(1), selection.slice(1));
    }
    // This is necessary to ensure that the return value is a NestedArray if the last dimension is squeezed
    // e.g. shape [2,1] with slice [:, 0] would otherwise result in a list of numbers instead of a valid NestedArray
    if (outputSize > 0 && typeof newArr[0] === "number") {
        const typedArrayConstructor = arr[0].constructor;
        newArr = typedArrayConstructor.from(newArr);
    }
    return newArr;
}
function setNestedArrayToScalar(dstArr, value, destShape, selection) {
    // This translates "...", ":", null, etc into a list of slices.
    const normalizedSelection = normalizeArraySelection(selection, destShape, true);
    // Above we force the results to be SliceIndicesIndices only, without integer selections making this cast is safe.
    const [sliceIndices, _outShape] = selectionToSliceIndices(normalizedSelection, destShape);
    _setNestedArrayToScalar(dstArr, value, destShape, sliceIndices);
}
function setNestedArray(dstArr, sourceArr, destShape, sourceShape, selection) {
    // This translates "...", ":", null, etc into a list of slices.
    const normalizedSelection = normalizeArraySelection(selection, destShape, false);
    const [sliceIndices, outShape] = selectionToSliceIndices(normalizedSelection, destShape);
    // TODO: replace with non stringify equality check
    if (JSON.stringify(outShape) !== JSON.stringify(sourceShape)) {
        throw new ValueError(`Shape mismatch in target and source NestedArray: ${outShape} and ${sourceShape}`);
    }
    _setNestedArray(dstArr, sourceArr, destShape, sliceIndices);
}
function _setNestedArray(dstArr, sourceArr, shape, selection) {
    const currentSlice = selection[0];
    if (typeof sourceArr === "number") {
        _setNestedArrayToScalar(dstArr, sourceArr, shape, selection.map(x => typeof x === "number" ? [x, x + 1, 1, 1] : x));
        return;
    }
    // This dimension is squeezed.
    if (typeof currentSlice === "number") {
        _setNestedArray(dstArr[currentSlice], sourceArr, shape.slice(1), selection.slice(1));
        return;
    }
    const [from, _to, step, outputSize] = currentSlice;
    if (shape.length === 1) {
        if (step === 1) {
            dstArr.set(sourceArr, from);
        }
        else {
            for (let i = 0; i < outputSize; i++) {
                dstArr[from + i * step] = (sourceArr)[i];
            }
        }
        return;
    }
    for (let i = 0; i < outputSize; i++) {
        _setNestedArray(dstArr[from + i * step], sourceArr[i], shape.slice(1), selection.slice(1));
    }
}
function _setNestedArrayToScalar(dstArr, value, shape, selection) {
    const currentSlice = selection[0];
    const [from, to, step, outputSize] = currentSlice;
    if (shape.length === 1) {
        if (step === 1) {
            dstArr.fill(value, from, to);
        }
        else {
            for (let i = 0; i < outputSize; i++) {
                dstArr[from + i * step] = value;
            }
        }
        return;
    }
    for (let i = 0; i < outputSize; i++) {
        _setNestedArrayToScalar(dstArr[from + i * step], value, shape.slice(1), selection.slice(1));
    }
}
function flattenNestedArray(arr, shape, constr) {
    if (constr === undefined) {
        constr = getNestedArrayConstructor(arr);
    }
    const size = shape.reduce((x, y) => x * y, 1);
    const outArr = new constr(size);
    _flattenNestedArray(arr, shape, outArr, 0);
    return outArr;
}
function _flattenNestedArray(arr, shape, outArr, offset) {
    if (shape.length === 1) {
        // This is only ever reached if called with rank 1 shape, never reached through recursion.
        // We just slice set the array directly from one level above to save some function calls.
        outArr.set(arr, offset);
        return;
    }
    if (shape.length === 2) {
        for (let i = 0; i < shape[0]; i++) {
            outArr.set(arr[i], offset + shape[1] * i);
        }
        return arr;
    }
    const nextShape = shape.slice(1);
    // Small optimization possible here: this can be precomputed for different levels of depth and passed on.
    const mult = nextShape.reduce((x, y) => x * y, 1);
    for (let i = 0; i < shape[0]; i++) {
        _flattenNestedArray(arr[i], nextShape, outArr, offset + mult * i);
    }
    return arr;
}

class NestedArray {
    constructor(data, shape, dtype) {
        const dataIsTypedArray = data !== null && !!data.BYTES_PER_ELEMENT;
        if (shape === undefined) {
            if (!dataIsTypedArray) {
                throw new ValueError("Shape argument is required unless you pass in a TypedArray");
            }
            shape = [data.length];
        }
        if (dtype === undefined) {
            if (!dataIsTypedArray) {
                throw new ValueError("Dtype argument is required unless you pass in a TypedArray");
            }
            dtype = getTypedArrayDtypeString(data);
        }
        shape = normalizeShape(shape);
        this.shape = shape;
        this.dtype = dtype;
        if (dataIsTypedArray && shape.length !== 1) {
            data = data.buffer;
        }
        // Zero dimension array.. they are a bit weirdly represented now, they will only ever occur internally
        if (this.shape.length === 0) {
            this.data = new DTYPE_TYPEDARRAY_MAPPING[dtype](1);
        }
        else if (
        // tslint:disable-next-line: strict-type-predicates
        (IS_NODE && Buffer.isBuffer(data))
            || data instanceof ArrayBuffer
            || data === null
            || data.toString().startsWith("[object ArrayBuffer]") // Necessary for Node.js for some reason..
        ) {
            // Create from ArrayBuffer or Buffer
            const numShapeElements = shape.reduce((x, y) => x * y, 1);
            if (data === null) {
                data = new ArrayBuffer(numShapeElements * parseInt(dtype[dtype.length - 1], 10));
            }
            const numDataElements = data.byteLength / parseInt(dtype[dtype.length - 1], 10);
            if (numShapeElements !== numDataElements) {
                throw new Error(`Buffer has ${numDataElements} of dtype ${dtype}, shape is too large or small ${shape} (flat=${numShapeElements})`);
            }
            const typeConstructor = DTYPE_TYPEDARRAY_MAPPING[dtype];
            this.data = createNestedArray(data, typeConstructor, shape);
        }
        else {
            this.data = data;
        }
    }
    get(selection) {
        const [sliceResult, outShape] = sliceNestedArray(this.data, this.shape, selection);
        if (outShape.length === 0) {
            return sliceResult;
        }
        else {
            return new NestedArray(sliceResult, outShape, this.dtype);
        }
    }
    set(selection = null, value) {
        if (selection === null) {
            selection = [slice(null)];
        }
        if (typeof value === "number") {
            if (this.shape.length === 0) {
                // Zero dimension array..
                this.data[0] = value;
            }
            else {
                setNestedArrayToScalar(this.data, value, this.shape, selection);
            }
        }
        else {
            setNestedArray(this.data, value.data, this.shape, value.shape, selection);
        }
    }
    flatten() {
        if (this.shape.length === 1) {
            return this.data;
        }
        return flattenNestedArray(this.data, this.shape, DTYPE_TYPEDARRAY_MAPPING[this.dtype]);
    }
    /**
     * Currently only supports a single integer as the size, TODO: support start, stop, step.
     */
    static arange(size, dtype = "<i4") {
        const constr = DTYPE_TYPEDARRAY_MAPPING[dtype];
        const data = rangeTypedArray([size], constr);
        return new NestedArray(data, [size], dtype);
    }
}
/**
 * Creates a TypedArray with values 0 through N where N is the product of the shape.
 */
function rangeTypedArray(shape, tContructor) {
    const size = shape.reduce((x, y) => x * y, 1);
    const data = new tContructor(size);
    data.set([...Array(size).keys()]); // Sets range 0,1,2,3,4,5
    return data;
}
/**
 * Creates multi-dimensional (rank > 1) array given input data and shape recursively.
 * What it does is create a Array<Array<...<Array<Uint8Array>>> or some other typed array.
 * This is for internal use, there should be no need to call this from user code.
 * @param data a buffer containing the data for this array.
 * @param t constructor for the datatype of choice
 * @param shape list of numbers describing the size in each dimension
 * @param offset in bytes for this dimension
 */
function createNestedArray(data, t, shape, offset = 0) {
    if (shape.length === 1) {
        // This is only ever reached if called with rank 1 shape, never reached through recursion.
        // We just slice set the array directly from one level above to save some function calls.
        return new t(data.slice(offset, offset + shape[0] * t.BYTES_PER_ELEMENT));
    }
    const arr = new Array(shape[0]);
    if (shape.length === 2) {
        for (let i = 0; i < shape[0]; i++) {
            arr[i] = new t(data.slice(offset + shape[1] * i * t.BYTES_PER_ELEMENT, offset + shape[1] * (i + 1) * t.BYTES_PER_ELEMENT));
        }
        return arr;
    }
    const nextShape = shape.slice(1);
    // Small optimization possible here: this can be precomputed for different levels of depth and passed on.
    const mult = nextShape.reduce((x, y) => x * y, 1);
    for (let i = 0; i < shape[0]; i++) {
        arr[i] = createNestedArray(data, t, nextShape, offset + mult * i * t.BYTES_PER_ELEMENT);
    }
    return arr;
}

function setRawArrayToScalar(dstArr, dstStrides, dstShape, dstSelection, value) {
    // This translates "...", ":", null, etc into a list of slices.
    const normalizedSelection = normalizeArraySelection(dstSelection, dstShape, true);
    const [sliceIndices] = selectionToSliceIndices(normalizedSelection, dstShape);
    // Above we force the results to be SliceIndicesIndices only, without integer selections making this cast is safe.
    _setRawArrayToScalar(value, dstArr, dstStrides, sliceIndices);
}
function setRawArray(dstArr, dstStrides, dstShape, dstSelection, sourceArr, sourceStrides, sourceShape) {
    // This translates "...", ":", null, etc into a list of slices.
    const normalizedDstSelection = normalizeArraySelection(dstSelection, dstShape, false);
    const [dstSliceIndices, outShape] = selectionToSliceIndices(normalizedDstSelection, dstShape);
    // TODO: replace with non stringify equality check
    if (JSON.stringify(outShape) !== JSON.stringify(sourceShape)) {
        throw new ValueError(`Shape mismatch in target and source RawArray: ${outShape} and ${sourceShape}`);
    }
    _setRawArray(dstArr, dstStrides, dstSliceIndices, sourceArr, sourceStrides);
}
function setRawArrayFromChunkItem(dstArr, dstStrides, dstShape, dstSelection, sourceArr, sourceStrides, sourceShape, sourceSelection) {
    // This translates "...", ":", null, etc into a list of slices.
    const normalizedDstSelection = normalizeArraySelection(dstSelection, dstShape, true);
    // Above we force the results to be dstSliceIndices only, without integer selections making this cast is safe.
    const [dstSliceIndices] = selectionToSliceIndices(normalizedDstSelection, dstShape);
    const normalizedSourceSelection = normalizeArraySelection(sourceSelection, sourceShape, false);
    const [sourceSliceIndicies] = selectionToSliceIndices(normalizedSourceSelection, sourceShape);
    // TODO check to ensure chunk and dest selection are same shape?
    // As is, this only gets called in ZarrArray.getRaw where this condition should be ensured, and check might hinder performance.
    _setRawArrayFromChunkItem(dstArr, dstStrides, dstSliceIndices, sourceArr, sourceStrides, sourceSliceIndicies);
}
function _setRawArrayToScalar(value, dstArr, dstStrides, dstSliceIndices) {
    const [currentDstSlice, ...nextDstSliceIndices] = dstSliceIndices;
    const [currentDstStride, ...nextDstStrides] = dstStrides;
    const [from, _to, step, outputSize] = currentDstSlice;
    if (dstStrides.length === 1) {
        if (step === 1 && currentDstStride === 1) {
            dstArr.fill(value, from, from + outputSize);
        }
        else {
            for (let i = 0; i < outputSize; i++) {
                dstArr[currentDstStride * (from + (step * i))] = value;
            }
        }
        return;
    }
    for (let i = 0; i < outputSize; i++) {
        _setRawArrayToScalar(value, dstArr.subarray(currentDstStride * (from + (step * i))), nextDstStrides, nextDstSliceIndices);
    }
}
function _setRawArray(dstArr, dstStrides, dstSliceIndices, sourceArr, sourceStrides) {
    if (dstSliceIndices.length === 0) {
        dstArr.set(sourceArr);
        return;
    }
    const [currentDstSlice, ...nextDstSliceIndices] = dstSliceIndices;
    const [currentDstStride, ...nextDstStrides] = dstStrides;
    // This dimension is squeezed.
    if (typeof currentDstSlice === "number") {
        _setRawArray(dstArr.subarray(currentDstSlice * currentDstStride), nextDstStrides, nextDstSliceIndices, sourceArr, sourceStrides);
        return;
    }
    const [currentSourceStride, ...nextSourceStrides] = sourceStrides;
    const [from, _to, step, outputSize] = currentDstSlice;
    if (dstStrides.length === 1) {
        if (step === 1 && currentDstStride === 1 && currentSourceStride === 1) {
            dstArr.set(sourceArr.subarray(0, outputSize), from);
        }
        else {
            for (let i = 0; i < outputSize; i++) {
                dstArr[currentDstStride * (from + (step * i))] = sourceArr[currentSourceStride * i];
            }
        }
        return;
    }
    for (let i = 0; i < outputSize; i++) {
        // Apply strides as above, using both destination and source-specific strides.
        _setRawArray(dstArr.subarray(currentDstStride * (from + (i * step))), nextDstStrides, nextDstSliceIndices, sourceArr.subarray(currentSourceStride * i), nextSourceStrides);
    }
}
function _setRawArrayFromChunkItem(dstArr, dstStrides, dstSliceIndices, sourceArr, sourceStrides, sourceSliceIndices) {
    if (sourceSliceIndices.length === 0) {
        // Case when last source dimension is squeezed
        dstArr.set(sourceArr.subarray(0, dstArr.length));
        return;
    }
    // Get current indicies and strides for both destination and source arrays
    const [currentDstSlice, ...nextDstSliceIndices] = dstSliceIndices;
    const [currentSourceSlice, ...nextSourceSliceIndices] = sourceSliceIndices;
    const [currentDstStride, ...nextDstStrides] = dstStrides;
    const [currentSourceStride, ...nextSourceStrides] = sourceStrides;
    // This source dimension is squeezed
    if (typeof currentSourceSlice === "number") {
        /*
        Sets dimension offset for squeezed dimension.

        Ex. if 0th dimension is squeezed to 2nd index (numpy : arr[2,i])

            sourceArr[stride[0]* 2 + i] --> sourceArr.subarray(stride[0] * 2)[i] (sourceArr[i] in next call)

        Thus, subsequent squeezed dims are appended to the source offset.
        */
        _setRawArrayFromChunkItem(
        // Don't update destination offset/slices, just source
        dstArr, dstStrides, dstSliceIndices, sourceArr.subarray(currentSourceStride * currentSourceSlice), nextSourceStrides, nextSourceSliceIndices);
        return;
    }
    const [from, _to, step, outputSize] = currentDstSlice; // just need start and size
    const [sfrom, _sto, sstep, _soutputSize] = currentSourceSlice; // Will always be subset of dst, so don't need output size just start
    if (dstStrides.length === 1 && sourceStrides.length === 1) {
        if (step === 1 && currentDstStride === 1 && sstep === 1 && currentSourceStride === 1) {
            dstArr.set(sourceArr.subarray(sfrom, sfrom + outputSize), from);
        }
        else {
            for (let i = 0; i < outputSize; i++) {
                dstArr[currentDstStride * (from + (step * i))] = sourceArr[currentSourceStride * (sfrom + (sstep * i))];
            }
        }
        return;
    }
    for (let i = 0; i < outputSize; i++) {
        // Apply strides as above, using both destination and source-specific strides.
        _setRawArrayFromChunkItem(dstArr.subarray(currentDstStride * (from + (i * step))), nextDstStrides, nextDstSliceIndices, sourceArr.subarray(currentSourceStride * (sfrom + (i * sstep))), nextSourceStrides, nextSourceSliceIndices);
    }
}

class RawArray {
    constructor(data, shape, dtype, strides) {
        const dataIsTypedArray = data !== null && !!data.BYTES_PER_ELEMENT;
        if (shape === undefined) {
            if (!dataIsTypedArray) {
                throw new ValueError("Shape argument is required unless you pass in a TypedArray");
            }
            shape = [data.length];
        }
        shape = normalizeShape(shape);
        if (dtype === undefined) {
            if (!dataIsTypedArray) {
                throw new ValueError("Dtype argument is required unless you pass in a TypedArray");
            }
            dtype = getTypedArrayDtypeString(data);
        }
        if (strides === undefined) {
            strides = getStrides(shape);
        }
        this.shape = shape;
        this.dtype = dtype;
        this.strides = strides;
        if (dataIsTypedArray && shape.length !== 1) {
            data = data.buffer;
        }
        // Zero dimension array.. they are a bit weirdly represented now, they will only ever occur internally
        if (this.shape.length === 0) {
            this.data = new DTYPE_TYPEDARRAY_MAPPING[dtype](1);
        }
        else if (
        // tslint:disable-next-line: strict-type-predicates
        (IS_NODE && Buffer.isBuffer(data))
            || data instanceof ArrayBuffer
            || data === null
            || data.toString().startsWith("[object ArrayBuffer]") // Necessary for Node.js for some reason..
        ) {
            // Create from ArrayBuffer or Buffer
            const numShapeElements = shape.reduce((x, y) => x * y, 1);
            if (data === null) {
                data = new ArrayBuffer(numShapeElements * parseInt(dtype[dtype.length - 1], 10));
            }
            const numDataElements = data.byteLength / parseInt(dtype[dtype.length - 1], 10);
            if (numShapeElements !== numDataElements) {
                throw new Error(`Buffer has ${numDataElements} of dtype ${dtype}, shape is too large or small ${shape} (flat=${numShapeElements})`);
            }
            const typeConstructor = DTYPE_TYPEDARRAY_MAPPING[dtype];
            this.data = new typeConstructor(data);
        }
        else {
            this.data = data;
        }
    }
    set(selection = null, value, chunkSelection) {
        if (selection === null) {
            selection = [slice(null)];
        }
        if (typeof value === "number") {
            if (this.shape.length === 0) {
                // Zero dimension array..
                this.data[0] = value;
            }
            else {
                setRawArrayToScalar(this.data, this.strides, this.shape, selection, value);
            }
        }
        else if (value instanceof RawArray && chunkSelection) {
            // Copy directly from decoded chunk to destination array
            setRawArrayFromChunkItem(this.data, this.strides, this.shape, selection, value.data, value.strides, value.shape, chunkSelection);
        }
        else {
            setRawArray(this.data, this.strides, this.shape, selection, value.data, value.strides, value.shape);
        }
    }
}

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var eventemitter3 = createCommonjsModule(function (module) {

var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
{
  module.exports = EventEmitter;
}
});

var pFinally = (promise, onFinally) => {
	onFinally = onFinally || (() => {});

	return promise.then(
		val => new Promise(resolve => {
			resolve(onFinally());
		}).then(() => val),
		err => new Promise(resolve => {
			resolve(onFinally());
		}).then(() => {
			throw err;
		})
	);
};

class TimeoutError extends Error {
	constructor(message) {
		super(message);
		this.name = 'TimeoutError';
	}
}

const pTimeout = (promise, milliseconds, fallback) => new Promise((resolve, reject) => {
	if (typeof milliseconds !== 'number' || milliseconds < 0) {
		throw new TypeError('Expected `milliseconds` to be a positive number');
	}

	if (milliseconds === Infinity) {
		resolve(promise);
		return;
	}

	const timer = setTimeout(() => {
		if (typeof fallback === 'function') {
			try {
				resolve(fallback());
			} catch (error) {
				reject(error);
			}

			return;
		}

		const message = typeof fallback === 'string' ? fallback : `Promise timed out after ${milliseconds} milliseconds`;
		const timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);

		if (typeof promise.cancel === 'function') {
			promise.cancel();
		}

		reject(timeoutError);
	}, milliseconds);

	// TODO: Use native `finally` keyword when targeting Node.js 10
	pFinally(
		// eslint-disable-next-line promise/prefer-await-to-then
		promise.then(resolve, reject),
		() => {
			clearTimeout(timer);
		}
	);
});

var pTimeout_1 = pTimeout;
// TODO: Remove this for the next major release
var default_1 = pTimeout;

var TimeoutError_1 = TimeoutError;
pTimeout_1.default = default_1;
pTimeout_1.TimeoutError = TimeoutError_1;

var lowerBound_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
// Port of lower_bound from http://en.cppreference.com/w/cpp/algorithm/lower_bound
// Used to compute insertion index to keep queue sorted after insertion
function lowerBound(array, value, comparator) {
    let first = 0;
    let count = array.length;
    while (count > 0) {
        const step = (count / 2) | 0;
        let it = first + step;
        if (comparator(array[it], value) <= 0) {
            first = ++it;
            count -= step + 1;
        }
        else {
            count = step;
        }
    }
    return first;
}
exports.default = lowerBound;
});

unwrapExports(lowerBound_1);

var priorityQueue = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

class PriorityQueue {
    constructor() {
        this._queue = [];
    }
    enqueue(run, options) {
        options = Object.assign({ priority: 0 }, options);
        const element = {
            priority: options.priority,
            run
        };
        if (this.size && this._queue[this.size - 1].priority >= options.priority) {
            this._queue.push(element);
            return;
        }
        const index = lowerBound_1.default(this._queue, element, (a, b) => b.priority - a.priority);
        this._queue.splice(index, 0, element);
    }
    dequeue() {
        const item = this._queue.shift();
        return item && item.run;
    }
    get size() {
        return this._queue.length;
    }
}
exports.default = PriorityQueue;
});

unwrapExports(priorityQueue);

var dist = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });



const empty = () => { };
const timeoutError = new pTimeout_1.default.TimeoutError();
/**
Promise queue with concurrency control.
*/
class PQueue extends eventemitter3 {
    constructor(options) {
        super();
        this._intervalCount = 0;
        this._intervalEnd = 0;
        this._pendingCount = 0;
        this._resolveEmpty = empty;
        this._resolveIdle = empty;
        // eslint-disable-next-line @typescript-eslint/no-object-literal-type-assertion
        options = Object.assign({ carryoverConcurrencyCount: false, intervalCap: Infinity, interval: 0, concurrency: Infinity, autoStart: true, queueClass: priorityQueue.default }, options
        // TODO: Remove this `as`.
        );
        if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {
            throw new TypeError(`Expected \`intervalCap\` to be a number from 1 and up, got \`${options.intervalCap}\` (${typeof options.intervalCap})`);
        }
        if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {
            throw new TypeError(`Expected \`interval\` to be a finite number >= 0, got \`${options.interval}\` (${typeof options.interval})`);
        }
        this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;
        this._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;
        this._intervalCap = options.intervalCap;
        this._interval = options.interval;
        this._queue = new options.queueClass();
        this._queueClass = options.queueClass;
        this.concurrency = options.concurrency;
        this._timeout = options.timeout;
        this._throwOnTimeout = options.throwOnTimeout === true;
        this._isPaused = options.autoStart === false;
    }
    get _doesIntervalAllowAnother() {
        return this._isIntervalIgnored || this._intervalCount < this._intervalCap;
    }
    get _doesConcurrentAllowAnother() {
        return this._pendingCount < this._concurrency;
    }
    _next() {
        this._pendingCount--;
        this._tryToStartAnother();
    }
    _resolvePromises() {
        this._resolveEmpty();
        this._resolveEmpty = empty;
        if (this._pendingCount === 0) {
            this._resolveIdle();
            this._resolveIdle = empty;
        }
    }
    _onResumeInterval() {
        this._onInterval();
        this._initializeIntervalIfNeeded();
        this._timeoutId = undefined;
    }
    _isIntervalPaused() {
        const now = Date.now();
        if (this._intervalId === undefined) {
            const delay = this._intervalEnd - now;
            if (delay < 0) {
                // Act as the interval was done
                // We don't need to resume it here because it will be resumed on line 160
                this._intervalCount = (this._carryoverConcurrencyCount) ? this._pendingCount : 0;
            }
            else {
                // Act as the interval is pending
                if (this._timeoutId === undefined) {
                    this._timeoutId = setTimeout(() => {
                        this._onResumeInterval();
                    }, delay);
                }
                return true;
            }
        }
        return false;
    }
    _tryToStartAnother() {
        if (this._queue.size === 0) {
            // We can clear the interval ("pause")
            // Because we can redo it later ("resume")
            if (this._intervalId) {
                clearInterval(this._intervalId);
            }
            this._intervalId = undefined;
            this._resolvePromises();
            return false;
        }
        if (!this._isPaused) {
            const canInitializeInterval = !this._isIntervalPaused();
            if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {
                this.emit('active');
                this._queue.dequeue()();
                if (canInitializeInterval) {
                    this._initializeIntervalIfNeeded();
                }
                return true;
            }
        }
        return false;
    }
    _initializeIntervalIfNeeded() {
        if (this._isIntervalIgnored || this._intervalId !== undefined) {
            return;
        }
        this._intervalId = setInterval(() => {
            this._onInterval();
        }, this._interval);
        this._intervalEnd = Date.now() + this._interval;
    }
    _onInterval() {
        if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {
            clearInterval(this._intervalId);
            this._intervalId = undefined;
        }
        this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
        this._processQueue();
    }
    /**
    Executes all queued functions until it reaches the limit.
    */
    _processQueue() {
        // eslint-disable-next-line no-empty
        while (this._tryToStartAnother()) { }
    }
    get concurrency() {
        return this._concurrency;
    }
    set concurrency(newConcurrency) {
        if (!(typeof newConcurrency === 'number' && newConcurrency >= 1)) {
            throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${newConcurrency}\` (${typeof newConcurrency})`);
        }
        this._concurrency = newConcurrency;
        this._processQueue();
    }
    /**
    Adds a sync or async task to the queue. Always returns a promise.
    */
    async add(fn, options = {}) {
        return new Promise((resolve, reject) => {
            const run = async () => {
                this._pendingCount++;
                this._intervalCount++;
                try {
                    const operation = (this._timeout === undefined && options.timeout === undefined) ? fn() : pTimeout_1.default(Promise.resolve(fn()), (options.timeout === undefined ? this._timeout : options.timeout), () => {
                        if (options.throwOnTimeout === undefined ? this._throwOnTimeout : options.throwOnTimeout) {
                            reject(timeoutError);
                        }
                        return undefined;
                    });
                    resolve(await operation);
                }
                catch (error) {
                    reject(error);
                }
                this._next();
            };
            this._queue.enqueue(run, options);
            this._tryToStartAnother();
        });
    }
    /**
    Same as `.add()`, but accepts an array of sync or async functions.

    @returns A promise that resolves when all functions are resolved.
    */
    async addAll(functions, options) {
        return Promise.all(functions.map(async (function_) => this.add(function_, options)));
    }
    /**
    Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)
    */
    start() {
        if (!this._isPaused) {
            return this;
        }
        this._isPaused = false;
        this._processQueue();
        return this;
    }
    /**
    Put queue execution on hold.
    */
    pause() {
        this._isPaused = true;
    }
    /**
    Clear the queue.
    */
    clear() {
        this._queue = new this._queueClass();
    }
    /**
    Can be called multiple times. Useful if you for example add additional items at a later time.

    @returns A promise that settles when the queue becomes empty.
    */
    async onEmpty() {
        // Instantly resolve if the queue is empty
        if (this._queue.size === 0) {
            return;
        }
        return new Promise(resolve => {
            const existingResolve = this._resolveEmpty;
            this._resolveEmpty = () => {
                existingResolve();
                resolve();
            };
        });
    }
    /**
    The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.

    @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.
    */
    async onIdle() {
        // Instantly resolve if none pending and if nothing else is queued
        if (this._pendingCount === 0 && this._queue.size === 0) {
            return;
        }
        return new Promise(resolve => {
            const existingResolve = this._resolveIdle;
            this._resolveIdle = () => {
                existingResolve();
                resolve();
            };
        });
    }
    /**
    Size of the queue.
    */
    get size() {
        return this._queue.size;
    }
    /**
    Number of pending promises.
    */
    get pending() {
        return this._pendingCount;
    }
    /**
    Whether the queue is currently paused.
    */
    get isPaused() {
        return this._isPaused;
    }
    /**
    Set the timeout for future operations.
    */
    set timeout(milliseconds) {
        this._timeout = milliseconds;
    }
    get timeout() {
        return this._timeout;
    }
}
exports.default = PQueue;
});

var PQueue = unwrapExports(dist);

class ZarrArray {
    /**
     * Instantiate an array from an initialized store.
     * @param store Array store, already initialized.
     * @param path Storage path.
     * @param metadata The initial value for the metadata
     * @param readOnly True if array should be protected against modification.
     * @param chunkStore Separate storage for chunks. If not provided, `store` will be used for storage of both chunks and metadata.
     * @param cacheMetadata If true (default), array configuration metadata will be cached for the lifetime of the object.
     * If false, array metadata will be reloaded prior to all data access and modification operations (may incur overhead depending on storage and data access pattern).
     * @param cacheAttrs If true (default), user attributes will be cached for attribute read operations.
     * If false, user attributes are reloaded from the store prior to all attribute read operations.
     */
    constructor(store, path = null, metadata, readOnly = false, chunkStore = null, cacheMetadata = true, cacheAttrs = true) {
        // N.B., expect at this point store is fully initialized with all
        // configuration metadata fully specified and normalized
        this.store = store;
        this._chunkStore = chunkStore;
        this.path = normalizeStoragePath(path);
        this.keyPrefix = pathToPrefix(this.path);
        this.readOnly = readOnly;
        this.cacheMetadata = cacheMetadata;
        this.cacheAttrs = cacheAttrs;
        this.meta = metadata;
        if (this.meta.compressor !== null) {
            this.compressor = getCodec(this.meta.compressor);
        }
        else {
            this.compressor = null;
        }
        const attrKey = this.keyPrefix + ATTRS_META_KEY;
        this.attrs = new Attributes(this.store, attrKey, this.readOnly, cacheAttrs);
    }
    /**
     * A `Store` providing the underlying storage for array chunks.
     */
    get chunkStore() {
        if (this._chunkStore) {
            return this._chunkStore;
        }
        return this.store;
    }
    /**
     * Array name following h5py convention.
     */
    get name() {
        if (this.path.length > 0) {
            if (this.path[0] !== "/") {
                return "/" + this.path;
            }
            return this.path;
        }
        return null;
    }
    /**
     * Final component of name.
     */
    get basename() {
        const name = this.name;
        if (name === null) {
            return null;
        }
        const parts = name.split("/");
        return parts[parts.length - 1];
    }
    /**
     * "A list of integers describing the length of each dimension of the array.
     */
    get shape() {
        // this.refreshMetadata();
        return this.meta.shape;
    }
    /**
     * A list of integers describing the length of each dimension of a chunk of the array.
     */
    get chunks() {
        return this.meta.chunks;
    }
    /**
     * Integer describing how many element a chunk contains
     */
    get chunkSize() {
        return this.chunks.reduce((x, y) => x * y, 1);
    }
    /**
     *  The NumPy data type.
     */
    get dtype() {
        return this.meta.dtype;
    }
    /**
     *  A value used for uninitialized portions of the array.
     */
    get fillValue() {
        const fillTypeValue = this.meta.fill_value;
        // TODO extract into function
        if (fillTypeValue === "NaN") {
            return NaN;
        }
        else if (fillTypeValue === "Infinity") {
            return Infinity;
        }
        else if (fillTypeValue === "-Infinity") {
            return -Infinity;
        }
        return this.meta.fill_value;
    }
    /**
     *  Number of dimensions.
     */
    get nDims() {
        return this.meta.shape.length;
    }
    /**
     *  The total number of elements in the array.
     */
    get size() {
        // this.refreshMetadata()
        return this.meta.shape.reduce((x, y) => x * y, 1);
    }
    get length() {
        return this.shape[0];
    }
    get _chunkDataShape() {
        if (this.shape === []) {
            return [1];
        }
        else {
            const s = [];
            for (let i = 0; i < this.shape.length; i++) {
                s[i] = Math.ceil(this.shape[i] / this.chunks[i]);
            }
            return s;
        }
    }
    /**
     * A tuple of integers describing the number of chunks along each
     * dimension of the array.
     */
    get chunkDataShape() {
        // this.refreshMetadata();
        return this._chunkDataShape;
    }
    /**
     * Total number of chunks.
     */
    get numChunks() {
        // this.refreshMetadata();
        return this.chunkDataShape.reduce((x, y) => x * y, 1);
    }
    /**
     * Instantiate an array from an initialized store.
     * @param store Array store, already initialized.
     * @param path Storage path.
     * @param readOnly True if array should be protected against modification.
     * @param chunkStore Separate storage for chunks. If not provided, `store` will be used for storage of both chunks and metadata.
     * @param cacheMetadata If true (default), array configuration metadata will be cached for the lifetime of the object.
     * If false, array metadata will be reloaded prior to all data access and modification operations (may incur overhead depending on storage and data access pattern).
     * @param cacheAttrs If true (default), user attributes will be cached for attribute read operations.
     * If false, user attributes are reloaded from the store prior to all attribute read operations.
     */
    static async create(store, path = null, readOnly = false, chunkStore = null, cacheMetadata = true, cacheAttrs = true) {
        const metadata = await this.loadMetadataForConstructor(store, path);
        return new ZarrArray(store, path, metadata, readOnly, chunkStore, cacheMetadata, cacheAttrs);
    }
    static async loadMetadataForConstructor(store, path) {
        try {
            path = normalizeStoragePath(path);
            const keyPrefix = pathToPrefix(path);
            const metaStoreValue = await store.getItem(keyPrefix + ARRAY_META_KEY);
            return parseMetadata(metaStoreValue);
        }
        catch (error) {
            if (await containsGroup(store, path)) {
                throw new ContainsGroupError(path !== null && path !== void 0 ? path : '');
            }
            throw new Error("Failed to load metadata for ZarrArray:" + error.toString());
        }
    }
    /**
     * (Re)load metadata from store
     */
    async reloadMetadata() {
        const metaKey = this.keyPrefix + ARRAY_META_KEY;
        const metaStoreValue = this.store.getItem(metaKey);
        this.meta = parseMetadata(await metaStoreValue);
        return this.meta;
    }
    async refreshMetadata() {
        if (!this.cacheMetadata) {
            await this.reloadMetadata();
        }
    }
    get(selection = null, opts = {}) {
        return this.getBasicSelection(selection, false, opts);
    }
    getRaw(selection = null, opts = {}) {
        return this.getBasicSelection(selection, true, opts);
    }
    async getBasicSelection(selection, asRaw = false, { concurrencyLimit = 10, progressCallback } = {}) {
        // Refresh metadata
        if (!this.cacheMetadata) {
            await this.reloadMetadata();
        }
        // Check fields (TODO?)
        if (this.shape === []) {
            throw new Error("Shape [] indexing is not supported yet");
        }
        else {
            return this.getBasicSelectionND(selection, asRaw, concurrencyLimit, progressCallback);
        }
    }
    getBasicSelectionND(selection, asRaw, concurrencyLimit, progressCallback) {
        const indexer = new BasicIndexer(selection, this);
        return this.getSelection(indexer, asRaw, concurrencyLimit, progressCallback);
    }
    async getSelection(indexer, asRaw, concurrencyLimit, progressCallback) {
        // We iterate over all chunks which overlap the selection and thus contain data
        // that needs to be extracted. Each chunk is processed in turn, extracting the
        // necessary data and storing into the correct location in the output array.
        // N.B., it is an important optimisation that we only visit chunks which overlap
        // the selection. This minimises the number of iterations in the main for loop.
        // check fields are sensible (TODO?)
        const outDtype = this.dtype;
        const outShape = indexer.shape;
        const outSize = indexer.shape.reduce((x, y) => x * y, 1);
        if (asRaw && (outSize === this.chunkSize)) {
            // Optimization: if output strided array _is_ chunk exactly,
            // decode directly as new TypedArray and return
            const itr = indexer.iter();
            const proj = itr.next(); // ensure there is only one projection
            if (proj.done === false && itr.next().done === true) {
                const chunkProjection = proj.value;
                const out = await this.decodeDirectToRawArray(chunkProjection, outShape, outSize);
                return out;
            }
        }
        const out = asRaw
            ? new RawArray(null, outShape, outDtype)
            : new NestedArray(null, outShape, outDtype);
        if (outSize === 0) {
            return out;
        }
        // create promise queue with concurrency control
        const queue = new PQueue({ concurrency: concurrencyLimit });
        if (progressCallback) {
            let progress = 0;
            let queueSize = 0;
            for (const _ of indexer.iter())
                queueSize += 1;
            progressCallback({ progress: 0, queueSize: queueSize });
            for (const proj of indexer.iter()) {
                (async () => {
                    await queue.add(() => this.chunkGetItem(proj.chunkCoords, proj.chunkSelection, out, proj.outSelection, indexer.dropAxes));
                    progress += 1;
                    progressCallback({ progress: progress, queueSize: queueSize });
                })();
            }
        }
        else {
            for (const proj of indexer.iter()) {
                queue.add(() => this.chunkGetItem(proj.chunkCoords, proj.chunkSelection, out, proj.outSelection, indexer.dropAxes));
            }
        }
        // guarantees that all work on queue has finished
        await queue.onIdle();
        // Return scalar instead of zero-dimensional array.
        if (out.shape.length === 0) {
            return out.data[0];
        }
        return out;
    }
    /**
     * Obtain part or whole of a chunk.
     * @param chunkCoords Indices of the chunk.
     * @param chunkSelection Location of region within the chunk to extract.
     * @param out Array to store result in.
     * @param outSelection Location of region within output array to store results in.
     * @param dropAxes Axes to squeeze out of the chunk.
     */
    async chunkGetItem(chunkCoords, chunkSelection, out, outSelection, dropAxes) {
        if (chunkCoords.length !== this._chunkDataShape.length) {
            throw new ValueError(`Inconsistent shapes: chunkCoordsLength: ${chunkCoords.length}, cDataShapeLength: ${this.chunkDataShape.length}`);
        }
        const cKey = this.chunkKey(chunkCoords);
        try {
            const cdata = await this.chunkStore.getItem(cKey);
            const decodedChunk = await this.decodeChunk(cdata);
            if (out instanceof NestedArray) {
                if (isContiguousSelection(outSelection) && isTotalSlice(chunkSelection, this.chunks) && !this.meta.filters) {
                    // Optimization: we want the whole chunk, and the destination is
                    // contiguous, so we can decompress directly from the chunk
                    // into the destination array
                    // TODO check order
                    // TODO filters..
                    out.set(outSelection, this.toNestedArray(decodedChunk));
                    return;
                }
                // Decode chunk
                const chunk = this.toNestedArray(decodedChunk);
                const tmp = chunk.get(chunkSelection);
                if (dropAxes !== null) {
                    throw new Error("Drop axes is not supported yet");
                }
                out.set(outSelection, tmp);
            }
            else {
                /* RawArray
                Copies chunk by index directly into output. Doesn't matter if selection is contiguous
                since store/output are different shapes/strides.
                */
                out.set(outSelection, this.chunkBufferToRawArray(decodedChunk), chunkSelection);
            }
        }
        catch (error) {
            if (isKeyError(error)) {
                // fill with scalar if cKey doesn't exist in store
                if (this.fillValue !== null) {
                    out.set(outSelection, this.fillValue);
                }
            }
            else {
                // Different type of error - rethrow
                throw error;
            }
        }
    }
    async getRawChunk(chunkCoords, opts) {
        if (chunkCoords.length !== this.shape.length) {
            throw new Error(`Chunk coordinates ${chunkCoords.join(".")} do not correspond to shape ${this.shape}.`);
        }
        try {
            for (let i = 0; i < chunkCoords.length; i++) {
                const dimLength = Math.ceil(this.shape[i] / this.chunks[i]);
                chunkCoords[i] = normalizeIntegerSelection(chunkCoords[i], dimLength);
            }
        }
        catch (error) {
            if (error instanceof BoundsCheckError) {
                throw new BoundsCheckError(`index ${chunkCoords.join(".")} is out of bounds for shape: ${this.shape} and chunks ${this.chunks}`);
            }
            else {
                throw error;
            }
        }
        const cKey = this.chunkKey(chunkCoords);
        const cdata = this.chunkStore.getItem(cKey, opts === null || opts === void 0 ? void 0 : opts.storeOptions);
        const buffer = await this.decodeChunk(await cdata);
        const outShape = this.chunks.filter(d => d !== 1); // squeeze chunk dim if 1
        return new RawArray(buffer, outShape, this.dtype);
    }
    chunkKey(chunkCoords) {
        return this.keyPrefix + chunkCoords.join(".");
    }
    ensureByteArray(chunkData) {
        if (typeof chunkData === "string") {
            return new Uint8Array(Buffer.from(chunkData).buffer);
        }
        return new Uint8Array(chunkData);
    }
    toTypedArray(buffer) {
        return new DTYPE_TYPEDARRAY_MAPPING[this.dtype](buffer);
    }
    toNestedArray(data) {
        const buffer = this.ensureByteArray(data).buffer;
        return new NestedArray(buffer, this.chunks, this.dtype);
    }
    async decodeChunk(chunkData) {
        let bytes = this.ensureByteArray(chunkData);
        if (this.compressor !== null) {
            bytes = await (await this.compressor).decode(bytes);
        }
        if (this.dtype.includes('>')) {
            // Need to flip bytes for Javascript TypedArrays
            // We flip bytes in-place to avoid creating an extra copy of the decoded buffer.
            byteSwapInplace(this.toTypedArray(bytes.buffer));
        }
        // TODO filtering etc
        return bytes.buffer;
    }
    chunkBufferToRawArray(buffer) {
        return new RawArray(buffer, this.chunks, this.dtype);
    }
    async decodeDirectToRawArray({ chunkCoords }, outShape, outSize) {
        const cKey = this.chunkKey(chunkCoords);
        try {
            const cdata = await this.chunkStore.getItem(cKey);
            return new RawArray(await this.decodeChunk(cdata), outShape, this.dtype);
        }
        catch (error) {
            if (isKeyError(error)) {
                // fill with scalar if item doesn't exist
                const data = new DTYPE_TYPEDARRAY_MAPPING[this.dtype](outSize);
                return new RawArray(data.fill(this.fillValue), outShape);
            }
            else {
                // Different type of error - rethrow
                throw error;
            }
        }
    }
    async set(selection = null, value, opts = {}) {
        await this.setBasicSelection(selection, value, opts);
    }
    async setBasicSelection(selection, value, { concurrencyLimit = 10, progressCallback } = {}) {
        if (this.readOnly) {
            throw new PermissionError("Object is read only");
        }
        if (!this.cacheMetadata) {
            await this.reloadMetadata();
        }
        if (this.shape === []) {
            throw new Error("Shape [] indexing is not supported yet");
        }
        else {
            await this.setBasicSelectionND(selection, value, concurrencyLimit, progressCallback);
        }
    }
    async setBasicSelectionND(selection, value, concurrencyLimit, progressCallback) {
        const indexer = new BasicIndexer(selection, this);
        await this.setSelection(indexer, value, concurrencyLimit, progressCallback);
    }
    getChunkValue(proj, indexer, value, selectionShape) {
        let chunkValue;
        if (selectionShape === []) {
            chunkValue = value;
        }
        else if (typeof value === "number") {
            chunkValue = value;
        }
        else {
            chunkValue = value.get(proj.outSelection);
            // tslint:disable-next-line: strict-type-predicates
            if (indexer.dropAxes !== null) {
                throw new Error("Handling drop axes not supported yet");
            }
        }
        return chunkValue;
    }
    async setSelection(indexer, value, concurrencyLimit, progressCallback) {
        // We iterate over all chunks which overlap the selection and thus contain data
        // that needs to be replaced. Each chunk is processed in turn, extracting the
        // necessary data from the value array and storing into the chunk array.
        // N.B., it is an important optimisation that we only visit chunks which overlap
        // the selection. This minimises the number of iterations in the main for loop.
        // TODO? check fields are sensible
        // Determine indices of chunks overlapping the selection
        const selectionShape = indexer.shape;
        // Check value shape
        if (selectionShape === []) ;
        else if (typeof value === "number") ;
        else if (value instanceof NestedArray) {
            // TODO: non stringify equality check
            if (!arrayEquals1D(value.shape, selectionShape)) {
                throw new ValueError(`Shape mismatch in source NestedArray and set selection: ${value.shape} and ${selectionShape}`);
            }
        }
        else {
            // TODO support TypedArrays, buffers, etc
            throw new Error("Unknown data type for setting :(");
        }
        const queue = new PQueue({ concurrency: concurrencyLimit });
        if (progressCallback) {
            let queueSize = 0;
            for (const _ of indexer.iter())
                queueSize += 1;
            let progress = 0;
            progressCallback({ progress: 0, queueSize: queueSize });
            for (const proj of indexer.iter()) {
                const chunkValue = this.getChunkValue(proj, indexer, value, selectionShape);
                (async () => {
                    await queue.add(() => this.chunkSetItem(proj.chunkCoords, proj.chunkSelection, chunkValue));
                    progress += 1;
                    progressCallback({ progress: progress, queueSize: queueSize });
                })();
            }
        }
        else {
            for (const proj of indexer.iter()) {
                const chunkValue = this.getChunkValue(proj, indexer, value, selectionShape);
                queue.add(() => this.chunkSetItem(proj.chunkCoords, proj.chunkSelection, chunkValue));
            }
        }
        // guarantees that all work on queue has finished
        await queue.onIdle();
    }
    async chunkSetItem(chunkCoords, chunkSelection, value) {
        // Obtain key for chunk storage
        const chunkKey = this.chunkKey(chunkCoords);
        let chunk = null;
        const dtypeConstr = DTYPE_TYPEDARRAY_MAPPING[this.dtype];
        const chunkSize = this.chunkSize;
        if (isTotalSlice(chunkSelection, this.chunks)) {
            // Totally replace chunk
            // Optimization: we are completely replacing the chunk, so no need
            // to access the existing chunk data
            if (typeof value === "number") {
                // TODO get the right type here
                chunk = new dtypeConstr(chunkSize);
                chunk.fill(value);
            }
            else {
                chunk = value.flatten();
            }
        }
        else {
            // partially replace the contents of this chunk
            // Existing chunk data
            let chunkData;
            try {
                // Chunk is initialized if this does not error
                const chunkStoreData = await this.chunkStore.getItem(chunkKey);
                const dBytes = await this.decodeChunk(chunkStoreData);
                chunkData = this.toTypedArray(dBytes);
            }
            catch (error) {
                if (isKeyError(error)) {
                    // Chunk is not initialized
                    chunkData = new dtypeConstr(chunkSize);
                    if (this.fillValue !== null) {
                        chunkData.fill(this.fillValue);
                    }
                }
                else {
                    // Different type of error - rethrow
                    throw error;
                }
            }
            const chunkNestedArray = new NestedArray(chunkData, this.chunks, this.dtype);
            chunkNestedArray.set(chunkSelection, value);
            chunk = chunkNestedArray.flatten();
        }
        const chunkData = await this.encodeChunk(chunk);
        this.chunkStore.setItem(chunkKey, chunkData);
    }
    async encodeChunk(chunk) {
        if (this.dtype.includes('>')) {
            /*
             * If big endian, flip bytes before applying compression and setting store.
             *
             * Here we create a copy (not in-place byteswapping) to avoid flipping the
             * bytes in the buffers of user-created Raw- and NestedArrays.
            */
            chunk = byteSwap(chunk);
        }
        if (this.compressor !== null) {
            const bytes = new Uint8Array(chunk.buffer);
            const cbytes = await (await this.compressor).encode(bytes);
            return cbytes.buffer;
        }
        // TODO: filters, etc
        return chunk.buffer;
    }
}

class MemoryStore {
    constructor(root = {}) {
        this.root = root;
    }
    proxy() {
        return createProxy(this);
    }
    getParent(item) {
        let parent = this.root;
        const segments = item.split('/');
        // find the parent container
        for (const k of segments.slice(0, segments.length - 1)) {
            parent = parent[k];
            if (!parent) {
                throw Error(item);
            }
            // if not isinstance(parent, self.cls):
            //     raise KeyError(item)
        }
        return [parent, segments[segments.length - 1]];
    }
    requireParent(item) {
        let parent = this.root;
        const segments = item.split('/');
        // require the parent container
        for (const k of segments.slice(0, segments.length - 1)) {
            // TODO: verify correct implementation
            if (parent[k] === undefined) {
                parent[k] = {};
            }
            parent = parent[k];
        }
        return [parent, segments[segments.length - 1]];
    }
    getItem(item) {
        const [parent, key] = this.getParent(item);
        const value = parent[key];
        if (value === undefined) {
            throw new KeyError(item);
        }
        return value;
    }
    setItem(item, value) {
        const [parent, key] = this.requireParent(item);
        parent[key] = value;
        return true;
    }
    deleteItem(item) {
        const [parent, key] = this.getParent(item);
        return delete parent[key];
    }
    containsItem(item) {
        // TODO: more sane implementation
        try {
            return this.getItem(item) !== undefined;
        }
        catch (e) {
            return false;
        }
    }
    keys() {
        throw new Error("Method not implemented.");
    }
}

var HTTPMethod;
(function (HTTPMethod) {
    HTTPMethod["HEAD"] = "HEAD";
    HTTPMethod["GET"] = "GET";
    HTTPMethod["PUT"] = "PUT";
})(HTTPMethod || (HTTPMethod = {}));
const DEFAULT_METHODS = [HTTPMethod.HEAD, HTTPMethod.GET, HTTPMethod.PUT];
class HTTPStore {
    constructor(url, options = {}) {
        this.url = url;
        const { fetchOptions = {}, supportedMethods = DEFAULT_METHODS } = options;
        this.fetchOptions = fetchOptions;
        this.supportedMethods = new Set(supportedMethods);
    }
    keys() {
        throw new Error('Method not implemented.');
    }
    async getItem(item, opts) {
        const url = joinUrlParts(this.url, item);
        const value = await fetch(url, { ...this.fetchOptions, ...opts });
        if (value.status === 404) {
            // Item is not found
            throw new KeyError(item);
        }
        else if (value.status !== 200) {
            throw new HTTPError(String(value.status));
        }
        // only decode if 200
        if (IS_NODE) {
            return Buffer.from(await value.arrayBuffer());
        }
        else {
            return value.arrayBuffer(); // Browser
        }
    }
    async setItem(item, value) {
        if (!this.supportedMethods.has(HTTPMethod.PUT)) {
            throw new Error('HTTP PUT no a supported method for store.');
        }
        const url = joinUrlParts(this.url, item);
        if (typeof value === 'string') {
            value = new TextEncoder().encode(value).buffer;
        }
        const set = await fetch(url, { ...this.fetchOptions, method: HTTPMethod.PUT, body: value });
        return set.status.toString()[0] === '2';
    }
    deleteItem(_item) {
        throw new Error('Method not implemented.');
    }
    async containsItem(item) {
        const url = joinUrlParts(this.url, item);
        // Just check headers if HEAD method supported
        const method = this.supportedMethods.has(HTTPMethod.HEAD) ? HTTPMethod.HEAD : HTTPMethod.GET;
        const value = await fetch(url, { ...this.fetchOptions, method });
        return value.status === 200;
    }
}

/**
 *
 * @param shape Array shape.
 * @param chunks  Chunk shape. If `true`, will be guessed from `shape` and `dtype`. If
 *      `false`, will be set to `shape`, i.e., single chunk for the whole array.
 *      If an int, the chunk size in each dimension will be given by the value
 *      of `chunks`. Default is `true`.
 * @param dtype NumPy dtype.
 * @param compressor Primary compressor.
 * @param fillValue Default value to use for uninitialized portions of the array.
 * @param order Memory layout to be used within each chunk.
 * @param store Store or path to directory in file system or name of zip file.
 * @param overwrite  If True, delete all pre-existing data in `store` at `path` before creating the array.
 * @param path Path under which array is stored.
 * @param chunkStore Separate storage for chunks. If not provided, `store` will be used for storage of both chunks and metadata.
 * @param filters Sequence of filters to use to encode chunk data prior to compression.
 * @param cacheMetadata If `true` (default), array configuration metadata will be cached for the
 *      lifetime of the object. If `false`, array metadata will be reloaded
 *      prior to all data access and modification operations (may incur
 *      overhead depending on storage and data access pattern).
 * @param cacheAttrs If `true` (default), user attributes will be cached for attribute read
 *      operations. If `false`, user attributes are reloaded from the store prior
 *      to all attribute read operations.
 * @param readOnly `true` if array should be protected against modification, defaults to `false`.
 */
async function create({ shape, chunks = true, dtype = "<i4", compressor = null, fillValue = null, order = "C", store, overwrite = false, path, chunkStore, filters, cacheMetadata = true, cacheAttrs = true, readOnly = false }) {
    store = normalizeStoreArgument(store);
    await initArray(store, shape, chunks, dtype, path, compressor, fillValue, order, overwrite, chunkStore, filters);
    const z = await ZarrArray.create(store, path, readOnly, chunkStore, cacheMetadata, cacheAttrs);
    return z;
}
/**
 * Create an empty array.
 */
async function empty(shape, opts = {}) {
    opts.fillValue = null;
    return create({ shape, ...opts });
}
/**
 * Create an array, with zero being used as the default value for
 * uninitialized portions of the array.
 */
async function zeros(shape, opts = {}) {
    opts.fillValue = 0;
    return create({ shape, ...opts });
}
/**
 * Create an array, with one being used as the default value for
 * uninitialized portions of the array.
 */
async function ones(shape, opts = {}) {
    opts.fillValue = 1;
    return create({ shape, ...opts });
}
/**
 * Create an array, with `fill_value` being used as the default value for
 * uninitialized portions of the array
 */
async function full(shape, fillValue, opts = {}) {
    opts.fillValue = fillValue;
    return create({ shape, ...opts });
}
async function array(data, opts = {}) {
    // TODO: infer chunks?
    let shape = null;
    if (data instanceof NestedArray) {
        shape = data.shape;
        opts.dtype = opts.dtype === undefined ? data.dtype : opts.dtype;
    }
    else {
        shape = data.byteLength;
        // TODO: infer datatype
    }
    // TODO: support TypedArray
    const wasReadOnly = opts.readOnly === undefined ? false : opts.readOnly;
    opts.readOnly = false;
    const z = await create({ shape, ...opts });
    await z.set(null, data);
    z.readOnly = wasReadOnly;
    return z;
}
async function openArray({ shape, mode = "a", chunks = true, dtype = "<i4", compressor = null, fillValue = null, order = "C", store, overwrite = false, path = null, chunkStore, filters, cacheMetadata = true, cacheAttrs = true } = {}) {
    store = normalizeStoreArgument(store);
    if (chunkStore === undefined) {
        chunkStore = normalizeStoreArgument(store);
    }
    path = normalizeStoragePath(path);
    if (mode === "r" || mode === "r+") {
        if (!await containsArray(store, path)) {
            if (await containsGroup(store, path)) {
                throw new ContainsGroupError(path);
            }
            throw new ArrayNotFoundError(path);
        }
    }
    else if (mode === "w") {
        if (shape === undefined) {
            throw new ValueError("Shape can not be undefined when creating a new array");
        }
        await initArray(store, shape, chunks, dtype, path, compressor, fillValue, order, overwrite, chunkStore, filters);
    }
    else if (mode === "a") {
        if (!await containsArray(store, path)) {
            if (await containsGroup(store, path)) {
                throw new ContainsGroupError(path);
            }
            if (shape === undefined) {
                throw new ValueError("Shape can not be undefined when creating a new array");
            }
            await initArray(store, shape, chunks, dtype, path, compressor, fillValue, order, overwrite, chunkStore, filters);
        }
    }
    else if (mode === "w-" || mode === "x") {
        if (await containsArray(store, path)) {
            throw new ContainsArrayError(path);
        }
        else if (await containsGroup(store, path)) {
            throw new ContainsGroupError(path);
        }
        else {
            if (shape === undefined) {
                throw new ValueError("Shape can not be undefined when creating a new array");
            }
            await initArray(store, shape, chunks, dtype, path, compressor, fillValue, order, overwrite, chunkStore, filters);
        }
    }
    else {
        throw new ValueError(`Invalid mode argument: ${mode}`);
    }
    const readOnly = mode === "r";
    return ZarrArray.create(store, path, readOnly, chunkStore, cacheMetadata, cacheAttrs);
}
function normalizeStoreArgument(store) {
    if (store === undefined) {
        return new MemoryStore();
    }
    else if (typeof store === "string") {
        return new HTTPStore(store);
    }
    return store;
}

class Group {
    constructor(store, path = null, metadata, readOnly = false, chunkStore = null, cacheAttrs = true) {
        this.store = store;
        this._chunkStore = chunkStore;
        this.path = normalizeStoragePath(path);
        this.keyPrefix = pathToPrefix(this.path);
        this.readOnly = readOnly;
        this.meta = metadata;
        // Initialize attributes
        const attrKey = this.keyPrefix + ATTRS_META_KEY;
        this.attrs = new Attributes(this.store, attrKey, this.readOnly, cacheAttrs);
    }
    /**
     * Group name following h5py convention.
     */
    get name() {
        if (this.path.length > 0) {
            if (this.path[0] !== "/") {
                return "/" + this.path;
            }
            return this.path;
        }
        return "/";
    }
    /**
     * Final component of name.
     */
    get basename() {
        const parts = this.name.split("/");
        return parts[parts.length - 1];
    }
    /**
     * A `Store` providing the underlying storage for array chunks.
     */
    get chunkStore() {
        if (this._chunkStore) {
            return this._chunkStore;
        }
        return this.store;
    }
    static async create(store, path = null, readOnly = false, chunkStore = null, cacheAttrs = true) {
        const metadata = await this.loadMetadataForConstructor(store, path);
        return new Group(store, path, metadata, readOnly, chunkStore, cacheAttrs);
    }
    static async loadMetadataForConstructor(store, path) {
        path = normalizeStoragePath(path);
        const keyPrefix = pathToPrefix(path);
        try {
            const metaStoreValue = await store.getItem(keyPrefix + GROUP_META_KEY);
            return parseMetadata(metaStoreValue);
        }
        catch (error) {
            if (await containsArray(store, path)) {
                throw new ContainsArrayError(path);
            }
            throw new GroupNotFoundError(path);
        }
    }
    itemPath(item) {
        const absolute = typeof item === "string" && item.length > 0 && item[0] === '/';
        const path = normalizeStoragePath(item);
        // Absolute path
        if (!absolute && this.path.length > 0) {
            return this.keyPrefix + path;
        }
        return path;
    }
    /**
     * Create a sub-group.
     */
    async createGroup(name, overwrite = false) {
        if (this.readOnly) {
            throw new PermissionError("group is read only");
        }
        const path = this.itemPath(name);
        await initGroup(this.store, path, this._chunkStore, overwrite);
        return Group.create(this.store, path, this.readOnly, this._chunkStore, this.attrs.cache);
    }
    /**
     * Obtain a sub-group, creating one if it doesn't exist.
     */
    async requireGroup(name, overwrite = false) {
        if (this.readOnly) {
            throw new PermissionError("group is read only");
        }
        const path = this.itemPath(name);
        if (!await containsGroup(this.store, path)) {
            await initGroup(this.store, path, this._chunkStore, overwrite);
        }
        return Group.create(this.store, path, this.readOnly, this._chunkStore, this.attrs.cache);
    }
    getOptsForArrayCreation(name, opts = {}) {
        const path = this.itemPath(name);
        opts.path = path;
        if (opts.cacheAttrs === undefined) {
            opts.cacheAttrs = this.attrs.cache;
        }
        opts.store = this.store;
        opts.chunkStore = this.chunkStore;
        return opts;
    }
    /**
     * Creates an array
     */
    array(name, data, opts, overwrite) {
        if (this.readOnly) {
            throw new PermissionError("group is read only");
        }
        opts = this.getOptsForArrayCreation(name, opts);
        opts.overwrite = overwrite === undefined ? opts.overwrite : overwrite;
        return array(data, opts);
    }
    empty(name, shape, opts = {}) {
        if (this.readOnly) {
            throw new PermissionError("group is read only");
        }
        opts = this.getOptsForArrayCreation(name, opts);
        return empty(shape, opts);
    }
    zeros(name, shape, opts = {}) {
        if (this.readOnly) {
            throw new PermissionError("group is read only");
        }
        opts = this.getOptsForArrayCreation(name, opts);
        return zeros(shape, opts);
    }
    ones(name, shape, opts = {}) {
        if (this.readOnly) {
            throw new PermissionError("group is read only");
        }
        opts = this.getOptsForArrayCreation(name, opts);
        return ones(shape, opts);
    }
    full(name, shape, fillValue, opts = {}) {
        if (this.readOnly) {
            throw new PermissionError("group is read only");
        }
        opts = this.getOptsForArrayCreation(name, opts);
        return full(shape, fillValue, opts);
    }
    createDataset(name, shape, data, opts) {
        if (this.readOnly) {
            throw new PermissionError("group is read only");
        }
        opts = this.getOptsForArrayCreation(name, opts);
        let z;
        if (data === undefined) {
            if (shape === undefined) {
                throw new ValueError("Shape must be set if no data is passed to CreateDataset");
            }
            z = create({ shape, ...opts });
        }
        else {
            z = array(data, opts);
        }
        return z;
    }
    async getItem(item) {
        const path = this.itemPath(item);
        if (await containsArray(this.store, path)) {
            return ZarrArray.create(this.store, path, this.readOnly, this.chunkStore, undefined, this.attrs.cache);
        }
        else if (await containsGroup(this.store, path)) {
            return Group.create(this.store, path, this.readOnly, this._chunkStore, this.attrs.cache);
        }
        throw new KeyError(item);
    }
    async setItem(item, value) {
        await this.array(item, value, {}, true);
        return true;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async deleteItem(_item) {
        if (this.readOnly) {
            throw new PermissionError("group is read only");
        }
        throw new Error("Method not implemented.");
    }
    async containsItem(item) {
        const path = this.itemPath(item);
        return await containsArray(this.store, path) || containsGroup(this.store, path);
    }
    proxy() {
        return createProxy(this);
    }
}
/**
 * Create a group.
 * @param store Store or path to directory in file system.
 * @param path Group path within store.
 * @param chunkStore Separate storage for chunks. If not provided, `store` will be used for storage of both chunks and metadata.
 * @param overwrite If `true`, delete any pre-existing data in `store` at `path` before creating the group.
 * @param cacheAttrs If `true` (default), user attributes will be cached for attribute read operations.
 *   If `false`, user attributes are reloaded from the store prior to all attribute read operations.
 */
async function group(store, path = null, chunkStore, overwrite = false, cacheAttrs = true) {
    store = normalizeStoreArgument(store);
    path = normalizeStoragePath(path);
    if (overwrite || await containsGroup(store)) {
        await initGroup(store, path, chunkStore, overwrite);
    }
    return Group.create(store, path, false, chunkStore, cacheAttrs);
}
/**
 * Open a group using file-mode-like semantics.
 * @param store Store or path to directory in file system or name of zip file.
 * @param path Group path within store.
 * @param mode Persistence mode, see `PersistenceMode` type.
 * @param chunkStore Store or path to directory in file system or name of zip file.
 * @param cacheAttrs If `true` (default), user attributes will be cached for attribute read operations
 *   If False, user attributes are reloaded from the store prior to all attribute read operations.
 *
 */
async function openGroup(store, path = null, mode = "a", chunkStore, cacheAttrs = true) {
    store = normalizeStoreArgument(store);
    if (chunkStore !== undefined) {
        chunkStore = normalizeStoreArgument(store);
    }
    path = normalizeStoragePath(path);
    if (mode === "r" || mode === "r+") {
        if (!await containsGroup(store, path)) {
            if (await containsArray(store, path)) {
                throw new ContainsArrayError(path);
            }
            throw new GroupNotFoundError(path);
        }
    }
    else if (mode === "w") {
        await initGroup(store, path, chunkStore, true);
    }
    else if (mode === "a") {
        if (!await containsGroup(store, path)) {
            if (await containsArray(store, path)) {
                throw new ContainsArrayError(path);
            }
            await initGroup(store, path, chunkStore);
        }
    }
    else if (mode === "w-" || mode === "x") {
        if (await containsArray(store, path)) {
            throw new ContainsArrayError(path);
        }
        else if (await containsGroup(store, path)) {
            throw new ContainsGroupError(path);
        }
        else {
            await initGroup(store, path, chunkStore);
        }
    }
    else {
        throw new ValueError(`Invalid mode argument: ${mode}`);
    }
    const readOnly = mode === "r";
    return Group.create(store, path, readOnly, chunkStore, cacheAttrs);
}

class ObjectStore {
    constructor() {
        this.object = {};
    }
    getItem(item) {
        if (!Object.prototype.hasOwnProperty.call(this.object, item)) {
            throw new KeyError(item);
        }
        return this.object[item];
    }
    setItem(item, value) {
        this.object[item] = value;
        return true;
    }
    deleteItem(item) {
        return delete this.object[item];
    }
    containsItem(item) {
        return Object.prototype.hasOwnProperty.call(this.object, item);
    }
    proxy() {
        return createProxy(this);
    }
    keys() {
        return Object.getOwnPropertyNames(this.object);
    }
}


//# sourceMappingURL=core.mjs.map


/***/ }),

/***/ "./node_modules/zarr/zarr.mjs":
/*!************************************!*\
  !*** ./node_modules/zarr/zarr.mjs ***!
  \************************************/
/*! exports provided: ArrayNotFoundError, BoundsCheckError, ContainsArrayError, ContainsGroupError, DTYPE_TYPEDARRAY_MAPPING, Group, GroupNotFoundError, HTTPError, HTTPStore, InvalidSliceError, KeyError, MemoryStore, NegativeStepError, NestedArray, ObjectStore, PathNotFoundError, PermissionError, TooManyIndicesError, ValueError, ZarrArray, addCodec, array, create, createProxy, empty, full, getCodec, getTypedArrayDtypeString, group, isKeyError, normalizeStoreArgument, ones, openArray, openGroup, rangeTypedArray, slice, sliceIndices, zeros */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ "./node_modules/zarr/core.mjs");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ArrayNotFoundError", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["ArrayNotFoundError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BoundsCheckError", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["BoundsCheckError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainsArrayError", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["ContainsArrayError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainsGroupError", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["ContainsGroupError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DTYPE_TYPEDARRAY_MAPPING", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["DTYPE_TYPEDARRAY_MAPPING"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Group", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["Group"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GroupNotFoundError", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["GroupNotFoundError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HTTPError", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["HTTPError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HTTPStore", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["HTTPStore"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "InvalidSliceError", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["InvalidSliceError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "KeyError", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["KeyError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MemoryStore", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["MemoryStore"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NegativeStepError", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["NegativeStepError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NestedArray", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["NestedArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ObjectStore", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["ObjectStore"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PathNotFoundError", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["PathNotFoundError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PermissionError", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["PermissionError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TooManyIndicesError", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["TooManyIndicesError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ValueError", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["ValueError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ZarrArray", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["ZarrArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addCodec", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["addCodec"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "array", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["array"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "create", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["create"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createProxy", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["createProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "empty", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["empty"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "full", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["full"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getCodec", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["getCodec"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getTypedArrayDtypeString", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["getTypedArrayDtypeString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "group", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["group"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isKeyError", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["isKeyError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "normalizeStoreArgument", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["normalizeStoreArgument"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ones", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["ones"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "openArray", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["openArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "openGroup", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["openGroup"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rangeTypedArray", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["rangeTypedArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["slice"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sliceIndices", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["sliceIndices"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "zeros", function() { return _core_mjs__WEBPACK_IMPORTED_MODULE_0__["zeros"]; });




/*! pako 2.0.2 https://github.com/nodeca/pako @license (MIT AND Zlib) */
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

/* Public constants ==========================================================*/
/* ===========================================================================*/


//const Z_FILTERED          = 1;
//const Z_HUFFMAN_ONLY      = 2;
//const Z_RLE               = 3;
const Z_FIXED               = 4;
//const Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
const Z_BINARY              = 0;
const Z_TEXT                = 1;
//const Z_ASCII             = 1; // = Z_TEXT
const Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

const STORED_BLOCK = 0;
const STATIC_TREES = 1;
const DYN_TREES    = 2;
/* The three kinds of block type */

const MIN_MATCH    = 3;
const MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

const LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

const LITERALS      = 256;
/* number of literal bytes 0..255 */

const L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

const D_CODES       = 30;
/* number of distance codes */

const BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

const HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

const MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

const Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

const MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

const END_BLOCK   = 256;
/* end of block literal code */

const REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

const REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

const REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
const extra_lbits =   /* extra bits for each length code */
  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);

const extra_dbits =   /* extra bits for each distance code */
  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);

const extra_blbits =  /* extra bits for each bit length code */
  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);

const bl_order =
  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

const DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
const static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

const static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

const _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

const _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

const base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

const base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


let static_l_desc;
let static_d_desc;
let static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



const d_code = (dist) => {

  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
};


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
const put_short = (s, w) => {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
};


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
const send_bits = (s, value, length) => {

  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
};


const send_code = (s, c, tree) => {

  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
};


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
const bi_reverse = (code, len) => {

  let res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
};


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
const bi_flush = (s) => {

  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
};


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
const gen_bitlen = (s, desc) =>
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  const tree            = desc.dyn_tree;
  const max_code        = desc.max_code;
  const stree           = desc.stat_desc.static_tree;
  const has_stree       = desc.stat_desc.has_stree;
  const extra           = desc.stat_desc.extra_bits;
  const base            = desc.stat_desc.extra_base;
  const max_length      = desc.stat_desc.max_length;
  let h;              /* heap index */
  let n, m;           /* iterate over the tree elements */
  let bits;           /* bit length */
  let xbits;          /* extra bits */
  let f;              /* frequency */
  let overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
};


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
const gen_codes = (tree, max_code, bl_count) =>
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  const next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  let code = 0;              /* running code value */
  let bits;                  /* bit index */
  let n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    let len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
};


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
const tr_static_init = () => {

  let n;        /* iterates over tree elements */
  let bits;     /* bit counter */
  let length;   /* length value */
  let code;     /* code value */
  let dist;     /* distance index */
  const bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
};


/* ===========================================================================
 * Initialize a new block.
 */
const init_block = (s) => {

  let n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
};


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
const bi_windup = (s) =>
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
};

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
const copy_block = (s, buf, len, header) =>
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  s.pending_buf.set(s.window.subarray(buf, buf + len), s.pending);
  s.pending += len;
};

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
const smaller = (tree, n, m, depth) => {

  const _n2 = n * 2;
  const _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
};

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
const pqdownheap = (s, tree, k) =>
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  const v = s.heap[k];
  let j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
};


// inlined manually
// const SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
const compress_block = (s, ltree, dtree) =>
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  let dist;           /* distance of matched string */
  let lc;             /* match length or unmatched char (if dist == 0) */
  let lx = 0;         /* running index in l_buf */
  let code;           /* the code to send */
  let extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
};


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
const build_tree = (s, desc) =>
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  const tree     = desc.dyn_tree;
  const stree    = desc.stat_desc.static_tree;
  const has_stree = desc.stat_desc.has_stree;
  const elems    = desc.stat_desc.elems;
  let n, m;          /* iterate over heap elements */
  let max_code = -1; /* largest code with non zero frequency */
  let node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
};


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
const scan_tree = (s, tree, max_code) =>
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  let n;                     /* iterates over all tree elements */
  let prevlen = -1;          /* last emitted length */
  let curlen;                /* length of current code */

  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  let count = 0;             /* repeat count of the current code */
  let max_count = 7;         /* max repeat count */
  let min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
const send_tree = (s, tree, max_code) =>
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  let n;                     /* iterates over all tree elements */
  let prevlen = -1;          /* last emitted length */
  let curlen;                /* length of current code */

  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  let count = 0;             /* repeat count of the current code */
  let max_count = 7;         /* max repeat count */
  let min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
const build_bl_tree = (s) => {

  let max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
};


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
const send_all_trees = (s, lcodes, dcodes, blcodes) =>
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  let rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
};


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
const detect_data_type = (s) => {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  let black_mask = 0xf3ffc07f;
  let n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
};


let static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
const _tr_init = (s) =>
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
};


/* ===========================================================================
 * Send a stored block
 */
const _tr_stored_block = (s, buf, stored_len, last) =>
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
};


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
const _tr_align = (s) => {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
};


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
const _tr_flush_block = (s, buf, stored_len, last) =>
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  let max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
};

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
const _tr_tally = (s, dist, lc) =>
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //let out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
};

var _tr_init_1  = _tr_init;
var _tr_stored_block_1 = _tr_stored_block;
var _tr_flush_block_1  = _tr_flush_block;
var _tr_tally_1 = _tr_tally;
var _tr_align_1 = _tr_align;

var trees = {
	_tr_init: _tr_init_1,
	_tr_stored_block: _tr_stored_block_1,
	_tr_flush_block: _tr_flush_block_1,
	_tr_tally: _tr_tally_1,
	_tr_align: _tr_align_1
};

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const adler32 = (adler, buf, len, pos) => {
  let s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
};


var adler32_1 = adler32;

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
const makeTable = () => {
  let c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
};

// Create table on load. Just 255 signed longs. Not a problem.
const crcTable = new Uint32Array(makeTable());


const crc32 = (crc, buf, len, pos) => {
  const t = crcTable;
  const end = pos + len;

  crc ^= -1;

  for (let i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
};


var crc32_1 = crc32;

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var messages = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var constants = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  Z_MEM_ERROR:       -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const { _tr_init: _tr_init$1, _tr_stored_block: _tr_stored_block$1, _tr_flush_block: _tr_flush_block$1, _tr_tally: _tr_tally$1, _tr_align: _tr_align$1 } = trees;




/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK,
  Z_OK, Z_STREAM_END, Z_STREAM_ERROR, Z_DATA_ERROR, Z_BUF_ERROR,
  Z_DEFAULT_COMPRESSION,
  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED: Z_FIXED$1, Z_DEFAULT_STRATEGY,
  Z_UNKNOWN: Z_UNKNOWN$1,
  Z_DEFLATED
} = constants;

/*============================================================================*/


const MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
const MAX_WBITS = 15;
/* 32K LZ77 window */
const DEF_MEM_LEVEL = 8;


const LENGTH_CODES$1  = 29;
/* number of length codes, not counting the special END_BLOCK code */
const LITERALS$1      = 256;
/* number of literal bytes 0..255 */
const L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;
/* number of Literal or Length codes, including the END_BLOCK code */
const D_CODES$1       = 30;
/* number of distance codes */
const BL_CODES$1      = 19;
/* number of codes used to transfer the bit lengths */
const HEAP_SIZE$1     = 2 * L_CODES$1 + 1;
/* maximum heap size */
const MAX_BITS$1  = 15;
/* All codes must not exceed MAX_BITS bits */

const MIN_MATCH$1 = 3;
const MAX_MATCH$1 = 258;
const MIN_LOOKAHEAD = (MAX_MATCH$1 + MIN_MATCH$1 + 1);

const PRESET_DICT = 0x20;

const INIT_STATE = 42;
const EXTRA_STATE = 69;
const NAME_STATE = 73;
const COMMENT_STATE = 91;
const HCRC_STATE = 103;
const BUSY_STATE = 113;
const FINISH_STATE = 666;

const BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
const BS_BLOCK_DONE     = 2; /* block flush performed */
const BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
const BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

const OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

const err = (strm, errorCode) => {
  strm.msg = messages[errorCode];
  return errorCode;
};

const rank = (f) => {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
};

const zero$1 = (buf) => {
  let len = buf.length; while (--len >= 0) { buf[len] = 0; }
};


/* eslint-disable new-cap */
let HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;
// This hash causes less collisions, https://github.com/nodeca/pako/issues/135
// But breaks binary compatibility
//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;
let HASH = HASH_ZLIB;

/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
const flush_pending = (strm) => {
  const s = strm.state;

  //_tr_flush_bits(s);
  let len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
};


const flush_block_only = (s, last) => {
  _tr_flush_block$1(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
};


const put_byte = (s, b) => {
  s.pending_buf[s.pending++] = b;
};


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
const putShortMSB = (s, b) => {

  //  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
};


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
const read_buf = (strm, buf, start, size) => {

  let len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32_1(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32_1(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
};


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
const longest_match = (s, cur_match) => {

  let chain_length = s.max_chain_length;      /* max hash chain length */
  let scan = s.strstart; /* current string */
  let match;                       /* matched string */
  let len;                           /* length of current match */
  let best_len = s.prev_length;              /* best match length so far */
  let nice_match = s.nice_match;             /* stop if match long enough */
  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  const _win = s.window; // shortcut

  const wmask = s.w_mask;
  const prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  const strend = s.strstart + MAX_MATCH$1;
  let scan_end1  = _win[scan + best_len - 1];
  let scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH$1 - (strend - scan);
    scan = strend - MAX_MATCH$1;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
};


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
const fill_window = (s) => {

  const _w_size = s.w_size;
  let p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      s.window.set(s.window.subarray(_w_size, _w_size + _w_size), 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;

      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;

      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH$1) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH$1 - 1]);

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH$1) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    const curr = s.strstart + s.lookahead;
//    let init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
};

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
const deflate_stored = (s, flush) => {

  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  let max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    const max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
};

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
const deflate_fast = (s, flush) => {

  let hash_head;        /* head of the hash chain */
  let bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH$1) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH$1) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = _tr_tally$1(s, s.strstart - s.match_start, s.match_length - MIN_MATCH$1);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH$1) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally$1(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH$1 - 1)) ? s.strstart : MIN_MATCH$1 - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
const deflate_slow = (s, flush) => {

  let hash_head;          /* head of hash chain */
  let bflush;              /* set if current block must be flushed */

  let max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH$1) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH$1 - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH$1 && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH$1 - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH$1 && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH$1;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = _tr_tally$1(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH$1);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH$1 - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = _tr_tally$1(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = _tr_tally$1(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH$1 - 1 ? s.strstart : MIN_MATCH$1 - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
};


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
const deflate_rle = (s, flush) => {

  let bflush;            /* set if current block must be flushed */
  let prev;              /* byte at distance one to match */
  let scan, strend;      /* scan goes up to strend for length of run */

  const _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH$1) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH$1 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH$1 && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH$1;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH$1 - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH$1) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = _tr_tally$1(s, 1, s.match_length - MIN_MATCH$1);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally$1(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
const deflate_huff = (s, flush) => {

  let bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = _tr_tally$1(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {

  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

const configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
const lm_init = (s) => {

  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero$1(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH$1 - 1;
  s.match_available = 0;
  s.ins_h = 0;
};


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new Uint16Array(HEAP_SIZE$1 * 2);
  this.dyn_dtree  = new Uint16Array((2 * D_CODES$1 + 1) * 2);
  this.bl_tree    = new Uint16Array((2 * BL_CODES$1 + 1) * 2);
  zero$1(this.dyn_ltree);
  zero$1(this.dyn_dtree);
  zero$1(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new Uint16Array(MAX_BITS$1 + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new Uint16Array(2 * L_CODES$1 + 1);  /* heap used to build the Huffman trees */
  zero$1(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new Uint16Array(2 * L_CODES$1 + 1); //uch depth[2*L_CODES+1];
  zero$1(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


const deflateResetKeep = (strm) => {

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN$1;

  const s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  _tr_init$1(s);
  return Z_OK;
};


const deflateReset = (strm) => {

  const ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
};


const deflateSetHeader = (strm, head) => {

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
};


const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {

  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  let wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED$1) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  const s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH$1 - 1) / MIN_MATCH$1);

  s.window = new Uint8Array(s.w_size * 2);
  s.head = new Uint16Array(s.hash_size);
  s.prev = new Uint16Array(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new Uint8Array(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
};

const deflateInit = (strm, level) => {

  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
};


const deflate = (strm, flush) => {

  let beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  const s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  const old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      let header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      let level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    let bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        _tr_align$1(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        _tr_stored_block$1(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero$1(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
};


const deflateEnd = (strm) => {

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  const status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
};


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
const deflateSetDictionary = (strm, dictionary) => {

  let dictLength = dictionary.length;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  const s = strm.state;
  const wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero$1(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    let tmpDict = new Uint8Array(s.w_size);
    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  const avail = strm.avail_in;
  const next = strm.next_in;
  const input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH$1) {
    let str = s.strstart;
    let n = s.lookahead - (MIN_MATCH$1 - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH$1 - 1]);

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH$1 - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH$1 - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
};


var deflateInit_1 = deflateInit;
var deflateInit2_1 = deflateInit2;
var deflateReset_1 = deflateReset;
var deflateResetKeep_1 = deflateResetKeep;
var deflateSetHeader_1 = deflateSetHeader;
var deflate_2 = deflate;
var deflateEnd_1 = deflateEnd;
var deflateSetDictionary_1 = deflateSetDictionary;
var deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
module.exports.deflateBound = deflateBound;
module.exports.deflateCopy = deflateCopy;
module.exports.deflateParams = deflateParams;
module.exports.deflatePending = deflatePending;
module.exports.deflatePrime = deflatePrime;
module.exports.deflateTune = deflateTune;
*/

var deflate_1 = {
	deflateInit: deflateInit_1,
	deflateInit2: deflateInit2_1,
	deflateReset: deflateReset_1,
	deflateResetKeep: deflateResetKeep_1,
	deflateSetHeader: deflateSetHeader_1,
	deflate: deflate_2,
	deflateEnd: deflateEnd_1,
	deflateSetDictionary: deflateSetDictionary_1,
	deflateInfo: deflateInfo
};

const _has = (obj, key) => {
  return Object.prototype.hasOwnProperty.call(obj, key);
};

var assign = function (obj /*from1, from2, from3, ...*/) {
  const sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    const source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (const p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// Join array of chunks to single array.
var flattenChunks = (chunks) => {
  // calculate data length
  let len = 0;

  for (let i = 0, l = chunks.length; i < l; i++) {
    len += chunks[i].length;
  }

  // join chunks
  const result = new Uint8Array(len);

  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
    let chunk = chunks[i];
    result.set(chunk, pos);
    pos += chunk.length;
  }

  return result;
};

var common = {
	assign: assign,
	flattenChunks: flattenChunks
};

// String encode/decode helpers


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
let STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
const _utf8len = new Uint8Array(256);
for (let q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
var string2buf = (str) => {
  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new Uint8Array(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper
const buf2binstring = (buf, len) => {
  // On Chrome, the arguments in a function call that are allowed is `65534`.
  // If the length of the buffer is smaller than that, we can use this optimization,
  // otherwise we will take a slower path.
  if (len < 65534) {
    if (buf.subarray && STR_APPLY_UIA_OK) {
      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
    }
  }

  let result = '';
  for (let i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
};


// convert array to string
var buf2string = (buf, max) => {
  let i, out;
  const len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  const utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    let c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    let c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
var utf8border = (buf, max) => {

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  let pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means buffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

var strings = {
	string2buf: string2buf,
	buf2string: buf2string,
	utf8border: utf8border
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

var zstream = ZStream;

const toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$1,
  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1,
  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
  Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,
  Z_DEFLATED: Z_DEFLATED$1
} = constants;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/

/**
 * Deflate.result -> Uint8Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  this.options = common.assign({
    level: Z_DEFAULT_COMPRESSION$1,
    method: Z_DEFLATED$1,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY$1
  }, options || {});

  let opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new zstream();
  this.strm.avail_out = 0;

  let status = deflate_1.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK$1) {
    throw new Error(messages[status]);
  }

  if (opt.header) {
    deflate_1.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    let dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = deflate_1.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK$1) {
      throw new Error(messages[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must
 * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending
 * buffers and call [[Deflate#onEnd]].
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  let status, _flush_mode;

  if (this.ended) { return false; }

  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
  else _flush_mode = flush_mode === true ? Z_FINISH$1 : Z_NO_FLUSH$1;

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  for (;;) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    // Make sure avail_out > 6 to avoid repeating markers
    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH$1) && strm.avail_out <= 6) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }

    status = deflate_1.deflate(strm, _flush_mode);

    // Ended => flush and finish
    if (status === Z_STREAM_END$1) {
      if (strm.next_out > 0) {
        this.onData(strm.output.subarray(0, strm.next_out));
      }
      status = deflate_1.deflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return status === Z_OK$1;
    }

    // Flush if out buffer full
    if (strm.avail_out === 0) {
      this.onData(strm.output);
      continue;
    }

    // Flush if requested and has data
    if (_flush_mode > 0 && strm.next_out > 0) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }

    if (strm.avail_in === 0) break;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array): output data.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK$1) {
    this.result = common.flattenChunks(this.chunks);
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array
 * - data (Uint8Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate$1(input, options) {
  const deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array
 * - data (Uint8Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate$1(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array
 * - data (Uint8Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate$1(input, options);
}


var Deflate_1 = Deflate;
var deflate_2$1 = deflate$1;
var deflateRaw_1 = deflateRaw;
var gzip_1 = gzip;
var constants$1 = constants;

var deflate_1$1 = {
	Deflate: Deflate_1,
	deflate: deflate_2$1,
	deflateRaw: deflateRaw_1,
	gzip: gzip_1,
	constants: constants$1
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
const BAD = 30;       /* got a data error -- remain here until reset */
const TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
var inffast = function inflate_fast(strm, start) {
  let _in;                    /* local strm.input */
  let last;                   /* have enough input while in < last */
  let _out;                   /* local strm.output */
  let beg;                    /* inflate()'s initial strm.output */
  let end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  let dmax;                   /* maximum distance from zlib header */
//#endif
  let wsize;                  /* window size or zero if not using window */
  let whave;                  /* valid bytes in the window */
  let wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  let s_window;               /* allocated sliding window, if wsize != 0 */
  let hold;                   /* local strm.hold */
  let bits;                   /* local strm.bits */
  let lcode;                  /* local strm.lencode */
  let dcode;                  /* local strm.distcode */
  let lmask;                  /* mask for first level of length codes */
  let dmask;                  /* mask for first level of distance codes */
  let here;                   /* retrieved table entry */
  let op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  let len;                    /* match length, unused bytes */
  let dist;                   /* match distance */
  let from;                   /* where to copy match from */
  let from_source;


  let input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  const state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const MAXBITS = 15;
const ENOUGH_LENS = 852;
const ENOUGH_DISTS = 592;
//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

const CODES = 0;
const LENS = 1;
const DISTS = 2;

const lbase = new Uint16Array([ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
]);

const lext = new Uint8Array([ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
]);

const dbase = new Uint16Array([ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
]);

const dext = new Uint8Array([ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
]);

const inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>
{
  const bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  let len = 0;               /* a code's length in bits */
  let sym = 0;               /* index of code symbols */
  let min = 0, max = 0;          /* minimum and maximum code lengths */
  let root = 0;              /* number of index bits for root table */
  let curr = 0;              /* number of index bits for current table */
  let drop = 0;              /* code bits to drop for sub-table */
  let left = 0;                   /* number of prefix codes available */
  let used = 0;              /* code entries in table used */
  let huff = 0;              /* Huffman code */
  let incr;              /* for incrementing code, index */
  let fill;              /* index for replicating entries */
  let low;               /* low bits for current root entry */
  let mask;              /* mask for low root bits */
  let next;             /* next available space in table */
  let base = null;     /* base value table to use */
  let base_index = 0;
//  let shoextra;    /* extra bits table to use */
  let end;                    /* use base and extra for symbol > end */
  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  let extra = null;
  let extra_index = 0;

  let here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};


var inftrees = inflate_table;

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.






const CODES$1 = 0;
const LENS$1 = 1;
const DISTS$1 = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_FINISH: Z_FINISH$2, Z_BLOCK: Z_BLOCK$1, Z_TREES,
  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2, Z_NEED_DICT, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR, Z_BUF_ERROR: Z_BUF_ERROR$1,
  Z_DEFLATED: Z_DEFLATED$2
} = constants;


/* STATES ====================================================================*/
/* ===========================================================================*/


const    HEAD = 1;       /* i: waiting for magic header */
const    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
const    TIME = 3;       /* i: waiting for modification time (gzip) */
const    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
const    EXLEN = 5;      /* i: waiting for extra length (gzip) */
const    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
const    NAME = 7;       /* i: waiting for end of file name (gzip) */
const    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
const    HCRC = 9;       /* i: waiting for header crc (gzip) */
const    DICTID = 10;    /* i: waiting for dictionary check value */
const    DICT = 11;      /* waiting for inflateSetDictionary() call */
const        TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */
const        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
const        STORED = 14;    /* i: waiting for stored size (length and complement) */
const        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
const        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
const        TABLE = 17;     /* i: waiting for dynamic block table lengths */
const        LENLENS = 18;   /* i: waiting for code length code lengths */
const        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
const            LEN_ = 20;      /* i: same as LEN below, but only first time in */
const            LEN = 21;       /* i: waiting for length/lit/eob code */
const            LENEXT = 22;    /* i: waiting for length extra bits */
const            DIST = 23;      /* i: waiting for distance code */
const            DISTEXT = 24;   /* i: waiting for distance extra bits */
const            MATCH = 25;     /* o: waiting for output space to copy string */
const            LIT = 26;       /* o: waiting for output space to write literal */
const    CHECK = 27;     /* i: waiting for 32-bit check value */
const    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
const    DONE = 29;      /* finished check, done -- remain here until reset */
const    BAD$1 = 30;       /* got a data error -- remain here until reset */
const    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
const    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



const ENOUGH_LENS$1 = 852;
const ENOUGH_DISTS$1 = 592;
//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

const MAX_WBITS$1 = 15;
/* 32K LZ77 window */
const DEF_WBITS = MAX_WBITS$1;


const zswap32 = (q) => {

  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
};


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new Uint16Array(320); /* temporary storage for code lengths */
  this.work = new Uint16Array(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}


const inflateResetKeep = (strm) => {

  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
  const state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS$1);
  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS$1);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK$2;
};


const inflateReset = (strm) => {

  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
  const state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

};


const inflateReset2 = (strm, windowBits) => {
  let wrap;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
  const state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR$1;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
};


const inflateInit2 = (strm, windowBits) => {

  if (!strm) { return Z_STREAM_ERROR$1; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  const state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  const ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK$2) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
};


const inflateInit = (strm) => {

  return inflateInit2(strm, DEF_WBITS);
};


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
let virgin = true;

let lenfix, distfix; // We have no pointers in JS, so keep tables separate


const fixedtables = (state) => {

  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    lenfix = new Int32Array(512);
    distfix = new Int32Array(32);

    /* literal/length table */
    let sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inftrees(LENS$1,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inftrees(DISTS$1, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
};


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
const updatewindow = (strm, src, end, copy) => {

  let dist;
  const state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new Uint8Array(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    state.window.set(src.subarray(end - state.wsize, end), 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      state.window.set(src.subarray(end - copy, end), 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
};


const inflate = (strm, flush) => {

  let state;
  let input, output;          // input/output buffers
  let next;                   /* next input INDEX */
  let put;                    /* next output INDEX */
  let have, left;             /* available input and output */
  let hold;                   /* bit buffer */
  let bits;                   /* bits in bit buffer */
  let _in, _out;              /* save starting available input and output */
  let copy;                   /* number of stored or match bytes to copy */
  let from;                   /* where to copy match bytes from */
  let from_source;
  let here = 0;               /* current decoding table entry */
  let here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //let last;                   /* parent table entry */
  let last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  let len;                    /* length to copy for repeats, bits to drop */
  let ret;                    /* return code */
  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */
  let opts;

  let n; // temporary variable for NEED_BITS

  const order = /* permutation of code lengths */
    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR$1;
  }

  state = strm.state;
  if (state.mode === TYPE$1) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK$2;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32_1(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD$1;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED$2) {
          strm.msg = 'unknown compression method';
          state.mode = BAD$1;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD$1;
          break;
        }

        // !!! pako patch. Force use `options.windowBits` if passed.
        // Required to always use max window size by default.
        state.dmax = 1 << state.wbits;
        //state.dmax = 1 << len;

        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE$1;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED$2) {
          strm.msg = 'unknown compression method';
          state.mode = BAD$1;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD$1;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32_1(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32_1(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32_1(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32_1(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Uint8Array(state.head.extra_len);
              }
              state.head.extra.set(
                input.subarray(
                  next,
                  // extra field is limited to 65536 bytes
                  // - no need for additional size check
                  next + copy
                ),
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32_1(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32_1(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32_1(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD$1;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE$1;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE$1;
        /* falls through */
      case TYPE$1:
        if (flush === Z_BLOCK$1 || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD$1;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD$1;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          output.set(input.subarray(next, next + copy), put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE$1;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD$1;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inftrees(CODES$1, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD$1;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD$1;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD$1;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD$1) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD$1;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inftrees(LENS$1, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD$1;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inftrees(DISTS$1, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD$1;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inffast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE$1) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE$1;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD$1;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD$1;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD$1;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD$1;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD$1;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD$1;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END$2;
        break inf_leave;
      case BAD$1:
        ret = Z_DATA_ERROR$1;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR$1;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD$1 &&
                      (state.mode < CHECK || flush !== Z_FINISH$2))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE$1 ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH$2) && ret === Z_OK$2) {
    ret = Z_BUF_ERROR$1;
  }
  return ret;
};


const inflateEnd = (strm) => {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR$1;
  }

  let state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK$2;
};


const inflateGetHeader = (strm, head) => {

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
  const state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK$2;
};


const inflateSetDictionary = (strm, dictionary) => {
  const dictLength = dictionary.length;

  let state;
  let dictid;
  let ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR$1; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR$1;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32_1(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR$1;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK$2;
};


var inflateReset_1 = inflateReset;
var inflateReset2_1 = inflateReset2;
var inflateResetKeep_1 = inflateResetKeep;
var inflateInit_1 = inflateInit;
var inflateInit2_1 = inflateInit2;
var inflate_2 = inflate;
var inflateEnd_1 = inflateEnd;
var inflateGetHeader_1 = inflateGetHeader;
var inflateSetDictionary_1 = inflateSetDictionary;
var inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
module.exports.inflateCopy = inflateCopy;
module.exports.inflateGetDictionary = inflateGetDictionary;
module.exports.inflateMark = inflateMark;
module.exports.inflatePrime = inflatePrime;
module.exports.inflateSync = inflateSync;
module.exports.inflateSyncPoint = inflateSyncPoint;
module.exports.inflateUndermine = inflateUndermine;
*/

var inflate_1 = {
	inflateReset: inflateReset_1,
	inflateReset2: inflateReset2_1,
	inflateResetKeep: inflateResetKeep_1,
	inflateInit: inflateInit_1,
	inflateInit2: inflateInit2_1,
	inflate: inflate_2,
	inflateEnd: inflateEnd_1,
	inflateGetHeader: inflateGetHeader_1,
	inflateSetDictionary: inflateSetDictionary_1,
	inflateInfo: inflateInfo
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

var gzheader = GZheader;

const toString$1 = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_FINISH: Z_FINISH$3,
  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_MEM_ERROR: Z_MEM_ERROR$1
} = constants;

/* ===========================================================================*/


/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/

/**
 * Inflate.result -> Uint8Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  this.options = common.assign({
    chunkSize: 1024 * 64,
    windowBits: 15,
    to: ''
  }, options || {});

  const opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new zstream();
  this.strm.avail_out = 0;

  let status  = inflate_1.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== Z_OK$3) {
    throw new Error(messages[status]);
  }

  this.header = new gzheader();

  inflate_1.inflateGetHeader(this.strm, this.header);

  // Setup dictionary
  if (opt.dictionary) {
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      opt.dictionary = strings.string2buf(opt.dictionary);
    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {
      opt.dictionary = new Uint8Array(opt.dictionary);
    }
    if (opt.raw) { //In raw mode we need to set the dictionary early
      status = inflate_1.inflateSetDictionary(this.strm, opt.dictionary);
      if (status !== Z_OK$3) {
        throw new Error(messages[status]);
      }
    }
  }
}

/**
 * Inflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer): input data
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE
 *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,
 *   `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. If end of stream detected,
 * [[Inflate#onEnd]] will be called.
 *
 * `flush_mode` is not needed for normal operation, because end of stream
 * detected automatically. You may try to use it for advanced things, but
 * this functionality was not tested.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  const dictionary = this.options.dictionary;
  let status, _flush_mode, last_avail_out;

  if (this.ended) return false;

  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
  else _flush_mode = flush_mode === true ? Z_FINISH$3 : Z_NO_FLUSH$2;

  // Convert data if needed
  if (toString$1.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  for (;;) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = inflate_1.inflate(strm, _flush_mode);

    if (status === Z_NEED_DICT$1 && dictionary) {
      status = inflate_1.inflateSetDictionary(strm, dictionary);

      if (status === Z_OK$3) {
        status = inflate_1.inflate(strm, _flush_mode);
      } else if (status === Z_DATA_ERROR$2) {
        // Replace code with more verbose
        status = Z_NEED_DICT$1;
      }
    }

    // Skip snyc markers if more data follows and not raw mode
    while (strm.avail_in > 0 &&
           status === Z_STREAM_END$3 &&
           strm.state.wrap > 0 &&
           data[strm.next_in] !== 0)
    {
      inflate_1.inflateReset(strm);
      status = inflate_1.inflate(strm, _flush_mode);
    }

    switch (status) {
      case Z_STREAM_ERROR$2:
      case Z_DATA_ERROR$2:
      case Z_NEED_DICT$1:
      case Z_MEM_ERROR$1:
        this.onEnd(status);
        this.ended = true;
        return false;
    }

    // Remember real `avail_out` value, because we may patch out buffer content
    // to align utf8 strings boundaries.
    last_avail_out = strm.avail_out;

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === Z_STREAM_END$3) {

        if (this.options.to === 'string') {

          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          let tail = strm.next_out - next_out_utf8;
          let utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail & realign counters
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);

          this.onData(utf8str);

        } else {
          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
        }
      }
    }

    // Must repeat iteration if out buffer is full
    if (status === Z_OK$3 && last_avail_out === 0) continue;

    // Finalize if end of stream reached.
    if (status === Z_STREAM_END$3) {
      status = inflate_1.inflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return true;
    }

    if (strm.avail_in === 0) break;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|String): output data. When string output requested,
 *   each chunk will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK$3) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = common.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|String
 * - data (Uint8Array): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako');
 * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));
 * let output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate$1(input, options) {
  const inflator = new Inflate(options);

  inflator.push(input);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) throw inflator.msg || messages[inflator.err];

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|String
 * - data (Uint8Array): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate$1(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|String
 * - data (Uint8Array): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


var Inflate_1 = Inflate;
var inflate_2$1 = inflate$1;
var inflateRaw_1 = inflateRaw;
var ungzip = inflate$1;
var constants$2 = constants;

var inflate_1$1 = {
	Inflate: Inflate_1,
	inflate: inflate_2$1,
	inflateRaw: inflateRaw_1,
	ungzip: ungzip,
	constants: constants$2
};

const { Deflate: Deflate$1, deflate: deflate$2, deflateRaw: deflateRaw$1, gzip: gzip$1 } = deflate_1$1;

const { Inflate: Inflate$1, inflate: inflate$2, inflateRaw: inflateRaw$1, ungzip: ungzip$1 } = inflate_1$1;



var Deflate_1$1 = Deflate$1;
var deflate_1$2 = deflate$2;
var deflateRaw_1$1 = deflateRaw$1;
var gzip_1$1 = gzip$1;
var Inflate_1$1 = Inflate$1;
var inflate_1$2 = inflate$2;
var inflateRaw_1$1 = inflateRaw$1;
var ungzip_1 = ungzip$1;
var constants_1 = constants;

var pako = {
	Deflate: Deflate_1$1,
	deflate: deflate_1$2,
	deflateRaw: deflateRaw_1$1,
	gzip: gzip_1$1,
	Inflate: Inflate_1$1,
	inflate: inflate_1$2,
	inflateRaw: inflateRaw_1$1,
	ungzip: ungzip_1,
	constants: constants_1
};

class GZip {
    constructor(level = 1) {
        if (level < 0 || level > 9) {
            throw new Error('Invalid gzip compression level, it should be between 0 and 9');
        }
        this.level = level;
    }
    static fromConfig({ level }) {
        return new GZip(level);
    }
    encode(data) {
        const gzipped = pako.gzip(data, { level: this.level });
        return gzipped;
    }
    decode(data, out) {
        const uncompressed = pako.ungzip(data);
        if (out !== undefined) {
            out.set(uncompressed);
            return out;
        }
        return uncompressed;
    }
}
GZip.codecId = 'gzip';

class Zlib {
    constructor(level = 1) {
        if (level < -1 || level > 9) {
            throw new Error('Invalid zlib compression level, it should be between -1 and 9');
        }
        this.level = level;
    }
    static fromConfig({ level }) {
        return new Zlib(level);
    }
    encode(data) {
        const gzipped = pako.deflate(data, { level: this.level });
        return gzipped;
    }
    decode(data, out) {
        const uncompressed = pako.inflate(data);
        if (out !== undefined) {
            out.set(uncompressed);
            return out;
        }
        return uncompressed;
    }
}
Zlib.codecId = 'zlib';

const IS_NODE = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;
// This is for the "binary" loader (custom code is ~2x faster than "atob")
// from: https://github.com/evanw/esbuild/blob/150a01844d47127c007c2b1973158d69c560ca21/internal/runtime/runtime.go#L185
let __toBinary = IS_NODE
    ? (base64) => new Uint8Array(Buffer.from(base64, 'base64'))
    : /* @__PURE__ */ (() => {
        var table = new Uint8Array(128);
        for (var i = 0; i < 64; i++)
            table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
        return (base64) => {
            var n = base64.length;
            // @ts-ignore
            var bytes = new Uint8Array((((n - (base64[n - 1] == '=') - (base64[n - 2] == '=')) * 3) / 4) | 0);
            for (var i = 0, j = 0; i < n;) {
                var c0 = table[base64.charCodeAt(i++)], c1 = table[base64.charCodeAt(i++)];
                var c2 = table[base64.charCodeAt(i++)], c3 = table[base64.charCodeAt(i++)];
                bytes[j++] = (c0 << 2) | (c1 >> 4);
                bytes[j++] = (c1 << 4) | (c2 >> 2);
                bytes[j++] = (c2 << 6) | c3;
            }
            return bytes;
        };
    })();
function initEmscriptenModule(moduleFactory, src) {
    const wasmBinary = __toBinary(src);
    return moduleFactory({ noInitialRun: true, wasmBinary });
}

var blosc_codec = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  
  return (
function(blosc_codec) {
  blosc_codec = blosc_codec || {};


var f;f||(f=typeof blosc_codec !== 'undefined' ? blosc_codec : {});var aa,ba;f.ready=new Promise(function(a,b){aa=a;ba=b;});var r={},t;for(t in f)f.hasOwnProperty(t)&&(r[t]=f[t]);var ca="./this.program",da=f.print||console.log.bind(console),u=f.printErr||console.warn.bind(console);for(t in r)r.hasOwnProperty(t)&&(f[t]=r[t]);r=null;f.thisProgram&&(ca=f.thisProgram);var v;f.wasmBinary&&(v=f.wasmBinary);var noExitRuntime;f.noExitRuntime&&(noExitRuntime=f.noExitRuntime);
"object"!==typeof WebAssembly&&w("no native wasm support detected");var y,ea=!1,fa="undefined"!==typeof TextDecoder?new TextDecoder("utf8"):void 0;
function ha(a,b,c){var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.subarray&&fa)return fa.decode(a.subarray(b,c));for(d="";b<c;){var e=a[b++];if(e&128){var g=a[b++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|g);else {var k=a[b++]&63;e=224==(e&240)?(e&15)<<12|g<<6|k:(e&7)<<18|g<<12|k<<6|a[b++]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023));}}else d+=String.fromCharCode(e);}return d}
function ia(a,b,c){var d=z;if(0<c){c=b+c-1;for(var e=0;e<a.length;++e){var g=a.charCodeAt(e);if(55296<=g&&57343>=g){var k=a.charCodeAt(++e);g=65536+((g&1023)<<10)|k&1023;}if(127>=g){if(b>=c)break;d[b++]=g;}else {if(2047>=g){if(b+1>=c)break;d[b++]=192|g>>6;}else {if(65535>=g){if(b+2>=c)break;d[b++]=224|g>>12;}else {if(b+3>=c)break;d[b++]=240|g>>18;d[b++]=128|g>>12&63;}d[b++]=128|g>>6&63;}d[b++]=128|g&63;}}d[b]=0;}}var ja="undefined"!==typeof TextDecoder?new TextDecoder("utf-16le"):void 0;
function ka(a,b){var c=a>>1;for(var d=c+b/2;!(c>=d)&&A[c];)++c;c<<=1;if(32<c-a&&ja)return ja.decode(z.subarray(a,c));c=0;for(d="";;){var e=C[a+2*c>>1];if(0==e||c==b/2)return d;++c;d+=String.fromCharCode(e);}}function la(a,b,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var e=0;e<c;++e)C[b>>1]=a.charCodeAt(e),b+=2;C[b>>1]=0;return b-d}function ma(a){return 2*a.length}
function na(a,b){for(var c=0,d="";!(c>=b/4);){var e=D[a+4*c>>2];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e);}return d}function oa(a,b,c){void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var e=0;e<a.length;++e){var g=a.charCodeAt(e);if(55296<=g&&57343>=g){var k=a.charCodeAt(++e);g=65536+((g&1023)<<10)|k&1023;}D[b>>2]=g;b+=4;if(b+4>c)break}D[b>>2]=0;return b-d}
function pa(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4;}return b}var E,F,z,C,A,D,G,qa,ra;function sa(a){E=a;f.HEAP8=F=new Int8Array(a);f.HEAP16=C=new Int16Array(a);f.HEAP32=D=new Int32Array(a);f.HEAPU8=z=new Uint8Array(a);f.HEAPU16=A=new Uint16Array(a);f.HEAPU32=G=new Uint32Array(a);f.HEAPF32=qa=new Float32Array(a);f.HEAPF64=ra=new Float64Array(a);}var ta=f.INITIAL_MEMORY||16777216;f.wasmMemory?y=f.wasmMemory:y=new WebAssembly.Memory({initial:ta/65536,maximum:32768});
y&&(E=y.buffer);ta=E.byteLength;sa(E);var I,ua=[],va=[],wa=[],xa=[];function ya(){var a=f.preRun.shift();ua.unshift(a);}var J=0,K=null;f.preloadedImages={};f.preloadedAudios={};function w(a){if(f.onAbort)f.onAbort(a);u(a);ea=!0;a=new WebAssembly.RuntimeError("abort("+a+"). Build with -s ASSERTIONS=1 for more info.");ba(a);throw a;}function Aa(a){var b=L;return String.prototype.startsWith?b.startsWith(a):0===b.indexOf(a)}function Ba(){return Aa("data:application/octet-stream;base64,")}
var L="blosc_codec.wasm";if(!Ba()){var Ca=L;L=f.locateFile?f.locateFile(Ca,""):""+Ca;}function Da(){try{if(v)return new Uint8Array(v);throw "both async and sync fetching of the wasm failed";}catch(a){w(a);}}function N(a){for(;0<a.length;){var b=a.shift();if("function"==typeof b)b(f);else {var c=b.T;"number"===typeof c?void 0===b.O?I.get(c)():I.get(c)(b.O):c(void 0===b.O?null:b.O);}}}
function Ea(a){this.N=a-16;this.$=function(b){D[this.N+8>>2]=b;};this.X=function(b){D[this.N+0>>2]=b;};this.Y=function(){D[this.N+4>>2]=0;};this.W=function(){F[this.N+12>>0]=0;};this.Z=function(){F[this.N+13>>0]=0;};this.V=function(b,c){this.$(b);this.X(c);this.Y();this.W();this.Z();};}function Fa(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+a);}}var Ga=void 0;
function P(a){for(var b="";z[a];)b+=Ga[z[a++]];return b}var Q={},R={},S={};function Ha(a){if(void 0===a)return "_unknown";a=a.replace(/[^a-zA-Z0-9_]/g,"$");var b=a.charCodeAt(0);return 48<=b&&57>=b?"_"+a:a}function Ia(a,b){a=Ha(a);return (new Function("body","return function "+a+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n'))(b)}
function Ja(a){var b=Error,c=Ia(a,function(d){this.name=a;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+"\n"+d.replace(/^Error(:[^\n]*)?\n/,""));});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message};return c}var Ka=void 0;function T(a){throw new Ka(a);}var La=void 0;
function Ma(a,b){function c(h){h=b(h);if(h.length!==d.length)throw new La("Mismatched type converter count");for(var l=0;l<d.length;++l)U(d[l],h[l]);}var d=[];d.forEach(function(h){S[h]=a;});var e=Array(a.length),g=[],k=0;a.forEach(function(h,l){R.hasOwnProperty(h)?e[l]=R[h]:(g.push(h),Q.hasOwnProperty(h)||(Q[h]=[]),Q[h].push(function(){e[l]=R[h];++k;k===g.length&&c(e);}));});0===g.length&&c(e);}
function U(a,b,c){c=c||{};if(!("argPackAdvance"in b))throw new TypeError("registerType registeredInstance requires argPackAdvance");var d=b.name;a||T('type "'+d+'" must have a positive integer typeid pointer');if(R.hasOwnProperty(a)){if(c.U)return;T("Cannot register type '"+d+"' twice");}R[a]=b;delete S[a];Q.hasOwnProperty(a)&&(b=Q[a],delete Q[a],b.forEach(function(e){e();}));}var Na=[],V=[{},{value:void 0},{value:null},{value:!0},{value:!1}];
function Qa(a){4<a&&0===--V[a].P&&(V[a]=void 0,Na.push(a));}function Ra(a){switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:var b=Na.length?Na.pop():V.length;V[b]={P:1,value:a};return b}}function Sa(a){return this.fromWireType(G[a>>2])}function Ta(a){if(null===a)return "null";var b=typeof a;return "object"===b||"array"===b||"function"===b?a.toString():""+a}
function Ua(a,b){switch(b){case 2:return function(c){return this.fromWireType(qa[c>>2])};case 3:return function(c){return this.fromWireType(ra[c>>3])};default:throw new TypeError("Unknown float type: "+a);}}function Va(a){var b=Function;if(!(b instanceof Function))throw new TypeError("new_ called with constructor type "+typeof b+" which is not a function");var c=Ia(b.name||"unknownFunctionName",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}
function Wa(a){for(;a.length;){var b=a.pop();a.pop()(b);}}function Xa(a,b){var c=f;if(void 0===c[a].L){var d=c[a];c[a]=function(){c[a].L.hasOwnProperty(arguments.length)||T("Function '"+b+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+c[a].L+")!");return c[a].L[arguments.length].apply(this,arguments)};c[a].L=[];c[a].L[d.S]=d;}}
function Ya(a,b,c){f.hasOwnProperty(a)?((void 0===c||void 0!==f[a].L&&void 0!==f[a].L[c])&&T("Cannot register public name '"+a+"' twice"),Xa(a,a),f.hasOwnProperty(c)&&T("Cannot register multiple overloads of a function with the same number of arguments ("+c+")!"),f[a].L[c]=b):(f[a]=b,void 0!==c&&(f[a].ba=c));}function Za(a,b){for(var c=[],d=0;d<a;d++)c.push(D[(b>>2)+d]);return c}
function $a(a,b){0<=a.indexOf("j")||w("Assertion failed: getDynCaller should only be called with i64 sigs");var c=[];return function(){c.length=arguments.length;for(var d=0;d<arguments.length;d++)c[d]=arguments[d];var e;-1!=a.indexOf("j")?e=c&&c.length?f["dynCall_"+a].apply(null,[b].concat(c)):f["dynCall_"+a].call(null,b):e=I.get(b).apply(null,c);return e}}
function ab(a,b){a=P(a);var c=-1!=a.indexOf("j")?$a(a,b):I.get(b);"function"!==typeof c&&T("unknown function pointer with signature "+a+": "+b);return c}var bb=void 0;function cb(a){a=db(a);var b=P(a);W(a);return b}function eb(a,b){function c(g){e[g]||R[g]||(S[g]?S[g].forEach(c):(d.push(g),e[g]=!0));}var d=[],e={};b.forEach(c);throw new bb(a+": "+d.map(cb).join([", "]));}
function fb(a,b,c){switch(b){case 0:return c?function(d){return F[d]}:function(d){return z[d]};case 1:return c?function(d){return C[d>>1]}:function(d){return A[d>>1]};case 2:return c?function(d){return D[d>>2]}:function(d){return G[d>>2]};default:throw new TypeError("Unknown integer type: "+a);}}var gb={};
function hb(){if(!ib){var a={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"===typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:ca||"./this.program"},b;for(b in gb)a[b]=gb[b];var c=[];for(b in a)c.push(b+"="+a[b]);ib=c;}return ib}for(var ib,jb=[null,[],[]],kb=Array(256),X=0;256>X;++X)kb[X]=String.fromCharCode(X);Ga=kb;Ka=f.BindingError=Ja("BindingError");La=f.InternalError=Ja("InternalError");
f.count_emval_handles=function(){for(var a=0,b=5;b<V.length;++b)void 0!==V[b]&&++a;return a};f.get_first_emval=function(){for(var a=5;a<V.length;++a)if(void 0!==V[a])return V[a];return null};bb=f.UnboundTypeError=Ja("UnboundTypeError");va.push({T:function(){lb();}});
var mb={p:function(a){return Y(a+16)+16},o:function(a,b,c){(new Ea(a)).V(b,c);throw a;},z:function(a,b,c,d,e){var g=Fa(c);b=P(b);U(a,{name:b,fromWireType:function(k){return !!k},toWireType:function(k,h){return h?d:e},argPackAdvance:8,readValueFromPointer:function(k){if(1===c)var h=F;else if(2===c)h=C;else if(4===c)h=D;else throw new TypeError("Unknown boolean type size: "+b);return this.fromWireType(h[k>>g])},M:null});},y:function(a,b){b=P(b);U(a,{name:b,fromWireType:function(c){var d=
V[c].value;Qa(c);return d},toWireType:function(c,d){return Ra(d)},argPackAdvance:8,readValueFromPointer:Sa,M:null});},h:function(a,b,c){c=Fa(c);b=P(b);U(a,{name:b,fromWireType:function(d){return d},toWireType:function(d,e){if("number"!==typeof e&&"boolean"!==typeof e)throw new TypeError('Cannot convert "'+Ta(e)+'" to '+this.name);return e},argPackAdvance:8,readValueFromPointer:Ua(b,c),M:null});},e:function(a,b,c,d,e,g){var k=Za(b,c);a=P(a);e=ab(d,e);Ya(a,function(){eb("Cannot call "+a+" due to unbound types",
k);},b-1);Ma(k,function(h){var l=a,n=a;h=[h[0],null].concat(h.slice(1));var p=e,q=h.length;2>q&&T("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var x=null!==h[1]&&!1,B=!1,m=1;m<h.length;++m)if(null!==h[m]&&void 0===h[m].M){B=!0;break}var Oa="void"!==h[0].name,H="",M="";for(m=0;m<q-2;++m)H+=(0!==m?", ":"")+"arg"+m,M+=(0!==m?", ":"")+"arg"+m+"Wired";n="return function "+Ha(n)+"("+H+") {\nif (arguments.length !== "+(q-2)+") {\nthrowBindingError('function "+n+" called with ' + arguments.length + ' arguments, expected "+
(q-2)+" args!');\n}\n";B&&(n+="var destructors = [];\n");var Pa=B?"destructors":"null";H="throwBindingError invoker fn runDestructors retType classParam".split(" ");p=[T,p,g,Wa,h[0],h[1]];x&&(n+="var thisWired = classParam.toWireType("+Pa+", this);\n");for(m=0;m<q-2;++m)n+="var arg"+m+"Wired = argType"+m+".toWireType("+Pa+", arg"+m+"); // "+h[m+2].name+"\n",H.push("argType"+m),p.push(h[m+2]);x&&(M="thisWired"+(0<M.length?", ":"")+M);n+=(Oa?"var rv = ":"")+"invoker(fn"+(0<M.length?", ":"")+M+");\n";
if(B)n+="runDestructors(destructors);\n";else for(m=x?1:2;m<h.length;++m)q=1===m?"thisWired":"arg"+(m-2)+"Wired",null!==h[m].M&&(n+=q+"_dtor("+q+"); // "+h[m].name+"\n",H.push(q+"_dtor"),p.push(h[m].M));Oa&&(n+="var ret = retType.fromWireType(rv);\nreturn ret;\n");H.push(n+"}\n");h=Va(H).apply(null,p);m=b-1;if(!f.hasOwnProperty(l))throw new La("Replacing nonexistant public symbol");void 0!==f[l].L&&void 0!==m?f[l].L[m]=h:(f[l]=h,f[l].S=m);return []});},c:function(a,b,c,d,e){function g(n){return n}b=
P(b);-1===e&&(e=4294967295);var k=Fa(c);if(0===d){var h=32-8*c;g=function(n){return n<<h>>>h};}var l=-1!=b.indexOf("unsigned");U(a,{name:b,fromWireType:g,toWireType:function(n,p){if("number"!==typeof p&&"boolean"!==typeof p)throw new TypeError('Cannot convert "'+Ta(p)+'" to '+this.name);if(p<d||p>e)throw new TypeError('Passing a number "'+Ta(p)+'" from JS side to C/C++ side to an argument of type "'+b+'", which is outside the valid range ['+d+", "+e+"]!");return l?p>>>0:p|0},argPackAdvance:8,readValueFromPointer:fb(b,
k,0!==d),M:null});},b:function(a,b,c){function d(g){g>>=2;var k=G;return new e(E,k[g+1],k[g])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][b];c=P(c);U(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{U:!0});},i:function(a,b){b=P(b);var c="std::string"===b;U(a,{name:b,fromWireType:function(d){var e=G[d>>2];if(c)for(var g=d+4,k=0;k<=e;++k){var h=d+4+k;if(k==e||0==z[h]){g=g?ha(z,g,h-g):"";if(void 0===l)var l=g;else l+=String.fromCharCode(0),
l+=g;g=h+1;}}else {l=Array(e);for(k=0;k<e;++k)l[k]=String.fromCharCode(z[d+4+k]);l=l.join("");}W(d);return l},toWireType:function(d,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var g="string"===typeof e;g||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||T("Cannot pass non-string to std::string");var k=(c&&g?function(){for(var n=0,p=0;p<e.length;++p){var q=e.charCodeAt(p);55296<=q&&57343>=q&&(q=65536+((q&1023)<<10)|e.charCodeAt(++p)&1023);127>=q?++n:n=2047>=q?n+
2:65535>=q?n+3:n+4;}return n}:function(){return e.length})(),h=Y(4+k+1);G[h>>2]=k;if(c&&g)ia(e,h+4,k+1);else if(g)for(g=0;g<k;++g){var l=e.charCodeAt(g);255<l&&(W(h),T("String has UTF-16 code units that do not fit in 8 bits"));z[h+4+g]=l;}else for(g=0;g<k;++g)z[h+4+g]=e[g];null!==d&&d.push(W,h);return h},argPackAdvance:8,readValueFromPointer:Sa,M:function(d){W(d);}});},d:function(a,b,c){c=P(c);if(2===b){var d=ka;var e=la;var g=ma;var k=function(){return A};var h=1;}else 4===b&&(d=na,e=oa,g=pa,k=function(){return G},
h=2);U(a,{name:c,fromWireType:function(l){for(var n=G[l>>2],p=k(),q,x=l+4,B=0;B<=n;++B){var m=l+4+B*b;if(B==n||0==p[m>>h])x=d(x,m-x),void 0===q?q=x:(q+=String.fromCharCode(0),q+=x),x=m+b;}W(l);return q},toWireType:function(l,n){"string"!==typeof n&&T("Cannot pass non-string to C++ string type "+c);var p=g(n),q=Y(4+p+b);G[q>>2]=p>>h;e(n,q+4,p+b);null!==l&&l.push(W,q);return q},argPackAdvance:8,readValueFromPointer:Sa,M:function(l){W(l);}});},A:function(a,b){b=P(b);U(a,{aa:!0,name:b,argPackAdvance:0,fromWireType:function(){},
toWireType:function(){}});},n:Qa,x:function(a){4<a&&(V[a].P+=1);},C:function(a,b){var c=R[a];void 0===c&&T("_emval_take_value has unknown type "+cb(a));a=c.readValueFromPointer(b);return Ra(a)},t:function(){w();},r:function(a,b,c){z.copyWithin(a,b,b+c);},s:function(a){a>>>=0;var b=z.length;if(2147483648<a)return !1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);d=Math.max(16777216,a,d);0<d%65536&&(d+=65536-d%65536);a:{try{y.grow(Math.min(2147483648,d)-E.byteLength+65535>>>16);sa(y.buffer);
var e=1;break a}catch(g){}e=void 0;}if(e)return !0}return !1},u:function(a,b){var c=0;hb().forEach(function(d,e){var g=b+c;e=D[a+4*e>>2]=g;for(g=0;g<d.length;++g)F[e++>>0]=d.charCodeAt(g);F[e>>0]=0;c+=d.length+1;});return 0},v:function(a,b){var c=hb();D[a>>2]=c.length;var d=0;c.forEach(function(e){d+=e.length+1;});D[b>>2]=d;return 0},w:function(){return 0},q:function(){},g:function(a,b,c,d){for(var e=0,g=0;g<c;g++){for(var k=D[b+8*g>>2],h=D[b+(8*g+4)>>2],l=0;l<h;l++){var n=z[k+l],p=jb[a];0===n||10===n?
((1===a?da:u)(ha(p,0)),p.length=0):p.push(n);}e+=h;}D[d>>2]=e;return 0},a:y,l:function(){return 0},k:function(){return 0},j:function(){},B:function(){return 6},m:function(){},f:function(){}};
(function(){function a(e){f.asm=e.exports;I=f.asm.D;J--;f.monitorRunDependencies&&f.monitorRunDependencies(J);0==J&&(K&&(e=K,K=null,e()));}function b(e){a(e.instance);}function c(e){return Promise.resolve().then(Da).then(function(g){return WebAssembly.instantiate(g,d)}).then(e,function(g){u("failed to asynchronously prepare wasm: "+g);w(g);})}var d={a:mb};J++;f.monitorRunDependencies&&f.monitorRunDependencies(J);if(f.instantiateWasm)try{return f.instantiateWasm(d,
a)}catch(e){return u("Module.instantiateWasm callback failed with error: "+e),!1}(function(){return v||"function"!==typeof WebAssembly.instantiateStreaming||Ba()||Aa("file://")||"function"!==typeof fetch?c(b):fetch(L,{credentials:"same-origin"}).then(function(e){return WebAssembly.instantiateStreaming(e,d).then(b,function(g){u("wasm streaming compile failed: "+g);u("falling back to ArrayBuffer instantiation");return c(b)})})})().catch(ba);return {}})();
var lb=f.___wasm_call_ctors=function(){return (lb=f.___wasm_call_ctors=f.asm.E).apply(null,arguments)},Y=f._malloc=function(){return (Y=f._malloc=f.asm.F).apply(null,arguments)},W=f._free=function(){return (W=f._free=f.asm.G).apply(null,arguments)},db=f.___getTypeName=function(){return (db=f.___getTypeName=f.asm.H).apply(null,arguments)};f.___embind_register_native_and_builtin_types=function(){return (f.___embind_register_native_and_builtin_types=f.asm.I).apply(null,arguments)};
f.dynCall_jiiiii=function(){return (f.dynCall_jiiiii=f.asm.J).apply(null,arguments)};f.dynCall_jiji=function(){return (f.dynCall_jiji=f.asm.K).apply(null,arguments)};var Z;K=function nb(){Z||ob();Z||(K=nb);};
function ob(){function a(){if(!Z&&(Z=!0,f.calledRun=!0,!ea)){N(va);N(wa);aa(f);if(f.onRuntimeInitialized)f.onRuntimeInitialized();if(f.postRun)for("function"==typeof f.postRun&&(f.postRun=[f.postRun]);f.postRun.length;){var b=f.postRun.shift();xa.unshift(b);}N(xa);}}if(!(0<J)){if(f.preRun)for("function"==typeof f.preRun&&(f.preRun=[f.preRun]);f.preRun.length;)ya();N(ua);0<J||(f.setStatus?(f.setStatus("Running..."),setTimeout(function(){setTimeout(function(){f.setStatus("");},1);a();},1)):a());}}
f.run=ob;if(f.preInit)for("function"==typeof f.preInit&&(f.preInit=[f.preInit]);0<f.preInit.length;)f.preInit.pop()();noExitRuntime=!0;ob();


  return blosc_codec.ready
}
);
})();

var wasmSrc = "";

var BloscShuffle;
(function (BloscShuffle) {
    BloscShuffle[BloscShuffle["NOSHUFFLE"] = 0] = "NOSHUFFLE";
    BloscShuffle[BloscShuffle["SHUFFLE"] = 1] = "SHUFFLE";
    BloscShuffle[BloscShuffle["BITSHUFFLE"] = 2] = "BITSHUFFLE";
    BloscShuffle[BloscShuffle["AUTOSHUFFLE"] = -1] = "AUTOSHUFFLE";
})(BloscShuffle || (BloscShuffle = {}));
const COMPRESSORS = new Set(['blosclz', 'lz4', 'lz4hc', 'snappy', 'zlib', 'zstd']);
let emscriptenModule;
class Blosc {
    constructor(clevel = 5, cname = 'lz4', shuffle = BloscShuffle.SHUFFLE, blocksize = 0) {
        if (clevel < 0 || clevel > 9) {
            throw new Error(`Invalid compression level: '${clevel}'. It should be between 0 and 9`);
        }
        if (!COMPRESSORS.has(cname)) {
            throw new Error(`Invalid compressor '${cname}'. Valid compressors include
        'blosclz', 'lz4', 'lz4hc','snappy', 'zlib', 'zstd'.`);
        }
        if (shuffle < -1 || shuffle > 2) {
            throw new Error(`Invalid shuffle ${shuffle}. Must be one of 0 (NOSHUFFLE),
        1 (SHUFFLE), 2 (BITSHUFFLE), -1 (AUTOSHUFFLE).`);
        }
        this.blocksize = blocksize;
        this.clevel = clevel;
        this.cname = cname;
        this.shuffle = shuffle;
    }
    static fromConfig(config) {
        const { blocksize, clevel, cname, shuffle } = config;
        return new Blosc(clevel, cname, shuffle, blocksize);
    }
    async encode(data) {
        if (!emscriptenModule) {
            emscriptenModule = initEmscriptenModule(blosc_codec, wasmSrc);
        }
        const module = await emscriptenModule;
        const view = module.compress(data, this.cname, this.clevel, this.shuffle, this.blocksize);
        const result = new Uint8Array(view); // Copy view and free wasm memory
        module.free_result();
        return result;
    }
    async decode(data, out) {
        if (!emscriptenModule) {
            emscriptenModule = initEmscriptenModule(blosc_codec, wasmSrc);
        }
        const module = await emscriptenModule;
        const view = module.decompress(data);
        const result = new Uint8Array(view); // Copy view and free wasm memory
        module.free_result();
        if (out !== undefined) {
            out.set(result);
            return out;
        }
        return result;
    }
}
Blosc.codecId = 'blosc';
Blosc.COMPRESSORS = [...COMPRESSORS];
Blosc.NOSHUFFLE = BloscShuffle.NOSHUFFLE;
Blosc.SHUFFLE = BloscShuffle.SHUFFLE;
Blosc.BITSHUFFLE = BloscShuffle.BITSHUFFLE;
Blosc.AUTOSHUFFLE = BloscShuffle.AUTOSHUFFLE;

Object(_core_mjs__WEBPACK_IMPORTED_MODULE_0__["addCodec"])(Zlib.codecId, () => Zlib);
Object(_core_mjs__WEBPACK_IMPORTED_MODULE_0__["addCodec"])(GZip.codecId, () => GZip);
Object(_core_mjs__WEBPACK_IMPORTED_MODULE_0__["addCodec"])(Blosc.codecId, () => Blosc);
//# sourceMappingURL=zarr.mjs.map


/***/ }),

/***/ "./node_modules/zustand/context.js":
/*!*****************************************!*\
  !*** ./node_modules/zustand/context.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, '__esModule', { value: true });

var react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

function createContext() {
  var ZustandContext = react.createContext(undefined);

  var Provider = function Provider(_ref) {
    var initialStore = _ref.initialStore,
        createStore = _ref.createStore,
        children = _ref.children;
    var storeRef = react.useRef();

    if (!storeRef.current) {
      if (initialStore) {
        console.warn('Provider initialStore is deprecated and will be removed in the next version.');

        if (!createStore) {
          createStore = function createStore() {
            return initialStore;
          };
        }
      }

      storeRef.current = createStore();
    }

    return react.createElement(ZustandContext.Provider, {
      value: storeRef.current
    }, children);
  };

  var useStore = function useStore(selector, equalityFn) {
    if (equalityFn === void 0) {
      equalityFn = Object.is;
    }

    var useProviderStore = react.useContext(ZustandContext);

    if (!useProviderStore) {
      throw new Error('Seems like you have not used zustand provider as an ancestor.');
    }

    return useProviderStore(selector, equalityFn);
  };

  var useStoreApi = function useStoreApi() {
    var useProviderStore = react.useContext(ZustandContext);

    if (!useProviderStore) {
      throw new Error('Seems like you have not used zustand provider as an ancestor.');
    }

    return react.useMemo(function () {
      return {
        getState: useProviderStore.getState,
        setState: useProviderStore.setState,
        subscribe: useProviderStore.subscribe,
        destroy: useProviderStore.destroy
      };
    }, [useProviderStore]);
  };

  return {
    Provider: Provider,
    useStore: useStore,
    useStoreApi: useStoreApi
  };
}

exports["default"] = createContext;


/***/ }),

/***/ "./node_modules/zustand/index.js":
/*!***************************************!*\
  !*** ./node_modules/zustand/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, '__esModule', { value: true });

var react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

function create$1(createState) {
  var state;
  var listeners = new Set();

  var setState = function setState(partial, replace) {
    var nextState = typeof partial === 'function' ? partial(state) : partial;

    if (nextState !== state) {
      var _previousState = state;
      state = replace ? nextState : Object.assign({}, state, nextState);
      listeners.forEach(function (listener) {
        return listener(state, _previousState);
      });
    }
  };

  var getState = function getState() {
    return state;
  };

  var subscribeWithSelector = function subscribeWithSelector(listener, selector, equalityFn) {
    if (selector === void 0) {
      selector = getState;
    }

    if (equalityFn === void 0) {
      equalityFn = Object.is;
    }

    console.warn('[DEPRECATED] Please use `subscribeWithSelector` middleware');
    var currentSlice = selector(state);

    function listenerToAdd() {
      var nextSlice = selector(state);

      if (!equalityFn(currentSlice, nextSlice)) {
        var _previousSlice = currentSlice;
        listener(currentSlice = nextSlice, _previousSlice);
      }
    }

    listeners.add(listenerToAdd);
    return function () {
      return listeners.delete(listenerToAdd);
    };
  };

  var subscribe = function subscribe(listener, selector, equalityFn) {
    if (selector || equalityFn) {
      return subscribeWithSelector(listener, selector, equalityFn);
    }

    listeners.add(listener);
    return function () {
      return listeners.delete(listener);
    };
  };

  var destroy = function destroy() {
    return listeners.clear();
  };

  var api = {
    setState: setState,
    getState: getState,
    subscribe: subscribe,
    destroy: destroy
  };
  state = createState(setState, getState, api);
  return api;
}

var isSSR = typeof window === 'undefined' || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var useIsomorphicLayoutEffect = isSSR ? react.useEffect : react.useLayoutEffect;

function create(createState) {
  var api = typeof createState === 'function' ? create$1(createState) : createState;

  var useStore = function useStore(selector, equalityFn) {
    if (selector === void 0) {
      selector = api.getState;
    }

    if (equalityFn === void 0) {
      equalityFn = Object.is;
    }

    var _ref = react.useReducer(function (c) {
      return c + 1;
    }, 0),
        forceUpdate = _ref[1];

    var state = api.getState();
    var stateRef = react.useRef(state);
    var selectorRef = react.useRef(selector);
    var equalityFnRef = react.useRef(equalityFn);
    var erroredRef = react.useRef(false);
    var currentSliceRef = react.useRef();

    if (currentSliceRef.current === undefined) {
      currentSliceRef.current = selector(state);
    }

    var newStateSlice;
    var hasNewStateSlice = false;

    if (stateRef.current !== state || selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {
      newStateSlice = selector(state);
      hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);
    }

    useIsomorphicLayoutEffect(function () {
      if (hasNewStateSlice) {
        currentSliceRef.current = newStateSlice;
      }

      stateRef.current = state;
      selectorRef.current = selector;
      equalityFnRef.current = equalityFn;
      erroredRef.current = false;
    });
    var stateBeforeSubscriptionRef = react.useRef(state);
    useIsomorphicLayoutEffect(function () {
      var listener = function listener() {
        try {
          var nextState = api.getState();
          var nextStateSlice = selectorRef.current(nextState);

          if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {
            stateRef.current = nextState;
            currentSliceRef.current = nextStateSlice;
            forceUpdate();
          }
        } catch (error) {
          erroredRef.current = true;
          forceUpdate();
        }
      };

      var unsubscribe = api.subscribe(listener);

      if (api.getState() !== stateBeforeSubscriptionRef.current) {
        listener();
      }

      return unsubscribe;
    }, []);
    var sliceToReturn = hasNewStateSlice ? newStateSlice : currentSliceRef.current;
    react.useDebugValue(sliceToReturn);
    return sliceToReturn;
  };

  Object.assign(useStore, api);

  useStore[Symbol.iterator] = function () {
    console.warn('[useStore, api] = create() is deprecated and will be removed in v4');
    var items = [useStore, api];
    return {
      next: function next() {
        var done = items.length <= 0;
        return {
          value: items.shift(),
          done: done
        };
      }
    };
  };

  return useStore;
}

exports["default"] = create;


/***/ }),

/***/ "./node_modules/zustand/shallow.js":
/*!*****************************************!*\
  !*** ./node_modules/zustand/shallow.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, '__esModule', { value: true });

function shallow(objA, objB) {
  if (Object.is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);

  if (keysA.length !== Object.keys(objB).length) {
    return false;
  }

  for (var i = 0; i < keysA.length; i++) {
    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !Object.is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

exports["default"] = shallow;


/***/ }),

/***/ 0:
/*!********************************************!*\
  !*** ../node/require-utils.node (ignored) ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 1:
/*!*********************************************************!*\
  !*** ./lib/process-utils/child-process-proxy (ignored) ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 10:
/*!***********************!*\
  !*** https (ignored) ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 11:
/*!*********************!*\
  !*** url (ignored) ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 12:
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 13:
/*!******************************!*\
  !*** min-document (ignored) ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 14:
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 2:
/*!********************************!*\
  !*** ../node/buffer (ignored) ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 3:
/*!*********************************!*\
  !*** ./lib/node/util (ignored) ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 4:
/*!*******************************!*\
  !*** ./lib/node/fs (ignored) ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 5:
/*!****************************!*\
  !*** ../node/fs (ignored) ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 6:
/*!*******************************!*\
  !*** asciify-image (ignored) ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 7:
/*!************************************!*\
  !*** ./make-node-stream (ignored) ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 8:
/*!**********************************************************!*\
  !*** ./iterators/make-stream/make-node-stream (ignored) ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 9:
/*!**********************!*\
  !*** http (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });
});
//# sourceMappingURL=index.js.map